// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: connectivity/connectivity.proto

package connectivity

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckChannelConnectivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of channel we checking
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *CheckChannelConnectivityRequest) Reset() {
	*x = CheckChannelConnectivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectivity_connectivity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelConnectivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelConnectivityRequest) ProtoMessage() {}

func (x *CheckChannelConnectivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectivity_connectivity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelConnectivityRequest.ProtoReflect.Descriptor instead.
func (*CheckChannelConnectivityRequest) Descriptor() ([]byte, []int) {
	return file_connectivity_connectivity_proto_rawDescGZIP(), []int{0}
}

func (x *CheckChannelConnectivityRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

// CheckAnchorPeerRes - checking anchor peers response
type CheckChannelConnectivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orderer *OrdererConnectivity `protobuf:"bytes,1,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// all anchor peers in channel and their statuses
	AnchorPeers []*PeerConnectivity `protobuf:"bytes,2,rep,name=anchor_peers,json=anchorPeers,proto3" json:"anchor_peers,omitempty"` // Gossip info
}

func (x *CheckChannelConnectivityResponse) Reset() {
	*x = CheckChannelConnectivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectivity_connectivity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckChannelConnectivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckChannelConnectivityResponse) ProtoMessage() {}

func (x *CheckChannelConnectivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connectivity_connectivity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckChannelConnectivityResponse.ProtoReflect.Descriptor instead.
func (*CheckChannelConnectivityResponse) Descriptor() ([]byte, []int) {
	return file_connectivity_connectivity_proto_rawDescGZIP(), []int{1}
}

func (x *CheckChannelConnectivityResponse) GetOrderer() *OrdererConnectivity {
	if x != nil {
		return x.Orderer
	}
	return nil
}

func (x *CheckChannelConnectivityResponse) GetAnchorPeers() []*PeerConnectivity {
	if x != nil {
		return x.AnchorPeers
	}
	return nil
}

type PeerConnectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint           string               `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	MspId              string               `protobuf:"bytes,2,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	IsAlive            bool                 `protobuf:"varint,3,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	DialDuration       *durationpb.Duration `protobuf:"bytes,4,opt,name=dial_duration,json=dialDuration,proto3" json:"dial_duration,omitempty"`
	DialError          string               `protobuf:"bytes,5,opt,name=dial_error,json=dialError,proto3" json:"dial_error,omitempty"`
	GossipPingDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=gossip_ping_duration,json=gossipPingDuration,proto3" json:"gossip_ping_duration,omitempty"`
	GossipPingError    string               `protobuf:"bytes,7,opt,name=gossip_ping_error,json=gossipPingError,proto3" json:"gossip_ping_error,omitempty"`
}

func (x *PeerConnectivity) Reset() {
	*x = PeerConnectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectivity_connectivity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerConnectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConnectivity) ProtoMessage() {}

func (x *PeerConnectivity) ProtoReflect() protoreflect.Message {
	mi := &file_connectivity_connectivity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConnectivity.ProtoReflect.Descriptor instead.
func (*PeerConnectivity) Descriptor() ([]byte, []int) {
	return file_connectivity_connectivity_proto_rawDescGZIP(), []int{2}
}

func (x *PeerConnectivity) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *PeerConnectivity) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *PeerConnectivity) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *PeerConnectivity) GetDialDuration() *durationpb.Duration {
	if x != nil {
		return x.DialDuration
	}
	return nil
}

func (x *PeerConnectivity) GetDialError() string {
	if x != nil {
		return x.DialError
	}
	return ""
}

func (x *PeerConnectivity) GetGossipPingDuration() *durationpb.Duration {
	if x != nil {
		return x.GossipPingDuration
	}
	return nil
}

func (x *PeerConnectivity) GetGossipPingError() string {
	if x != nil {
		return x.GossipPingError
	}
	return ""
}

type PeersConnectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*PeerConnectivity `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeersConnectivity) Reset() {
	*x = PeersConnectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectivity_connectivity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersConnectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersConnectivity) ProtoMessage() {}

func (x *PeersConnectivity) ProtoReflect() protoreflect.Message {
	mi := &file_connectivity_connectivity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersConnectivity.ProtoReflect.Descriptor instead.
func (*PeersConnectivity) Descriptor() ([]byte, []int) {
	return file_connectivity_connectivity_proto_rawDescGZIP(), []int{3}
}

func (x *PeersConnectivity) GetPeers() []*PeerConnectivity {
	if x != nil {
		return x.Peers
	}
	return nil
}

type OrdererEndpointConnectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint     string               `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	IsAlive      bool                 `protobuf:"varint,2,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	DialDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=dial_duration,json=dialDuration,proto3" json:"dial_duration,omitempty"`
	DialError    string               `protobuf:"bytes,4,opt,name=dial_error,json=dialError,proto3" json:"dial_error,omitempty"`
}

func (x *OrdererEndpointConnectivity) Reset() {
	*x = OrdererEndpointConnectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectivity_connectivity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdererEndpointConnectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdererEndpointConnectivity) ProtoMessage() {}

func (x *OrdererEndpointConnectivity) ProtoReflect() protoreflect.Message {
	mi := &file_connectivity_connectivity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdererEndpointConnectivity.ProtoReflect.Descriptor instead.
func (*OrdererEndpointConnectivity) Descriptor() ([]byte, []int) {
	return file_connectivity_connectivity_proto_rawDescGZIP(), []int{4}
}

func (x *OrdererEndpointConnectivity) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *OrdererEndpointConnectivity) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *OrdererEndpointConnectivity) GetDialDuration() *durationpb.Duration {
	if x != nil {
		return x.DialDuration
	}
	return nil
}

func (x *OrdererEndpointConnectivity) GetDialError() string {
	if x != nil {
		return x.DialError
	}
	return ""
}

type OrdererConnectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId     string                         `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	Endpoints []*OrdererEndpointConnectivity `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *OrdererConnectivity) Reset() {
	*x = OrdererConnectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectivity_connectivity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdererConnectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdererConnectivity) ProtoMessage() {}

func (x *OrdererConnectivity) ProtoReflect() protoreflect.Message {
	mi := &file_connectivity_connectivity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdererConnectivity.ProtoReflect.Descriptor instead.
func (*OrdererConnectivity) Descriptor() ([]byte, []int) {
	return file_connectivity_connectivity_proto_rawDescGZIP(), []int{5}
}

func (x *OrdererConnectivity) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *OrdererConnectivity) GetEndpoints() []*OrdererEndpointConnectivity {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

var File_connectivity_connectivity_proto protoreflect.FileDescriptor

var file_connectivity_connectivity_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1b, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x20,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0c,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0xb8,
	0x02, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x4b, 0x0a, 0x14, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x67, 0x6f, 0x73, 0x73, 0x69,
	0x70, 0x50, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70,
	0x50, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x11, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x69,
	0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69,
	0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68, 0x6c,
	0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x32, 0xd6, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x7d, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61,
	0x62, 0x2f, 0x68, 0x6c, 0x66, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectivity_connectivity_proto_rawDescOnce sync.Once
	file_connectivity_connectivity_proto_rawDescData = file_connectivity_connectivity_proto_rawDesc
)

func file_connectivity_connectivity_proto_rawDescGZIP() []byte {
	file_connectivity_connectivity_proto_rawDescOnce.Do(func() {
		file_connectivity_connectivity_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectivity_connectivity_proto_rawDescData)
	})
	return file_connectivity_connectivity_proto_rawDescData
}

var file_connectivity_connectivity_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_connectivity_connectivity_proto_goTypes = []interface{}{
	(*CheckChannelConnectivityRequest)(nil),  // 0: hlfsdkgo.proto.connectivity.CheckChannelConnectivityRequest
	(*CheckChannelConnectivityResponse)(nil), // 1: hlfsdkgo.proto.connectivity.CheckChannelConnectivityResponse
	(*PeerConnectivity)(nil),                 // 2: hlfsdkgo.proto.connectivity.PeerConnectivity
	(*PeersConnectivity)(nil),                // 3: hlfsdkgo.proto.connectivity.PeersConnectivity
	(*OrdererEndpointConnectivity)(nil),      // 4: hlfsdkgo.proto.connectivity.OrdererEndpointConnectivity
	(*OrdererConnectivity)(nil),              // 5: hlfsdkgo.proto.connectivity.OrdererConnectivity
	(*durationpb.Duration)(nil),              // 6: google.protobuf.Duration
}
var file_connectivity_connectivity_proto_depIdxs = []int32{
	5, // 0: hlfsdkgo.proto.connectivity.CheckChannelConnectivityResponse.orderer:type_name -> hlfsdkgo.proto.connectivity.OrdererConnectivity
	2, // 1: hlfsdkgo.proto.connectivity.CheckChannelConnectivityResponse.anchor_peers:type_name -> hlfsdkgo.proto.connectivity.PeerConnectivity
	6, // 2: hlfsdkgo.proto.connectivity.PeerConnectivity.dial_duration:type_name -> google.protobuf.Duration
	6, // 3: hlfsdkgo.proto.connectivity.PeerConnectivity.gossip_ping_duration:type_name -> google.protobuf.Duration
	2, // 4: hlfsdkgo.proto.connectivity.PeersConnectivity.peers:type_name -> hlfsdkgo.proto.connectivity.PeerConnectivity
	6, // 5: hlfsdkgo.proto.connectivity.OrdererEndpointConnectivity.dial_duration:type_name -> google.protobuf.Duration
	4, // 6: hlfsdkgo.proto.connectivity.OrdererConnectivity.endpoints:type_name -> hlfsdkgo.proto.connectivity.OrdererEndpointConnectivity
	0, // 7: hlfsdkgo.proto.connectivity.ConnectivityService.CheckChannelConnectivity:input_type -> hlfsdkgo.proto.connectivity.CheckChannelConnectivityRequest
	1, // 8: hlfsdkgo.proto.connectivity.ConnectivityService.CheckChannelConnectivity:output_type -> hlfsdkgo.proto.connectivity.CheckChannelConnectivityResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_connectivity_connectivity_proto_init() }
func file_connectivity_connectivity_proto_init() {
	if File_connectivity_connectivity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connectivity_connectivity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelConnectivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectivity_connectivity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckChannelConnectivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectivity_connectivity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerConnectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectivity_connectivity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersConnectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectivity_connectivity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdererEndpointConnectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectivity_connectivity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdererConnectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectivity_connectivity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connectivity_connectivity_proto_goTypes,
		DependencyIndexes: file_connectivity_connectivity_proto_depIdxs,
		MessageInfos:      file_connectivity_connectivity_proto_msgTypes,
	}.Build()
	File_connectivity_connectivity_proto = out.File
	file_connectivity_connectivity_proto_rawDesc = nil
	file_connectivity_connectivity_proto_goTypes = nil
	file_connectivity_connectivity_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConnectivityServiceClient is the client API for ConnectivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectivityServiceClient interface {
	// CheckChannelAnchorPeers - check availability of all anchor peers participating in channel
	CheckChannelConnectivity(ctx context.Context, in *CheckChannelConnectivityRequest, opts ...grpc.CallOption) (*CheckChannelConnectivityResponse, error)
}

type connectivityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectivityServiceClient(cc grpc.ClientConnInterface) ConnectivityServiceClient {
	return &connectivityServiceClient{cc}
}

func (c *connectivityServiceClient) CheckChannelConnectivity(ctx context.Context, in *CheckChannelConnectivityRequest, opts ...grpc.CallOption) (*CheckChannelConnectivityResponse, error) {
	out := new(CheckChannelConnectivityResponse)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.proto.connectivity.ConnectivityService/CheckChannelConnectivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectivityServiceServer is the server API for ConnectivityService service.
type ConnectivityServiceServer interface {
	// CheckChannelAnchorPeers - check availability of all anchor peers participating in channel
	CheckChannelConnectivity(context.Context, *CheckChannelConnectivityRequest) (*CheckChannelConnectivityResponse, error)
}

// UnimplementedConnectivityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConnectivityServiceServer struct {
}

func (*UnimplementedConnectivityServiceServer) CheckChannelConnectivity(context.Context, *CheckChannelConnectivityRequest) (*CheckChannelConnectivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelConnectivity not implemented")
}

func RegisterConnectivityServiceServer(s *grpc.Server, srv ConnectivityServiceServer) {
	s.RegisterService(&_ConnectivityService_serviceDesc, srv)
}

func _ConnectivityService_CheckChannelConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckChannelConnectivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectivityServiceServer).CheckChannelConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.proto.connectivity.ConnectivityService/CheckChannelConnectivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectivityServiceServer).CheckChannelConnectivity(ctx, req.(*CheckChannelConnectivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectivityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdkgo.proto.connectivity.ConnectivityService",
	HandlerType: (*ConnectivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckChannelConnectivity",
			Handler:    _ConnectivityService_CheckChannelConnectivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectivity/connectivity.proto",
}
