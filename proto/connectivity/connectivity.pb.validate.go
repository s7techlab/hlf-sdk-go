// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: connectivity/connectivity.proto

package connectivity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckChannelConnectivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckChannelConnectivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckChannelConnectivityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckChannelConnectivityRequestMultiError, or nil if none found.
func (m *CheckChannelConnectivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckChannelConnectivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChannel()) < 1 {
		err := CheckChannelConnectivityRequestValidationError{
			field:  "Channel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckChannelConnectivityRequestMultiError(errors)
	}

	return nil
}

// CheckChannelConnectivityRequestMultiError is an error wrapping multiple
// validation errors returned by CheckChannelConnectivityRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckChannelConnectivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckChannelConnectivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckChannelConnectivityRequestMultiError) AllErrors() []error { return m }

// CheckChannelConnectivityRequestValidationError is the validation error
// returned by CheckChannelConnectivityRequest.Validate if the designated
// constraints aren't met.
type CheckChannelConnectivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckChannelConnectivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckChannelConnectivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckChannelConnectivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckChannelConnectivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckChannelConnectivityRequestValidationError) ErrorName() string {
	return "CheckChannelConnectivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckChannelConnectivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckChannelConnectivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckChannelConnectivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckChannelConnectivityRequestValidationError{}

// Validate checks the field values on CheckChannelConnectivityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckChannelConnectivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckChannelConnectivityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckChannelConnectivityResponseMultiError, or nil if none found.
func (m *CheckChannelConnectivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckChannelConnectivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckChannelConnectivityResponseValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckChannelConnectivityResponseValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckChannelConnectivityResponseValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnchorPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckChannelConnectivityResponseValidationError{
						field:  fmt.Sprintf("AnchorPeers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckChannelConnectivityResponseValidationError{
						field:  fmt.Sprintf("AnchorPeers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckChannelConnectivityResponseValidationError{
					field:  fmt.Sprintf("AnchorPeers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckChannelConnectivityResponseMultiError(errors)
	}

	return nil
}

// CheckChannelConnectivityResponseMultiError is an error wrapping multiple
// validation errors returned by
// CheckChannelConnectivityResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckChannelConnectivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckChannelConnectivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckChannelConnectivityResponseMultiError) AllErrors() []error { return m }

// CheckChannelConnectivityResponseValidationError is the validation error
// returned by CheckChannelConnectivityResponse.Validate if the designated
// constraints aren't met.
type CheckChannelConnectivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckChannelConnectivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckChannelConnectivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckChannelConnectivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckChannelConnectivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckChannelConnectivityResponseValidationError) ErrorName() string {
	return "CheckChannelConnectivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckChannelConnectivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckChannelConnectivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckChannelConnectivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckChannelConnectivityResponseValidationError{}

// Validate checks the field values on PeerConnectivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PeerConnectivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerConnectivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PeerConnectivityMultiError, or nil if none found.
func (m *PeerConnectivity) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerConnectivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for MspId

	// no validation rules for IsAlive

	if all {
		switch v := interface{}(m.GetDialDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeerConnectivityValidationError{
					field:  "DialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeerConnectivityValidationError{
					field:  "DialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeerConnectivityValidationError{
				field:  "DialDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DialError

	if all {
		switch v := interface{}(m.GetGossipPingDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeerConnectivityValidationError{
					field:  "GossipPingDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeerConnectivityValidationError{
					field:  "GossipPingDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGossipPingDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeerConnectivityValidationError{
				field:  "GossipPingDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GossipPingError

	if len(errors) > 0 {
		return PeerConnectivityMultiError(errors)
	}

	return nil
}

// PeerConnectivityMultiError is an error wrapping multiple validation errors
// returned by PeerConnectivity.ValidateAll() if the designated constraints
// aren't met.
type PeerConnectivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerConnectivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerConnectivityMultiError) AllErrors() []error { return m }

// PeerConnectivityValidationError is the validation error returned by
// PeerConnectivity.Validate if the designated constraints aren't met.
type PeerConnectivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerConnectivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerConnectivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerConnectivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerConnectivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerConnectivityValidationError) ErrorName() string { return "PeerConnectivityValidationError" }

// Error satisfies the builtin error interface
func (e PeerConnectivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerConnectivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerConnectivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerConnectivityValidationError{}

// Validate checks the field values on PeersConnectivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PeersConnectivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeersConnectivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PeersConnectivityMultiError, or nil if none found.
func (m *PeersConnectivity) ValidateAll() error {
	return m.validate(true)
}

func (m *PeersConnectivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PeersConnectivityValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PeersConnectivityValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PeersConnectivityValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PeersConnectivityMultiError(errors)
	}

	return nil
}

// PeersConnectivityMultiError is an error wrapping multiple validation errors
// returned by PeersConnectivity.ValidateAll() if the designated constraints
// aren't met.
type PeersConnectivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeersConnectivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeersConnectivityMultiError) AllErrors() []error { return m }

// PeersConnectivityValidationError is the validation error returned by
// PeersConnectivity.Validate if the designated constraints aren't met.
type PeersConnectivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeersConnectivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeersConnectivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeersConnectivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeersConnectivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeersConnectivityValidationError) ErrorName() string {
	return "PeersConnectivityValidationError"
}

// Error satisfies the builtin error interface
func (e PeersConnectivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeersConnectivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeersConnectivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeersConnectivityValidationError{}

// Validate checks the field values on OrdererEndpointConnectivity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrdererEndpointConnectivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdererEndpointConnectivity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdererEndpointConnectivityMultiError, or nil if none found.
func (m *OrdererEndpointConnectivity) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdererEndpointConnectivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for IsAlive

	if all {
		switch v := interface{}(m.GetDialDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrdererEndpointConnectivityValidationError{
					field:  "DialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrdererEndpointConnectivityValidationError{
					field:  "DialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrdererEndpointConnectivityValidationError{
				field:  "DialDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DialError

	if len(errors) > 0 {
		return OrdererEndpointConnectivityMultiError(errors)
	}

	return nil
}

// OrdererEndpointConnectivityMultiError is an error wrapping multiple
// validation errors returned by OrdererEndpointConnectivity.ValidateAll() if
// the designated constraints aren't met.
type OrdererEndpointConnectivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdererEndpointConnectivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdererEndpointConnectivityMultiError) AllErrors() []error { return m }

// OrdererEndpointConnectivityValidationError is the validation error returned
// by OrdererEndpointConnectivity.Validate if the designated constraints
// aren't met.
type OrdererEndpointConnectivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdererEndpointConnectivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdererEndpointConnectivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdererEndpointConnectivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdererEndpointConnectivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdererEndpointConnectivityValidationError) ErrorName() string {
	return "OrdererEndpointConnectivityValidationError"
}

// Error satisfies the builtin error interface
func (e OrdererEndpointConnectivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdererEndpointConnectivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdererEndpointConnectivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdererEndpointConnectivityValidationError{}

// Validate checks the field values on OrdererConnectivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrdererConnectivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdererConnectivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrdererConnectivityMultiError, or nil if none found.
func (m *OrdererConnectivity) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdererConnectivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	for idx, item := range m.GetEndpoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrdererConnectivityValidationError{
						field:  fmt.Sprintf("Endpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrdererConnectivityValidationError{
						field:  fmt.Sprintf("Endpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrdererConnectivityValidationError{
					field:  fmt.Sprintf("Endpoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrdererConnectivityMultiError(errors)
	}

	return nil
}

// OrdererConnectivityMultiError is an error wrapping multiple validation
// errors returned by OrdererConnectivity.ValidateAll() if the designated
// constraints aren't met.
type OrdererConnectivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdererConnectivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdererConnectivityMultiError) AllErrors() []error { return m }

// OrdererConnectivityValidationError is the validation error returned by
// OrdererConnectivity.Validate if the designated constraints aren't met.
type OrdererConnectivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdererConnectivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdererConnectivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdererConnectivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdererConnectivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdererConnectivityValidationError) ErrorName() string {
	return "OrdererConnectivityValidationError"
}

// Error satisfies the builtin error interface
func (e OrdererConnectivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdererConnectivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdererConnectivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdererConnectivityValidationError{}
