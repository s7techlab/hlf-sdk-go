// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: channel/channels.proto

package channel

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common "github.com/hyperledger/fabric-protos-go/common"
	msp "github.com/hyperledger/fabric-protos-go/msp"
	orderer "github.com/hyperledger/fabric-protos-go/orderer"
	etcdraft "github.com/hyperledger/fabric-protos-go/orderer/etcdraft"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request with channel name. Will return information about channel that peer joined
type ChannelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of channel we checking
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChannelId) Reset() {
	*x = ChannelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelId) ProtoMessage() {}

func (x *ChannelId) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelId.ProtoReflect.Descriptor instead.
func (*ChannelId) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Channel properties and height
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{1}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Channels - list of orderer channels
type Channels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemChannel string     `protobuf:"bytes,1,opt,name=system_channel,json=systemChannel,proto3" json:"system_channel,omitempty"`
	Channels      []*Channel `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *Channels) Reset() {
	*x = Channels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channels) ProtoMessage() {}

func (x *Channels) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channels.ProtoReflect.Descriptor instead.
func (*Channels) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{2}
}

func (x *Channels) GetSystemChannel() string {
	if x != nil {
		return x.SystemChannel
	}
	return ""
}

func (x *Channels) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

// Channel - describes common channel params. Channel organization in full form
type ChannelOrganizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controls the number of messages batched into block
	BatchSize *orderer.BatchSize `protobuf:"bytes,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// amount of time to wait before creating a batch
	BatchTimeout string `protobuf:"bytes,3,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	// consenter represents a consenting node (i.e. replica).
	EtcdraftNodes []*etcdraft.Consenter `protobuf:"bytes,4,rep,name=etcdraft_nodes,json=etcdraftNodes,proto3" json:"etcdraft_nodes,omitempty"`
	// options to be specified for all the etcd/raft nodes
	EtcdraftOptions *etcdraft.Options `protobuf:"bytes,5,opt,name=etcdraft_options,json=etcdraftOptions,proto3" json:"etcdraft_options,omitempty"`
	// orderers endpoints
	Endpoints []string `protobuf:"bytes,6,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// organizations list of channel
	Organizations []*OrganizationMSPConfig `protobuf:"bytes,7,rep,name=organizations,proto3" json:"organizations,omitempty"`
	// total amunt of blocks
	Height uint64 `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	// channel status
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChannelOrganizationConfig) Reset() {
	*x = ChannelOrganizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelOrganizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelOrganizationConfig) ProtoMessage() {}

func (x *ChannelOrganizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelOrganizationConfig.ProtoReflect.Descriptor instead.
func (*ChannelOrganizationConfig) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelOrganizationConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelOrganizationConfig) GetBatchSize() *orderer.BatchSize {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *ChannelOrganizationConfig) GetBatchTimeout() string {
	if x != nil {
		return x.BatchTimeout
	}
	return ""
}

func (x *ChannelOrganizationConfig) GetEtcdraftNodes() []*etcdraft.Consenter {
	if x != nil {
		return x.EtcdraftNodes
	}
	return nil
}

func (x *ChannelOrganizationConfig) GetEtcdraftOptions() *etcdraft.Options {
	if x != nil {
		return x.EtcdraftOptions
	}
	return nil
}

func (x *ChannelOrganizationConfig) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ChannelOrganizationConfig) GetOrganizations() []*OrganizationMSPConfig {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *ChannelOrganizationConfig) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChannelOrganizationConfig) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// msp identifier
	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// unparsed cert bytes
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	// parsed certificated for frontend (like openssl output)
	CertContent string `protobuf:"bytes,3,opt,name=cert_content,json=certContent,proto3" json:"cert_content,omitempty"`
	// unparsed cert bytes
	CaCert []byte `protobuf:"bytes,4,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// parsed certificated for frontend (like openssl output)
	CaCertContent string `protobuf:"bytes,5,opt,name=ca_cert_content,json=caCertContent,proto3" json:"ca_cert_content,omitempty"`
	// List of intermediate certificates trusted by this MSP
	IntermediateCerts [][]byte `protobuf:"bytes,7,rep,name=intermediate_certs,json=intermediateCerts,proto3" json:"intermediate_certs,omitempty"`
	// provides anchor peers address: 'host:port'
	AnchorPeers []string `protobuf:"bytes,6,rep,name=anchor_peers,json=anchorPeers,proto3" json:"anchor_peers,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{4}
}

func (x *Organization) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *Organization) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *Organization) GetCertContent() string {
	if x != nil {
		return x.CertContent
	}
	return ""
}

func (x *Organization) GetCaCert() []byte {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *Organization) GetCaCertContent() string {
	if x != nil {
		return x.CaCertContent
	}
	return ""
}

func (x *Organization) GetIntermediateCerts() [][]byte {
	if x != nil {
		return x.IntermediateCerts
	}
	return nil
}

func (x *Organization) GetAnchorPeers() []string {
	if x != nil {
		return x.AnchorPeers
	}
	return nil
}

// OrganizationDetailed - full description of organization in the channel
type OrganizationMSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collects all the configuration information for a Fabric MSP
	Msp *msp.FabricMSPConfig `protobuf:"bytes,1,opt,name=msp,proto3" json:"msp,omitempty"`
	// provides information about anchor peer. host, port
	AnchorPeers *peer.AnchorPeers `protobuf:"bytes,2,opt,name=anchor_peers,json=anchorPeers,proto3" json:"anchor_peers,omitempty"`
	// organizations policies for admins, readers, writers
	Policies *ChannelPolicies `protobuf:"bytes,3,opt,name=policies,proto3" json:"policies,omitempty"`
}

func (x *OrganizationMSPConfig) Reset() {
	*x = OrganizationMSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationMSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationMSPConfig) ProtoMessage() {}

func (x *OrganizationMSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationMSPConfig.ProtoReflect.Descriptor instead.
func (*OrganizationMSPConfig) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{5}
}

func (x *OrganizationMSPConfig) GetMsp() *msp.FabricMSPConfig {
	if x != nil {
		return x.Msp
	}
	return nil
}

func (x *OrganizationMSPConfig) GetAnchorPeers() *peer.AnchorPeers {
	if x != nil {
		return x.AnchorPeers
	}
	return nil
}

func (x *OrganizationMSPConfig) GetPolicies() *ChannelPolicies {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Policies - organizations policies for admins, readers, writers
type ChannelPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// admins policy
	Admins *common.Policy `protobuf:"bytes,1,opt,name=admins,proto3" json:"admins,omitempty"`
	// readers policy
	Readers *common.Policy `protobuf:"bytes,2,opt,name=readers,proto3" json:"readers,omitempty"`
	// writers policy
	Writers *common.Policy `protobuf:"bytes,3,opt,name=writers,proto3" json:"writers,omitempty"`
}

func (x *ChannelPolicies) Reset() {
	*x = ChannelPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPolicies) ProtoMessage() {}

func (x *ChannelPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPolicies.ProtoReflect.Descriptor instead.
func (*ChannelPolicies) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{6}
}

func (x *ChannelPolicies) GetAdmins() *common.Policy {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *ChannelPolicies) GetReaders() *common.Policy {
	if x != nil {
		return x.Readers
	}
	return nil
}

func (x *ChannelPolicies) GetWriters() *common.Policy {
	if x != nil {
		return x.Writers
	}
	return nil
}

// Generate channel requests
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// controls the number of messages batched into block
	BatchSize *orderer.BatchSize `protobuf:"bytes,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// amount of time to wait before creating a batch
	BatchTimeout string `protobuf:"bytes,3,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	// consenter represents a consenting node (i.e. replica).
	EtcdraftNodes []*Consenter `protobuf:"bytes,4,rep,name=etcdraft_nodes,json=etcdraftNodes,proto3" json:"etcdraft_nodes,omitempty"`
	// orderers endpoints
	Endpoints []string `protobuf:"bytes,5,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// options to be specified for all the etcd/raft nodes
	EtcdraftOptions *etcdraft.Options `protobuf:"bytes,6,opt,name=etcdraft_options,json=etcdraftOptions,proto3" json:"etcdraft_options,omitempty"`
	// Orderer MSP
	OrdererMsp *MSPConfig `protobuf:"bytes,7,opt,name=orderer_msp,json=ordererMsp,proto3" json:"orderer_msp,omitempty"`
	// Org msps
	Organizations []*OrgMSPConfig `protobuf:"bytes,8,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetBatchSize() *orderer.BatchSize {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *CreateRequest) GetBatchTimeout() string {
	if x != nil {
		return x.BatchTimeout
	}
	return ""
}

func (x *CreateRequest) GetEtcdraftNodes() []*Consenter {
	if x != nil {
		return x.EtcdraftNodes
	}
	return nil
}

func (x *CreateRequest) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *CreateRequest) GetEtcdraftOptions() *etcdraft.Options {
	if x != nil {
		return x.EtcdraftOptions
	}
	return nil
}

func (x *CreateRequest) GetOrdererMsp() *MSPConfig {
	if x != nil {
		return x.OrdererMsp
	}
	return nil
}

func (x *CreateRequest) GetOrganizations() []*OrgMSPConfig {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// Consenter - consenter represents a consenting node (i.e. replica).
type Consenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint      string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ClientTlsCert []byte `protobuf:"bytes,2,opt,name=client_tls_cert,json=clientTlsCert,proto3" json:"client_tls_cert,omitempty"`
	ServerTlsCert []byte `protobuf:"bytes,3,opt,name=server_tls_cert,json=serverTlsCert,proto3" json:"server_tls_cert,omitempty"`
}

func (x *Consenter) Reset() {
	*x = Consenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consenter) ProtoMessage() {}

func (x *Consenter) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consenter.ProtoReflect.Descriptor instead.
func (*Consenter) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{8}
}

func (x *Consenter) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Consenter) GetClientTlsCert() []byte {
	if x != nil {
		return x.ClientTlsCert
	}
	return nil
}

func (x *Consenter) GetServerTlsCert() []byte {
	if x != nil {
		return x.ServerTlsCert
	}
	return nil
}

type OrgMSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MSP *MSPConfig `protobuf:"bytes,1,opt,name=MSP,proto3" json:"MSP,omitempty"`
	// provides anchor peers address: 'host:port'
	AnchorPeers []string `protobuf:"bytes,2,rep,name=anchor_peers,json=anchorPeers,proto3" json:"anchor_peers,omitempty"`
}

func (x *OrgMSPConfig) Reset() {
	*x = OrgMSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgMSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgMSPConfig) ProtoMessage() {}

func (x *OrgMSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgMSPConfig.ProtoReflect.Descriptor instead.
func (*OrgMSPConfig) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{9}
}

func (x *OrgMSPConfig) GetMSP() *MSPConfig {
	if x != nil {
		return x.MSP
	}
	return nil
}

func (x *OrgMSPConfig) GetAnchorPeers() []string {
	if x != nil {
		return x.AnchorPeers
	}
	return nil
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	MspId    string `protobuf:"bytes,2,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{10}
}

func (x *Peer) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Peer) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

// ChannelMSPConfig contains simplified version ob FabricMSPConfig
type MSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// msp name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of root certificates trusted by this MSP
	// they are used upon certificate validation (see
	// comment for IntermediateCerts below)
	RootCerts [][]byte `protobuf:"bytes,2,rep,name=root_certs,json=rootCerts,proto3" json:"root_certs,omitempty"`
	// List of intermediate certificates trusted by this MSP;
	// they are used upon certificate validation as follows:
	// validation attempts to build a path from the certificate
	// to be validated (which is at one end of the path) and
	// one of the certs in the RootCerts field (which is at
	// the other end of the path). If the path is longer than
	// 2, certificates in the middle are searched within the
	// IntermediateCerts pool
	IntermediateCerts [][]byte `protobuf:"bytes,3,rep,name=intermediate_certs,json=intermediateCerts,proto3" json:"intermediate_certs,omitempty"`
	// Identity denoting the administrator of this MSP
	Admins [][]byte `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	// OrganizationalUnitIdentifiers holds one or more
	// fabric organizational unit identifiers that belong to
	// this MSP configuration
	OrganizationalUnitIdentifiers []*msp.FabricOUIdentifier `protobuf:"bytes,5,rep,name=organizational_unit_identifiers,json=organizationalUnitIdentifiers,proto3" json:"organizational_unit_identifiers,omitempty"`
	// List of TLS root certificates trusted by this MSP.
	// They are returned by GetTLSRootCerts.
	TlsRootCerts [][]byte `protobuf:"bytes,6,rep,name=tls_root_certs,json=tlsRootCerts,proto3" json:"tls_root_certs,omitempty"`
	// List of TLS intermediate certificates trusted by this MSP;
	// They are returned by GetTLSIntermediateCerts.
	TlsIntermediateCerts [][]byte `protobuf:"bytes,9,rep,name=tls_intermediate_certs,json=tlsIntermediateCerts,proto3" json:"tls_intermediate_certs,omitempty"`
	// fabric_node_ous contains the configuration to distinguish clients from peers from orderers
	// based on the OUs.
	FabricNodeOus *msp.FabricNodeOUs `protobuf:"bytes,10,opt,name=fabric_node_ous,json=fabricNodeOus,proto3" json:"fabric_node_ous,omitempty"`
}

func (x *MSPConfig) Reset() {
	*x = MSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPConfig) ProtoMessage() {}

func (x *MSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPConfig.ProtoReflect.Descriptor instead.
func (*MSPConfig) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{11}
}

func (x *MSPConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MSPConfig) GetRootCerts() [][]byte {
	if x != nil {
		return x.RootCerts
	}
	return nil
}

func (x *MSPConfig) GetIntermediateCerts() [][]byte {
	if x != nil {
		return x.IntermediateCerts
	}
	return nil
}

func (x *MSPConfig) GetAdmins() [][]byte {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *MSPConfig) GetOrganizationalUnitIdentifiers() []*msp.FabricOUIdentifier {
	if x != nil {
		return x.OrganizationalUnitIdentifiers
	}
	return nil
}

func (x *MSPConfig) GetTlsRootCerts() [][]byte {
	if x != nil {
		return x.TlsRootCerts
	}
	return nil
}

func (x *MSPConfig) GetTlsIntermediateCerts() [][]byte {
	if x != nil {
		return x.TlsIntermediateCerts
	}
	return nil
}

func (x *MSPConfig) GetFabricNodeOus() *msp.FabricNodeOUs {
	if x != nil {
		return x.FabricNodeOus
	}
	return nil
}

// ChannelConfig  - describes common channel params. Channel organization in short form
type ChannelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel name
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// controls the number of messages batched into block
	BatchSize *orderer.BatchSize `protobuf:"bytes,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// amount of time to wait before creating a batch
	BatchTimeout string `protobuf:"bytes,3,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	// consenter represents a consenting node (i.e. replica).
	EtcdraftNodes []*etcdraft.Consenter `protobuf:"bytes,4,rep,name=etcdraft_nodes,json=etcdraftNodes,proto3" json:"etcdraft_nodes,omitempty"`
	// options to be specified for all the etcd/raft nodes
	EtcdraftOptions *etcdraft.Options `protobuf:"bytes,5,opt,name=etcdraft_options,json=etcdraftOptions,proto3" json:"etcdraft_options,omitempty"`
	// orderers endpoints
	Endpoints []string `protobuf:"bytes,6,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// organizations list of channel
	// repeated Organization organizations = 7;
	// total amunt of blocks
	Height uint64 `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	// channel status
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChannelConfig) Reset() {
	*x = ChannelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfig) ProtoMessage() {}

func (x *ChannelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfig.ProtoReflect.Descriptor instead.
func (*ChannelConfig) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelConfig) GetBatchSize() *orderer.BatchSize {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *ChannelConfig) GetBatchTimeout() string {
	if x != nil {
		return x.BatchTimeout
	}
	return ""
}

func (x *ChannelConfig) GetEtcdraftNodes() []*etcdraft.Consenter {
	if x != nil {
		return x.EtcdraftNodes
	}
	return nil
}

func (x *ChannelConfig) GetEtcdraftOptions() *etcdraft.Options {
	if x != nil {
		return x.EtcdraftOptions
	}
	return nil
}

func (x *ChannelConfig) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ChannelConfig) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChannelConfig) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// ChannelConfigDetailed with organizations details
type ChannelConfigMSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel name
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// controls the number of messages batched into block
	BatchSize *orderer.BatchSize `protobuf:"bytes,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	// amount of time to wait before creating a batch
	BatchTimeout string `protobuf:"bytes,3,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	// consenter represents a consenting node (i.e. replica).
	EtcdraftNodes []*etcdraft.Consenter `protobuf:"bytes,4,rep,name=etcdraft_nodes,json=etcdraftNodes,proto3" json:"etcdraft_nodes,omitempty"`
	// options to be specified for all the etcd/raft nodes
	EtcdraftOptions *etcdraft.Options `protobuf:"bytes,5,opt,name=etcdraft_options,json=etcdraftOptions,proto3" json:"etcdraft_options,omitempty"`
	// orderers endpoints
	Endpoints []string `protobuf:"bytes,6,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// organizations list of channel
	Organizations []*OrganizationMSPConfig `protobuf:"bytes,7,rep,name=organizations,proto3" json:"organizations,omitempty"`
	// total amunt of blocks
	Height uint64 `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	// channel status
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChannelConfigMSP) Reset() {
	*x = ChannelConfigMSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channel_channels_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelConfigMSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelConfigMSP) ProtoMessage() {}

func (x *ChannelConfigMSP) ProtoReflect() protoreflect.Message {
	mi := &file_channel_channels_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelConfigMSP.ProtoReflect.Descriptor instead.
func (*ChannelConfigMSP) Descriptor() ([]byte, []int) {
	return file_channel_channels_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelConfigMSP) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelConfigMSP) GetBatchSize() *orderer.BatchSize {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *ChannelConfigMSP) GetBatchTimeout() string {
	if x != nil {
		return x.BatchTimeout
	}
	return ""
}

func (x *ChannelConfigMSP) GetEtcdraftNodes() []*etcdraft.Consenter {
	if x != nil {
		return x.EtcdraftNodes
	}
	return nil
}

func (x *ChannelConfigMSP) GetEtcdraftOptions() *etcdraft.Options {
	if x != nil {
		return x.EtcdraftOptions
	}
	return nil
}

func (x *ChannelConfigMSP) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ChannelConfigMSP) GetOrganizations() []*OrganizationMSPConfig {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *ChannelConfigMSP) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChannelConfigMSP) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_channel_channels_proto protoreflect.FileDescriptor

var file_channel_channels_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x35, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2f, 0x65, 0x74, 0x63, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x6d, 0x73, 0x70, 0x2f, 0x6d, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x24, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6e, 0x0a, 0x08, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x19, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x74,
	0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x0d, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x10, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x74, 0x63, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x65, 0x74,
	0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x06, 0x6d,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x7a, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x63,
	0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x03, 0x6d,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6d, 0x73, 0x70, 0x12, 0x40, 0x0a,
	0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x07, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xf5, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x52,
	0x0a, 0x0e, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x0d, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x65, 0x74,
	0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x4d, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x67, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x01, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x7a, 0x02, 0x10,
	0x01, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x2f, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x7a, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72,
	0x74, 0x22, 0x7a, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3d, 0x0a, 0x03, 0x4d, 0x53, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x4d, 0x53, 0x50,
	0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x39, 0x0a,
	0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x4d, 0x53, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x6c,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6c,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x6c, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x3a, 0x0a, 0x0f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6f, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x55, 0x73, 0x52, 0x0d, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x73, 0x22, 0xbf, 0x02, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0f, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97,
	0x03, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x53, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x65,
	0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x10, 0x65, 0x74, 0x63, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x65, 0x74, 0x63, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x6c, 0x66,
	0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xe0, 0x03, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0b, 0x12, 0x09, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x68, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x68, 0x6c, 0x66,
	0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x1f, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x68, 0x6c, 0x66,
	0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x25, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x53, 0x50, 0x12, 0x21, 0x2e, 0x68, 0x6c,
	0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x28,
	0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x53, 0x50, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x6d, 0x73, 0x70, 0x32, 0x1a, 0x0a, 0x18, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f,
	0x68, 0x6c, 0x66, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_channel_channels_proto_rawDescOnce sync.Once
	file_channel_channels_proto_rawDescData = file_channel_channels_proto_rawDesc
)

func file_channel_channels_proto_rawDescGZIP() []byte {
	file_channel_channels_proto_rawDescOnce.Do(func() {
		file_channel_channels_proto_rawDescData = protoimpl.X.CompressGZIP(file_channel_channels_proto_rawDescData)
	})
	return file_channel_channels_proto_rawDescData
}

var file_channel_channels_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_channel_channels_proto_goTypes = []interface{}{
	(*ChannelId)(nil),                 // 0: hlfsdkgo.proto.channel.ChannelId
	(*Channel)(nil),                   // 1: hlfsdkgo.proto.channel.Channel
	(*Channels)(nil),                  // 2: hlfsdkgo.proto.channel.Channels
	(*ChannelOrganizationConfig)(nil), // 3: hlfsdkgo.proto.channel.ChannelOrganizationConfig
	(*Organization)(nil),              // 4: hlfsdkgo.proto.channel.Organization
	(*OrganizationMSPConfig)(nil),     // 5: hlfsdkgo.proto.channel.OrganizationMSPConfig
	(*ChannelPolicies)(nil),           // 6: hlfsdkgo.proto.channel.ChannelPolicies
	(*CreateRequest)(nil),             // 7: hlfsdkgo.proto.channel.CreateRequest
	(*Consenter)(nil),                 // 8: hlfsdkgo.proto.channel.Consenter
	(*OrgMSPConfig)(nil),              // 9: hlfsdkgo.proto.channel.OrgMSPConfig
	(*Peer)(nil),                      // 10: hlfsdkgo.proto.channel.Peer
	(*MSPConfig)(nil),                 // 11: hlfsdkgo.proto.channel.MSPConfig
	(*ChannelConfig)(nil),             // 12: hlfsdkgo.proto.channel.ChannelConfig
	(*ChannelConfigMSP)(nil),          // 13: hlfsdkgo.proto.channel.ChannelConfigMSP
	(*orderer.BatchSize)(nil),         // 14: orderer.BatchSize
	(*etcdraft.Consenter)(nil),        // 15: etcdraft.Consenter
	(*etcdraft.Options)(nil),          // 16: etcdraft.Options
	(*msp.FabricMSPConfig)(nil),       // 17: msp.FabricMSPConfig
	(*peer.AnchorPeers)(nil),          // 18: protos.AnchorPeers
	(*common.Policy)(nil),             // 19: common.Policy
	(*msp.FabricOUIdentifier)(nil),    // 20: msp.FabricOUIdentifier
	(*msp.FabricNodeOUs)(nil),         // 21: msp.FabricNodeOUs
	(*emptypb.Empty)(nil),             // 22: google.protobuf.Empty
}
var file_channel_channels_proto_depIdxs = []int32{
	1,  // 0: hlfsdkgo.proto.channel.Channels.channels:type_name -> hlfsdkgo.proto.channel.Channel
	14, // 1: hlfsdkgo.proto.channel.ChannelOrganizationConfig.batch_size:type_name -> orderer.BatchSize
	15, // 2: hlfsdkgo.proto.channel.ChannelOrganizationConfig.etcdraft_nodes:type_name -> etcdraft.Consenter
	16, // 3: hlfsdkgo.proto.channel.ChannelOrganizationConfig.etcdraft_options:type_name -> etcdraft.Options
	5,  // 4: hlfsdkgo.proto.channel.ChannelOrganizationConfig.organizations:type_name -> hlfsdkgo.proto.channel.OrganizationMSPConfig
	17, // 5: hlfsdkgo.proto.channel.OrganizationMSPConfig.msp:type_name -> msp.FabricMSPConfig
	18, // 6: hlfsdkgo.proto.channel.OrganizationMSPConfig.anchor_peers:type_name -> protos.AnchorPeers
	6,  // 7: hlfsdkgo.proto.channel.OrganizationMSPConfig.policies:type_name -> hlfsdkgo.proto.channel.ChannelPolicies
	19, // 8: hlfsdkgo.proto.channel.ChannelPolicies.admins:type_name -> common.Policy
	19, // 9: hlfsdkgo.proto.channel.ChannelPolicies.readers:type_name -> common.Policy
	19, // 10: hlfsdkgo.proto.channel.ChannelPolicies.writers:type_name -> common.Policy
	14, // 11: hlfsdkgo.proto.channel.CreateRequest.batch_size:type_name -> orderer.BatchSize
	8,  // 12: hlfsdkgo.proto.channel.CreateRequest.etcdraft_nodes:type_name -> hlfsdkgo.proto.channel.Consenter
	16, // 13: hlfsdkgo.proto.channel.CreateRequest.etcdraft_options:type_name -> etcdraft.Options
	11, // 14: hlfsdkgo.proto.channel.CreateRequest.orderer_msp:type_name -> hlfsdkgo.proto.channel.MSPConfig
	9,  // 15: hlfsdkgo.proto.channel.CreateRequest.organizations:type_name -> hlfsdkgo.proto.channel.OrgMSPConfig
	11, // 16: hlfsdkgo.proto.channel.OrgMSPConfig.MSP:type_name -> hlfsdkgo.proto.channel.MSPConfig
	20, // 17: hlfsdkgo.proto.channel.MSPConfig.organizational_unit_identifiers:type_name -> msp.FabricOUIdentifier
	21, // 18: hlfsdkgo.proto.channel.MSPConfig.fabric_node_ous:type_name -> msp.FabricNodeOUs
	14, // 19: hlfsdkgo.proto.channel.ChannelConfig.batch_size:type_name -> orderer.BatchSize
	15, // 20: hlfsdkgo.proto.channel.ChannelConfig.etcdraft_nodes:type_name -> etcdraft.Consenter
	16, // 21: hlfsdkgo.proto.channel.ChannelConfig.etcdraft_options:type_name -> etcdraft.Options
	14, // 22: hlfsdkgo.proto.channel.ChannelConfigMSP.batch_size:type_name -> orderer.BatchSize
	15, // 23: hlfsdkgo.proto.channel.ChannelConfigMSP.etcdraft_nodes:type_name -> etcdraft.Consenter
	16, // 24: hlfsdkgo.proto.channel.ChannelConfigMSP.etcdraft_options:type_name -> etcdraft.Options
	5,  // 25: hlfsdkgo.proto.channel.ChannelConfigMSP.organizations:type_name -> hlfsdkgo.proto.channel.OrganizationMSPConfig
	22, // 26: hlfsdkgo.proto.channel.ChannelInfoService.ListChannels:input_type -> google.protobuf.Empty
	0,  // 27: hlfsdkgo.proto.channel.ChannelInfoService.GetChannel:input_type -> hlfsdkgo.proto.channel.ChannelId
	0,  // 28: hlfsdkgo.proto.channel.ChannelInfoService.GetChannelConfig:input_type -> hlfsdkgo.proto.channel.ChannelId
	0,  // 29: hlfsdkgo.proto.channel.ChannelInfoService.GetChannelConfigMSP:input_type -> hlfsdkgo.proto.channel.ChannelId
	2,  // 30: hlfsdkgo.proto.channel.ChannelInfoService.ListChannels:output_type -> hlfsdkgo.proto.channel.Channels
	1,  // 31: hlfsdkgo.proto.channel.ChannelInfoService.GetChannel:output_type -> hlfsdkgo.proto.channel.Channel
	12, // 32: hlfsdkgo.proto.channel.ChannelInfoService.GetChannelConfig:output_type -> hlfsdkgo.proto.channel.ChannelConfig
	13, // 33: hlfsdkgo.proto.channel.ChannelInfoService.GetChannelConfigMSP:output_type -> hlfsdkgo.proto.channel.ChannelConfigMSP
	30, // [30:34] is the sub-list for method output_type
	26, // [26:30] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_channel_channels_proto_init() }
func file_channel_channels_proto_init() {
	if File_channel_channels_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_channel_channels_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelOrganizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationMSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgMSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channel_channels_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelConfigMSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channel_channels_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_channel_channels_proto_goTypes,
		DependencyIndexes: file_channel_channels_proto_depIdxs,
		MessageInfos:      file_channel_channels_proto_msgTypes,
	}.Build()
	File_channel_channels_proto = out.File
	file_channel_channels_proto_rawDesc = nil
	file_channel_channels_proto_goTypes = nil
	file_channel_channels_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChannelInfoServiceClient is the client API for ChannelInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelInfoServiceClient interface {
	// ListChannels - returns list of channels
	ListChannels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Channels, error)
	// GetChannel - returns short information about channel
	GetChannel(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*Channel, error)
	// GetChannelConfig  - returns information about channel config
	GetChannelConfig(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*ChannelConfig, error)
	// GetChannelConfigMSP  - returns information about channel config with full msp info
	GetChannelConfigMSP(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*ChannelConfigMSP, error)
}

type channelInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelInfoServiceClient(cc grpc.ClientConnInterface) ChannelInfoServiceClient {
	return &channelInfoServiceClient{cc}
}

func (c *channelInfoServiceClient) ListChannels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Channels, error) {
	out := new(Channels)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.proto.channel.ChannelInfoService/ListChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelInfoServiceClient) GetChannel(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.proto.channel.ChannelInfoService/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelInfoServiceClient) GetChannelConfig(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*ChannelConfig, error) {
	out := new(ChannelConfig)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.proto.channel.ChannelInfoService/GetChannelConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelInfoServiceClient) GetChannelConfigMSP(ctx context.Context, in *ChannelId, opts ...grpc.CallOption) (*ChannelConfigMSP, error) {
	out := new(ChannelConfigMSP)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.proto.channel.ChannelInfoService/GetChannelConfigMSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelInfoServiceServer is the server API for ChannelInfoService service.
type ChannelInfoServiceServer interface {
	// ListChannels - returns list of channels
	ListChannels(context.Context, *emptypb.Empty) (*Channels, error)
	// GetChannel - returns short information about channel
	GetChannel(context.Context, *ChannelId) (*Channel, error)
	// GetChannelConfig  - returns information about channel config
	GetChannelConfig(context.Context, *ChannelId) (*ChannelConfig, error)
	// GetChannelConfigMSP  - returns information about channel config with full msp info
	GetChannelConfigMSP(context.Context, *ChannelId) (*ChannelConfigMSP, error)
}

// UnimplementedChannelInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChannelInfoServiceServer struct {
}

func (*UnimplementedChannelInfoServiceServer) ListChannels(context.Context, *emptypb.Empty) (*Channels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (*UnimplementedChannelInfoServiceServer) GetChannel(context.Context, *ChannelId) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (*UnimplementedChannelInfoServiceServer) GetChannelConfig(context.Context, *ChannelId) (*ChannelConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfig not implemented")
}
func (*UnimplementedChannelInfoServiceServer) GetChannelConfigMSP(context.Context, *ChannelId) (*ChannelConfigMSP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelConfigMSP not implemented")
}

func RegisterChannelInfoServiceServer(s *grpc.Server, srv ChannelInfoServiceServer) {
	s.RegisterService(&_ChannelInfoService_serviceDesc, srv)
}

func _ChannelInfoService_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelInfoServiceServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.proto.channel.ChannelInfoService/ListChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelInfoServiceServer).ListChannels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelInfoService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelInfoServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.proto.channel.ChannelInfoService/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelInfoServiceServer).GetChannel(ctx, req.(*ChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelInfoService_GetChannelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelInfoServiceServer).GetChannelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.proto.channel.ChannelInfoService/GetChannelConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelInfoServiceServer).GetChannelConfig(ctx, req.(*ChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelInfoService_GetChannelConfigMSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelInfoServiceServer).GetChannelConfigMSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.proto.channel.ChannelInfoService/GetChannelConfigMSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelInfoServiceServer).GetChannelConfigMSP(ctx, req.(*ChannelId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdkgo.proto.channel.ChannelInfoService",
	HandlerType: (*ChannelInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChannels",
			Handler:    _ChannelInfoService_ListChannels_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _ChannelInfoService_GetChannel_Handler,
		},
		{
			MethodName: "GetChannelConfig",
			Handler:    _ChannelInfoService_GetChannelConfig_Handler,
		},
		{
			MethodName: "GetChannelConfigMSP",
			Handler:    _ChannelInfoService_GetChannelConfigMSP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/channels.proto",
}

// ChannelManagementServiceClient is the client API for ChannelManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelManagementServiceClient interface {
}

type channelManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelManagementServiceClient(cc grpc.ClientConnInterface) ChannelManagementServiceClient {
	return &channelManagementServiceClient{cc}
}

// ChannelManagementServiceServer is the server API for ChannelManagementService service.
type ChannelManagementServiceServer interface {
}

// UnimplementedChannelManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChannelManagementServiceServer struct {
}

func RegisterChannelManagementServiceServer(s *grpc.Server, srv ChannelManagementServiceServer) {
	s.RegisterService(&_ChannelManagementService_serviceDesc, srv)
}

var _ChannelManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdkgo.proto.channel.ChannelManagementService",
	HandlerType: (*ChannelManagementServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "channel/channels.proto",
}
