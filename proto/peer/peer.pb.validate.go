// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: peer/peer.proto

package peer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetInstantiatedChaincodesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInstantiatedChaincodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstantiatedChaincodesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInstantiatedChaincodesRequestMultiError, or nil if none found.
func (m *GetInstantiatedChaincodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstantiatedChaincodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChannelName()) < 1 {
		err := GetInstantiatedChaincodesRequestValidationError{
			field:  "ChannelName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInstantiatedChaincodesRequestMultiError(errors)
	}

	return nil
}

// GetInstantiatedChaincodesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetInstantiatedChaincodesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInstantiatedChaincodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstantiatedChaincodesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstantiatedChaincodesRequestMultiError) AllErrors() []error { return m }

// GetInstantiatedChaincodesRequestValidationError is the validation error
// returned by GetInstantiatedChaincodesRequest.Validate if the designated
// constraints aren't met.
type GetInstantiatedChaincodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstantiatedChaincodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstantiatedChaincodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstantiatedChaincodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstantiatedChaincodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstantiatedChaincodesRequestValidationError) ErrorName() string {
	return "GetInstantiatedChaincodesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstantiatedChaincodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstantiatedChaincodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstantiatedChaincodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstantiatedChaincodesRequestValidationError{}

// Validate checks the field values on InstallChaincodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallChaincodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallChaincodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallChaincodeRequestMultiError, or nil if none found.
func (m *InstallChaincodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallChaincodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.ChaincodePackage.(type) {
	case *InstallChaincodeRequest_ChaincodePackageId:
		if v == nil {
			err := InstallChaincodeRequestValidationError{
				field:  "ChaincodePackage",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChaincodePackageId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstallChaincodeRequestValidationError{
						field:  "ChaincodePackageId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstallChaincodeRequestValidationError{
						field:  "ChaincodePackageId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChaincodePackageId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstallChaincodeRequestValidationError{
					field:  "ChaincodePackageId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InstallChaincodeRequest_ChaincodePackageSpec:
		if v == nil {
			err := InstallChaincodeRequestValidationError{
				field:  "ChaincodePackage",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChaincodePackageSpec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstallChaincodeRequestValidationError{
						field:  "ChaincodePackageSpec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstallChaincodeRequestValidationError{
						field:  "ChaincodePackageSpec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChaincodePackageSpec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstallChaincodeRequestValidationError{
					field:  "ChaincodePackageSpec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InstallChaincodeRequestMultiError(errors)
	}

	return nil
}

// InstallChaincodeRequestMultiError is an error wrapping multiple validation
// errors returned by InstallChaincodeRequest.ValidateAll() if the designated
// constraints aren't met.
type InstallChaincodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallChaincodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallChaincodeRequestMultiError) AllErrors() []error { return m }

// InstallChaincodeRequestValidationError is the validation error returned by
// InstallChaincodeRequest.Validate if the designated constraints aren't met.
type InstallChaincodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallChaincodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallChaincodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallChaincodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallChaincodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallChaincodeRequestValidationError) ErrorName() string {
	return "InstallChaincodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallChaincodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallChaincodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallChaincodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallChaincodeRequestValidationError{}

// Validate checks the field values on UpChaincodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpChaincodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpChaincodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpChaincodeRequestMultiError, or nil if none found.
func (m *UpChaincodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpChaincodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChannel()) < 1 {
		err := UpChaincodeRequestValidationError{
			field:  "Channel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpChaincodeRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpChaincodeRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpChaincodeRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetPolicy()) < 1 {
		err := UpChaincodeRequestValidationError{
			field:  "Policy",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TransientMap

	switch v := m.ChaincodePackage.(type) {
	case *UpChaincodeRequest_ChaincodePackageId:
		if v == nil {
			err := UpChaincodeRequestValidationError{
				field:  "ChaincodePackage",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChaincodePackageId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpChaincodeRequestValidationError{
						field:  "ChaincodePackageId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpChaincodeRequestValidationError{
						field:  "ChaincodePackageId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChaincodePackageId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpChaincodeRequestValidationError{
					field:  "ChaincodePackageId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpChaincodeRequest_ChaincodePackageSpec:
		if v == nil {
			err := UpChaincodeRequestValidationError{
				field:  "ChaincodePackage",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChaincodePackageSpec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpChaincodeRequestValidationError{
						field:  "ChaincodePackageSpec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpChaincodeRequestValidationError{
						field:  "ChaincodePackageSpec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChaincodePackageSpec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpChaincodeRequestValidationError{
					field:  "ChaincodePackageSpec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpChaincodeRequestMultiError(errors)
	}

	return nil
}

// UpChaincodeRequestMultiError is an error wrapping multiple validation errors
// returned by UpChaincodeRequest.ValidateAll() if the designated constraints
// aren't met.
type UpChaincodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpChaincodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpChaincodeRequestMultiError) AllErrors() []error { return m }

// UpChaincodeRequestValidationError is the validation error returned by
// UpChaincodeRequest.Validate if the designated constraints aren't met.
type UpChaincodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpChaincodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpChaincodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpChaincodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpChaincodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpChaincodeRequestValidationError) ErrorName() string {
	return "UpChaincodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpChaincodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpChaincodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpChaincodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpChaincodeRequestValidationError{}

// Validate checks the field values on UpChaincodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpChaincodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpChaincodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpChaincodeResponseMultiError, or nil if none found.
func (m *UpChaincodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpChaincodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChaincode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpChaincodeResponseValidationError{
					field:  "Chaincode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpChaincodeResponseValidationError{
					field:  "Chaincode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChaincode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpChaincodeResponseValidationError{
				field:  "Chaincode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Committed

	// no validation rules for Approvals

	// no validation rules for CommitErr

	if len(errors) > 0 {
		return UpChaincodeResponseMultiError(errors)
	}

	return nil
}

// UpChaincodeResponseMultiError is an error wrapping multiple validation
// errors returned by UpChaincodeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpChaincodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpChaincodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpChaincodeResponseMultiError) AllErrors() []error { return m }

// UpChaincodeResponseValidationError is the validation error returned by
// UpChaincodeResponse.Validate if the designated constraints aren't met.
type UpChaincodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpChaincodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpChaincodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpChaincodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpChaincodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpChaincodeResponseValidationError) ErrorName() string {
	return "UpChaincodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpChaincodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpChaincodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpChaincodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpChaincodeResponseValidationError{}

// Validate checks the field values on JoinChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinChannelRequestMultiError, or nil if none found.
func (m *JoinChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetChannelId()) < 1 {
		err := JoinChannelRequestValidationError{
			field:  "ChannelId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrdererAddress()) < 1 {
		err := JoinChannelRequestValidationError{
			field:  "OrdererAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JoinChannelRequestMultiError(errors)
	}

	return nil
}

// JoinChannelRequestMultiError is an error wrapping multiple validation errors
// returned by JoinChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinChannelRequestMultiError) AllErrors() []error { return m }

// JoinChannelRequestValidationError is the validation error returned by
// JoinChannelRequest.Validate if the designated constraints aren't met.
type JoinChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinChannelRequestValidationError) ErrorName() string {
	return "JoinChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinChannelRequestValidationError{}

// Validate checks the field values on Chaincode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chaincode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chaincode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChaincodeMultiError, or nil
// if none found.
func (m *Chaincode) ValidateAll() error {
	return m.validate(true)
}

func (m *Chaincode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for PackageId

	// no validation rules for LifecycleVersion

	if len(errors) > 0 {
		return ChaincodeMultiError(errors)
	}

	return nil
}

// ChaincodeMultiError is an error wrapping multiple validation errors returned
// by Chaincode.ValidateAll() if the designated constraints aren't met.
type ChaincodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodeMultiError) AllErrors() []error { return m }

// ChaincodeValidationError is the validation error returned by
// Chaincode.Validate if the designated constraints aren't met.
type ChaincodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodeValidationError) ErrorName() string { return "ChaincodeValidationError" }

// Error satisfies the builtin error interface
func (e ChaincodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodeValidationError{}

// Validate checks the field values on Chaincodes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chaincodes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chaincodes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChaincodesMultiError, or
// nil if none found.
func (m *Chaincodes) ValidateAll() error {
	return m.validate(true)
}

func (m *Chaincodes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChaincodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChaincodesValidationError{
						field:  fmt.Sprintf("Chaincodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChaincodesValidationError{
						field:  fmt.Sprintf("Chaincodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChaincodesValidationError{
					field:  fmt.Sprintf("Chaincodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChaincodesMultiError(errors)
	}

	return nil
}

// ChaincodesMultiError is an error wrapping multiple validation errors
// returned by Chaincodes.ValidateAll() if the designated constraints aren't met.
type ChaincodesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodesMultiError) AllErrors() []error { return m }

// ChaincodesValidationError is the validation error returned by
// Chaincodes.Validate if the designated constraints aren't met.
type ChaincodesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodesValidationError) ErrorName() string { return "ChaincodesValidationError" }

// Error satisfies the builtin error interface
func (e ChaincodesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincodes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodesValidationError{}

// Validate checks the field values on GetPeerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPeerInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPeerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPeerInfoResponseMultiError, or nil if none found.
func (m *GetPeerInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPeerInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for CertPem

	// no validation rules for CertContent

	// no validation rules for Address

	// no validation rules for PeerVersion

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPeerInfoResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPeerInfoResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPeerInfoResponseValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetChaincodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPeerInfoResponseValidationError{
						field:  fmt.Sprintf("Chaincodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPeerInfoResponseValidationError{
						field:  fmt.Sprintf("Chaincodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPeerInfoResponseValidationError{
					field:  fmt.Sprintf("Chaincodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPeerInfoResponseMultiError(errors)
	}

	return nil
}

// GetPeerInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetPeerInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPeerInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPeerInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPeerInfoResponseMultiError) AllErrors() []error { return m }

// GetPeerInfoResponseValidationError is the validation error returned by
// GetPeerInfoResponse.Validate if the designated constraints aren't met.
type GetPeerInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPeerInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPeerInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPeerInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPeerInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPeerInfoResponseValidationError) ErrorName() string {
	return "GetPeerInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPeerInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPeerInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPeerInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPeerInfoResponseValidationError{}
