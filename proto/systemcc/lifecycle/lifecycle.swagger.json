{
  "swagger": "2.0",
  "info": {
    "title": "systemcc/lifecycle/lifecycle.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/systemcc/lifecycle/chaincode/commits": {
      "post": {
        "summary": "QueryChaincodeDefinitions returns chaincode definitions committed on the channel",
        "operationId": "LifecycleService_QueryChaincodeDefinitions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleQueryChaincodeDefinitionsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lifecycleccQueryChaincodeDefinitionsRequest"
            }
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    },
    "/systemcc/lifecycle/chaincodes": {
      "get": {
        "summary": "QueryInstalledChaincodes returns chaincode packages list installed on peer",
        "operationId": "LifecycleService_QueryInstalledChaincodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleQueryInstalledChaincodesResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "LifecycleService"
        ]
      },
      "post": {
        "summary": "InstallChaincode sets up chaincode package on peer",
        "operationId": "LifecycleService_InstallChaincode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleInstallChaincodeResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lifecycleInstallChaincodeArgs"
            }
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    },
    "/systemcc/lifecycle/chaincodes/approve": {
      "post": {
        "summary": "ApproveChaincodeDefinitionForMyOrg marks chaincode definition on a channel",
        "operationId": "LifecycleService_ApproveChaincodeDefinitionForMyOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lifecycleccApproveChaincodeDefinitionForMyOrgRequest"
            }
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    },
    "/systemcc/lifecycle/chaincodes/approved": {
      "post": {
        "summary": "QueryApprovedChaincodeDefinition returns approved chaincode definition",
        "operationId": "LifecycleService_QueryApprovedChaincodeDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleQueryApprovedChaincodeDefinitionResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lifecycleccQueryApprovedChaincodeDefinitionRequest"
            }
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    },
    "/systemcc/lifecycle/chaincodes/commit": {
      "post": {
        "summary": "CommitChaincodeDefinition the chaincode definition on the channel",
        "operationId": "LifecycleService_CommitChaincodeDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleCommitChaincodeDefinitionResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lifecycleccCommitChaincodeDefinitionRequest"
            }
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    },
    "/systemcc/lifecycle/chaincodes/commit-check": {
      "post": {
        "summary": "QueryChaincodeDefinition returns chaincode definition committed on the channel",
        "operationId": "LifecycleService_QueryChaincodeDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleQueryChaincodeDefinitionResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lifecycleccQueryChaincodeDefinitionRequest"
            }
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    },
    "/systemcc/lifecycle/chaincodes/{package_id}": {
      "get": {
        "summary": "QueryInstalledChaincode returns chaincode package installed on peer",
        "operationId": "LifecycleService_QueryInstalledChaincode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleQueryInstalledChaincodeResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "package_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    },
    "/systemcc/lifecycle/commit-readiness": {
      "post": {
        "summary": "CheckCommitReadiness returns commitments statuses of participants on chaincode definition",
        "operationId": "LifecycleService_CheckCommitReadiness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lifecycleCheckCommitReadinessResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lifecycleccCheckCommitReadinessRequest"
            }
          }
        ],
        "tags": [
          "LifecycleService"
        ]
      }
    }
  },
  "definitions": {
    "ChaincodeSourceLocal": {
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string"
        }
      }
    },
    "ChaincodeSourceUnavailable": {
      "type": "object"
    },
    "MSPPrincipalClassification": {
      "type": "string",
      "enum": [
        "ROLE",
        "ORGANIZATION_UNIT",
        "IDENTITY",
        "ANONYMITY",
        "COMBINED"
      ],
      "default": "ROLE",
      "description": " - ORGANIZATION_UNIT: one of a member of MSP network, and the one of an\nadministrator of an MSP network\n - IDENTITY: groupping of entities, per MSP affiliation\nE.g., this can well be represented by an MSP's\nOrganization unit\n - ANONYMITY: identity\n - COMBINED: an identity to be anonymous or nominal."
    },
    "QueryChaincodeDefinitionsResultChaincodeDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sequence": {
          "type": "string",
          "format": "int64"
        },
        "version": {
          "type": "string"
        },
        "endorsement_plugin": {
          "type": "string"
        },
        "validation_plugin": {
          "type": "string"
        },
        "validation_parameter": {
          "type": "string",
          "format": "byte"
        },
        "collections": {
          "$ref": "#/definitions/protosCollectionConfigPackage"
        },
        "init_required": {
          "type": "boolean"
        }
      }
    },
    "QueryInstalledChaincodesResultInstalledChaincode": {
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "references": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lifecycleQueryInstalledChaincodesResultReferences"
          }
        }
      }
    },
    "SignaturePolicyNOutOf": {
      "type": "object",
      "properties": {
        "n": {
          "type": "integer",
          "format": "int32"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonSignaturePolicy"
          }
        }
      }
    },
    "commonMSPPrincipal": {
      "type": "object",
      "properties": {
        "principal_classification": {
          "$ref": "#/definitions/MSPPrincipalClassification",
          "description": "Classification describes the way that one should process\nPrincipal. An Classification value of \"ByOrganizationUnit\" reflects\nthat \"Principal\" contains the name of an organization this MSP\nhandles. A Classification value \"ByIdentity\" means that\n\"Principal\" contains a specific identity. Default value\ndenotes that Principal contains one of the groups by\ndefault supported by all MSPs (\"admin\" or \"member\")."
        },
        "principal": {
          "type": "string",
          "format": "byte",
          "description": "Principal completes the policy principal definition. For the default\nprincipal types, Principal can be either \"Admin\" or \"Member\".\nFor the ByOrganizationUnit/ByIdentity values of Classification,\nPolicyPrincipal acquires its value from an organization unit or\nidentity, respectively.\nFor the Combined Classification type, the Principal is a marshalled\nCombinedPrincipal."
        }
      },
      "title": "MSPPrincipal aims to represent an MSP-centric set of identities.\nIn particular, this structure allows for definition of\n - a group of identities that are member of the same MSP\n - a group of identities that are member of the same organization unit\n   in the same MSP\n - a group of identities that are administering a specific MSP\n - a specific identity\nExpressing these groups is done given two fields of the fields below\n - Classification, that defines the type of classification of identities\n   in an MSP this principal would be defined on; Classification can take\n   three values:\n    (i)  ByMSPRole: that represents a classification of identities within\n         MSP based on one of the two pre-defined MSP rules, \"member\" and \"admin\"\n    (ii) ByOrganizationUnit: that represents a classification of identities\n         within MSP based on the organization unit an identity belongs to\n    (iii)ByIdentity that denotes that MSPPrincipal is mapped to a single\n         identity/certificate; this would mean that the Principal bytes\n         message"
    },
    "commonSignaturePolicy": {
      "type": "object",
      "properties": {
        "signed_by": {
          "type": "integer",
          "format": "int32"
        },
        "n_out_of": {
          "$ref": "#/definitions/SignaturePolicyNOutOf"
        }
      },
      "title": "SignaturePolicy is a recursive message structure which defines a featherweight DSL for describing\npolicies which are more complicated than 'exactly this signature'.  The NOutOf operator is sufficent\nto express AND as well as OR, as well as of course N out of the following M policies\nSignedBy implies that the signature is from a valid certificate which is signed by the trusted\nauthority specified in the bytes.  This will be the certificate itself for a self-signed certificate\nand will be the CA for more traditional certificates"
    },
    "commonSignaturePolicyEnvelope": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "rule": {
          "$ref": "#/definitions/commonSignaturePolicy"
        },
        "identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonMSPPrincipal"
          }
        }
      },
      "title": "SignaturePolicyEnvelope wraps a SignaturePolicy and includes a version for future enhancements"
    },
    "lifecycleApproveChaincodeDefinitionForMyOrgArgs": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "endorsement_plugin": {
          "type": "string"
        },
        "validation_plugin": {
          "type": "string"
        },
        "validation_parameter": {
          "type": "string",
          "format": "byte"
        },
        "collections": {
          "$ref": "#/definitions/protosCollectionConfigPackage"
        },
        "init_required": {
          "type": "boolean"
        },
        "source": {
          "$ref": "#/definitions/lifecycleChaincodeSource"
        }
      },
      "description": "ApproveChaincodeDefinitionForMyOrgArgs is the message used as arguments to\n`_lifecycle.ApproveChaincodeDefinitionForMyOrg`."
    },
    "lifecycleChaincodeSource": {
      "type": "object",
      "properties": {
        "unavailable": {
          "$ref": "#/definitions/ChaincodeSourceUnavailable"
        },
        "local_package": {
          "$ref": "#/definitions/ChaincodeSourceLocal"
        }
      }
    },
    "lifecycleCheckCommitReadinessArgs": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "endorsement_plugin": {
          "type": "string"
        },
        "validation_plugin": {
          "type": "string"
        },
        "validation_parameter": {
          "type": "string",
          "format": "byte"
        },
        "collections": {
          "$ref": "#/definitions/protosCollectionConfigPackage"
        },
        "init_required": {
          "type": "boolean"
        }
      },
      "description": "CheckCommitReadinessArgs is the message used as arguments to\n`_lifecycle.CheckCommitReadiness`."
    },
    "lifecycleCheckCommitReadinessResult": {
      "type": "object",
      "properties": {
        "approvals": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      },
      "description": "CheckCommitReadinessResult is the message returned by\n`_lifecycle.CheckCommitReadiness`. It returns a map of\norgs to their approval (true/false) for the definition \nsupplied as args."
    },
    "lifecycleCommitChaincodeDefinitionArgs": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "endorsement_plugin": {
          "type": "string"
        },
        "validation_plugin": {
          "type": "string"
        },
        "validation_parameter": {
          "type": "string",
          "format": "byte"
        },
        "collections": {
          "$ref": "#/definitions/protosCollectionConfigPackage"
        },
        "init_required": {
          "type": "boolean"
        }
      },
      "description": "CommitChaincodeDefinitionArgs is the message used as arguments to\n`_lifecycle.CommitChaincodeDefinition`."
    },
    "lifecycleCommitChaincodeDefinitionResult": {
      "type": "object",
      "description": "CommitChaincodeDefinitionResult is the message returned by\n`_lifecycle.CommitChaincodeDefinition`. Currently it returns\nnothing, but may be extended in the future."
    },
    "lifecycleInstallChaincodeArgs": {
      "type": "object",
      "properties": {
        "chaincode_install_package": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "InstallChaincodeArgs is the message used as the argument to\n'_lifecycle.InstallChaincode'."
    },
    "lifecycleInstallChaincodeResult": {
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "description": "InstallChaincodeArgs is the message returned by\n'_lifecycle.InstallChaincode'."
    },
    "lifecycleQueryApprovedChaincodeDefinitionArgs": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sequence": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "QueryApprovedChaincodeDefinitionArgs is the message used as arguments to\n`_lifecycle.QueryApprovedChaincodeDefinition`."
    },
    "lifecycleQueryApprovedChaincodeDefinitionResult": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "int64"
        },
        "version": {
          "type": "string"
        },
        "endorsement_plugin": {
          "type": "string"
        },
        "validation_plugin": {
          "type": "string"
        },
        "validation_parameter": {
          "type": "string",
          "format": "byte"
        },
        "collections": {
          "$ref": "#/definitions/protosCollectionConfigPackage"
        },
        "init_required": {
          "type": "boolean"
        },
        "source": {
          "$ref": "#/definitions/lifecycleChaincodeSource"
        }
      },
      "description": "QueryApprovedChaincodeDefinitionResult is the message returned by\n`_lifecycle.QueryApprovedChaincodeDefinition`."
    },
    "lifecycleQueryChaincodeDefinitionArgs": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "description": "QueryChaincodeDefinitionArgs is the message used as arguments to\n`_lifecycle.QueryChaincodeDefinition`."
    },
    "lifecycleQueryChaincodeDefinitionResult": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "int64"
        },
        "version": {
          "type": "string"
        },
        "endorsement_plugin": {
          "type": "string"
        },
        "validation_plugin": {
          "type": "string"
        },
        "validation_parameter": {
          "type": "string",
          "format": "byte"
        },
        "collections": {
          "$ref": "#/definitions/protosCollectionConfigPackage"
        },
        "init_required": {
          "type": "boolean"
        },
        "approvals": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      },
      "description": "QueryChaincodeDefinitionResult is the message returned by\n`_lifecycle.QueryChaincodeDefinition`."
    },
    "lifecycleQueryChaincodeDefinitionsArgs": {
      "type": "object",
      "description": "QueryChaincodeDefinitionsArgs is the message used as arguments to\n`_lifecycle.QueryChaincodeDefinitions`."
    },
    "lifecycleQueryChaincodeDefinitionsResult": {
      "type": "object",
      "properties": {
        "chaincode_definitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryChaincodeDefinitionsResultChaincodeDefinition"
          }
        }
      },
      "description": "QueryChaincodeDefinitionsResult is the message returned by\n`_lifecycle.QueryChaincodeDefinitions`."
    },
    "lifecycleQueryInstalledChaincodeResult": {
      "type": "object",
      "properties": {
        "package_id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "references": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lifecycleQueryInstalledChaincodeResultReferences"
          }
        }
      },
      "title": "QueryInstalledChaincodeResult is the message returned by\n'_lifecycle.QueryInstalledChaincode'"
    },
    "lifecycleQueryInstalledChaincodeResultChaincode": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "lifecycleQueryInstalledChaincodeResultReferences": {
      "type": "object",
      "properties": {
        "chaincodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lifecycleQueryInstalledChaincodeResultChaincode"
          }
        }
      }
    },
    "lifecycleQueryInstalledChaincodesResult": {
      "type": "object",
      "properties": {
        "installed_chaincodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryInstalledChaincodesResultInstalledChaincode"
          }
        }
      },
      "description": "QueryInstalledChaincodesResult is the message returned by\n'_lifecycle.QueryInstalledChaincodes'.  It returns a list of installed\nchaincodes, including a map of channel name to chaincode name and version\npairs of chaincode definitions that reference this chaincode package."
    },
    "lifecycleQueryInstalledChaincodesResultChaincode": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "lifecycleQueryInstalledChaincodesResultReferences": {
      "type": "object",
      "properties": {
        "chaincodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lifecycleQueryInstalledChaincodesResultChaincode"
          }
        }
      }
    },
    "lifecycleccApproveChaincodeDefinitionForMyOrgRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "args": {
          "$ref": "#/definitions/lifecycleApproveChaincodeDefinitionForMyOrgArgs"
        }
      }
    },
    "lifecycleccCheckCommitReadinessRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "args": {
          "$ref": "#/definitions/lifecycleCheckCommitReadinessArgs"
        }
      }
    },
    "lifecycleccCommitChaincodeDefinitionRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "args": {
          "$ref": "#/definitions/lifecycleCommitChaincodeDefinitionArgs"
        }
      }
    },
    "lifecycleccQueryApprovedChaincodeDefinitionRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "args": {
          "$ref": "#/definitions/lifecycleQueryApprovedChaincodeDefinitionArgs"
        }
      }
    },
    "lifecycleccQueryChaincodeDefinitionRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "args": {
          "$ref": "#/definitions/lifecycleQueryChaincodeDefinitionArgs"
        }
      }
    },
    "lifecycleccQueryChaincodeDefinitionsRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "args": {
          "$ref": "#/definitions/lifecycleQueryChaincodeDefinitionsArgs"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protosApplicationPolicy": {
      "type": "object",
      "properties": {
        "signature_policy": {
          "$ref": "#/definitions/commonSignaturePolicyEnvelope",
          "title": "SignaturePolicy type is used if the policy is specified as\na combination (using threshold gates) of signatures from MSP\nprincipals"
        },
        "channel_config_policy_reference": {
          "type": "string",
          "title": "ChannelConfigPolicyReference is used when the policy is\nspecified as a string that references a policy defined in\nthe configuration of the channel"
        }
      },
      "description": "ApplicationPolicy captures the diffenrent policy types that\nare set and evaluted at the application level."
    },
    "protosCollectionConfig": {
      "type": "object",
      "properties": {
        "static_collection_config": {
          "$ref": "#/definitions/protosStaticCollectionConfig"
        }
      },
      "description": "CollectionConfig defines the configuration of a collection object;\nit currently contains a single, static type.\nDynamic collections are deferred."
    },
    "protosCollectionConfigPackage": {
      "type": "object",
      "properties": {
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protosCollectionConfig"
          }
        }
      },
      "title": "CollectionConfigPackage represents an array of CollectionConfig\nmessages; the extra struct is required because repeated oneof is\nforbidden by the protobuf syntax"
    },
    "protosCollectionPolicyConfig": {
      "type": "object",
      "properties": {
        "signature_policy": {
          "$ref": "#/definitions/commonSignaturePolicyEnvelope",
          "description": "Initially, only a signature policy is supported."
        }
      },
      "description": "Collection policy configuration. Initially, the configuration can only\ncontain a SignaturePolicy. In the future, the SignaturePolicy may be a\nmore general Policy. Instead of containing the actual policy, the\nconfiguration may in the future contain a string reference to a policy."
    },
    "protosStaticCollectionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "the name of the collection inside the denoted chaincode"
        },
        "member_orgs_policy": {
          "$ref": "#/definitions/protosCollectionPolicyConfig",
          "title": "a reference to a policy residing / managed in the config block\nto define which orgs have access to this collection’s private data"
        },
        "required_peer_count": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of peers private data will be sent to upon\nendorsement. The endorsement would fail if dissemination to at least\nthis number of peers is not achieved."
        },
        "maximum_peer_count": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of peers that private data will be sent to\nupon endorsement. This number has to be bigger than required_peer_count."
        },
        "block_to_live": {
          "type": "string",
          "format": "uint64",
          "title": "The number of blocks after which the collection data expires.\nFor instance if the value is set to 10, a key last modified by block number 100\nwill be purged at block number 111. A zero value is treated same as MaxUint64"
        },
        "member_only_read": {
          "type": "boolean",
          "title": "The member only read access denotes whether only collection member clients\ncan read the private data (if set to true), or even non members can\nread the data (if set to false, for example if you want to implement more granular\naccess logic in the chaincode)"
        },
        "member_only_write": {
          "type": "boolean",
          "title": "The member only write access denotes whether only collection member clients\ncan write the private data (if set to true), or even non members can\nwrite the data (if set to false, for example if you want to implement more granular\naccess logic in the chaincode)"
        },
        "endorsement_policy": {
          "$ref": "#/definitions/protosApplicationPolicy",
          "title": "a reference to a policy residing / managed in the config block\nto define the endorsement policy for this collection"
        }
      },
      "description": "StaticCollectionConfig constitutes the configuration parameters of a\nstatic collection object. Static collections are collections that are\nknown at chaincode instantiation time, and that cannot be changed.\nDynamic collections are deferred."
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
