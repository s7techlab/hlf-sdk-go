// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chan_config.proto

package block

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChannelConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelConfigMultiError, or
// nil if none found.
func (m *ChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetApplications()))
		i := 0
		for key := range m.GetApplications() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetApplications()[key]
			_ = val

			// no validation rules for Applications[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ChannelConfigValidationError{
							field:  fmt.Sprintf("Applications[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ChannelConfigValidationError{
							field:  fmt.Sprintf("Applications[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ChannelConfigValidationError{
						field:  fmt.Sprintf("Applications[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetOrderers()))
		i := 0
		for key := range m.GetOrderers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetOrderers()[key]
			_ = val

			// no validation rules for Orderers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ChannelConfigValidationError{
							field:  fmt.Sprintf("Orderers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ChannelConfigValidationError{
							field:  fmt.Sprintf("Orderers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ChannelConfigValidationError{
						field:  fmt.Sprintf("Orderers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetOrdererBatchSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "OrdererBatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "OrdererBatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrdererBatchSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "OrdererBatchSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrdererBatchTimeout

	if all {
		switch v := interface{}(m.GetOrdererConsensusType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "OrdererConsensusType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "OrdererConsensusType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrdererConsensusType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "OrdererConsensusType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Consortium

	// no validation rules for HashingAlgorithm

	if all {
		switch v := interface{}(m.GetBlockDataHashingStructure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "BlockDataHashingStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "BlockDataHashingStructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlockDataHashingStructure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "BlockDataHashingStructure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCapabilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapabilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "Capabilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetPolicy()))
		i := 0
		for key := range m.GetPolicy() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPolicy()[key]
			_ = val

			// no validation rules for Policy[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ChannelConfigValidationError{
							field:  fmt.Sprintf("Policy[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ChannelConfigValidationError{
							field:  fmt.Sprintf("Policy[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ChannelConfigValidationError{
						field:  fmt.Sprintf("Policy[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfigMultiError is an error wrapping multiple validation errors
// returned by ChannelConfig.ValidateAll() if the designated constraints
// aren't met.
type ChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfigValidationError is the validation error returned by
// ChannelConfig.Validate if the designated constraints aren't met.
type ChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfigValidationError) ErrorName() string { return "ChannelConfigValidationError" }

// Error satisfies the builtin error interface
func (e ChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfigValidationError{}

// Validate checks the field values on MSP with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *MSP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSP with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MSPMultiError, or nil if none found.
func (m *MSP) ValidateAll() error {
	return m.validate(true)
}

func (m *MSP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MSPValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MSPValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MSPValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetPolicy()))
		i := 0
		for key := range m.GetPolicy() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPolicy()[key]
			_ = val

			// no validation rules for Policy[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MSPValidationError{
							field:  fmt.Sprintf("Policy[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MSPValidationError{
							field:  fmt.Sprintf("Policy[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MSPValidationError{
						field:  fmt.Sprintf("Policy[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return MSPMultiError(errors)
	}

	return nil
}

// MSPMultiError is an error wrapping multiple validation errors returned by
// MSP.ValidateAll() if the designated constraints aren't met.
type MSPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSPMultiError) AllErrors() []error { return m }

// MSPValidationError is the validation error returned by MSP.Validate if the
// designated constraints aren't met.
type MSPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSPValidationError) ErrorName() string { return "MSPValidationError" }

// Error satisfies the builtin error interface
func (e MSPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSPValidationError{}

// Validate checks the field values on ApplicationConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplicationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationConfigMultiError, or nil if none found.
func (m *ApplicationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetMsp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationConfigValidationError{
					field:  "Msp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationConfigValidationError{
					field:  "Msp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationConfigValidationError{
				field:  "Msp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnchorPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplicationConfigValidationError{
						field:  fmt.Sprintf("AnchorPeers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplicationConfigValidationError{
						field:  fmt.Sprintf("AnchorPeers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplicationConfigValidationError{
					field:  fmt.Sprintf("AnchorPeers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationConfigMultiError(errors)
	}

	return nil
}

// ApplicationConfigMultiError is an error wrapping multiple validation errors
// returned by ApplicationConfig.ValidateAll() if the designated constraints
// aren't met.
type ApplicationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationConfigMultiError) AllErrors() []error { return m }

// ApplicationConfigValidationError is the validation error returned by
// ApplicationConfig.Validate if the designated constraints aren't met.
type ApplicationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationConfigValidationError) ErrorName() string {
	return "ApplicationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationConfigValidationError{}

// Validate checks the field values on OrdererConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrdererConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdererConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrdererConfigMultiError, or
// nil if none found.
func (m *OrdererConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdererConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetMsp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrdererConfigValidationError{
					field:  "Msp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrdererConfigValidationError{
					field:  "Msp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrdererConfigValidationError{
				field:  "Msp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrdererConfigMultiError(errors)
	}

	return nil
}

// OrdererConfigMultiError is an error wrapping multiple validation errors
// returned by OrdererConfig.ValidateAll() if the designated constraints
// aren't met.
type OrdererConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdererConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdererConfigMultiError) AllErrors() []error { return m }

// OrdererConfigValidationError is the validation error returned by
// OrdererConfig.Validate if the designated constraints aren't met.
type OrdererConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdererConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdererConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdererConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdererConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdererConfigValidationError) ErrorName() string { return "OrdererConfigValidationError" }

// Error satisfies the builtin error interface
func (e OrdererConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdererConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdererConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdererConfigValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Policy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolicyMultiError, or nil if none found.
func (m *Policy) ValidateAll() error {
	return m.validate(true)
}

func (m *Policy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Policy.(type) {
	case *Policy_Implicit:
		if v == nil {
			err := PolicyValidationError{
				field:  "Policy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImplicit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Implicit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "Implicit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImplicit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  "Implicit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Policy_SignaturePolicy:
		if v == nil {
			err := PolicyValidationError{
				field:  "Policy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSignaturePolicy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "SignaturePolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyValidationError{
						field:  "SignaturePolicy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSignaturePolicy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					field:  "SignaturePolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PolicyMultiError(errors)
	}

	return nil
}

// PolicyMultiError is an error wrapping multiple validation errors returned by
// Policy.ValidateAll() if the designated constraints aren't met.
type PolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyMultiError) AllErrors() []error { return m }

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyValidationError) ErrorName() string { return "PolicyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyValidationError{}

// Validate checks the field values on Certificate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Certificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Certificate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CertificateMultiError, or
// nil if none found.
func (m *Certificate) ValidateAll() error {
	return m.validate(true)
}

func (m *Certificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fingerprint

	// no validation rules for Data

	// no validation rules for Type

	// no validation rules for MspId

	// no validation rules for MspName

	if len(errors) > 0 {
		return CertificateMultiError(errors)
	}

	return nil
}

// CertificateMultiError is an error wrapping multiple validation errors
// returned by Certificate.ValidateAll() if the designated constraints aren't met.
type CertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateMultiError) AllErrors() []error { return m }

// CertificateValidationError is the validation error returned by
// Certificate.Validate if the designated constraints aren't met.
type CertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateValidationError) ErrorName() string { return "CertificateValidationError" }

// Error satisfies the builtin error interface
func (e CertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateValidationError{}
