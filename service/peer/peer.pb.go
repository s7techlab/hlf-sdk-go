// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: peer/peer.proto

package peer

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	ccpackage "github.com/s7techlab/hlf-sdk-go/service/ccpackage"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LifecycleVersion int32

const (
	LifecycleVersion_LIFECYCLE_V1 LifecycleVersion = 0
	LifecycleVersion_LIFECYCLE_V2 LifecycleVersion = 1
)

// Enum value maps for LifecycleVersion.
var (
	LifecycleVersion_name = map[int32]string{
		0: "LIFECYCLE_V1",
		1: "LIFECYCLE_V2",
	}
	LifecycleVersion_value = map[string]int32{
		"LIFECYCLE_V1": 0,
		"LIFECYCLE_V2": 1,
	}
)

func (x LifecycleVersion) Enum() *LifecycleVersion {
	p := new(LifecycleVersion)
	*p = x
	return p
}

func (x LifecycleVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LifecycleVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_peer_proto_enumTypes[0].Descriptor()
}

func (LifecycleVersion) Type() protoreflect.EnumType {
	return &file_peer_peer_proto_enumTypes[0]
}

func (x LifecycleVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LifecycleVersion.Descriptor instead.
func (LifecycleVersion) EnumDescriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{0}
}

type GetInstantiatedChaincodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of channel we checking
	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
}

func (x *GetInstantiatedChaincodesRequest) Reset() {
	*x = GetInstantiatedChaincodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstantiatedChaincodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstantiatedChaincodesRequest) ProtoMessage() {}

func (x *GetInstantiatedChaincodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstantiatedChaincodesRequest.ProtoReflect.Descriptor instead.
func (*GetInstantiatedChaincodesRequest) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{0}
}

func (x *GetInstantiatedChaincodesRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type InstallChaincodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ChaincodePackage:
	//
	//	*InstallChaincodeRequest_ChaincodePackageId
	//	*InstallChaincodeRequest_ChaincodePackageSpec
	ChaincodePackage isInstallChaincodeRequest_ChaincodePackage `protobuf_oneof:"chaincode_package"`
}

func (x *InstallChaincodeRequest) Reset() {
	*x = InstallChaincodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallChaincodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallChaincodeRequest) ProtoMessage() {}

func (x *InstallChaincodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallChaincodeRequest.ProtoReflect.Descriptor instead.
func (*InstallChaincodeRequest) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{1}
}

func (m *InstallChaincodeRequest) GetChaincodePackage() isInstallChaincodeRequest_ChaincodePackage {
	if m != nil {
		return m.ChaincodePackage
	}
	return nil
}

func (x *InstallChaincodeRequest) GetChaincodePackageId() *ccpackage.PackageID {
	if x, ok := x.GetChaincodePackage().(*InstallChaincodeRequest_ChaincodePackageId); ok {
		return x.ChaincodePackageId
	}
	return nil
}

func (x *InstallChaincodeRequest) GetChaincodePackageSpec() *ccpackage.PackageSpec {
	if x, ok := x.GetChaincodePackage().(*InstallChaincodeRequest_ChaincodePackageSpec); ok {
		return x.ChaincodePackageSpec
	}
	return nil
}

type isInstallChaincodeRequest_ChaincodePackage interface {
	isInstallChaincodeRequest_ChaincodePackage()
}

type InstallChaincodeRequest_ChaincodePackageId struct {
	ChaincodePackageId *ccpackage.PackageID `protobuf:"bytes,1,opt,name=chaincode_package_id,json=chaincodePackageId,proto3,oneof"`
}

type InstallChaincodeRequest_ChaincodePackageSpec struct {
	ChaincodePackageSpec *ccpackage.PackageSpec `protobuf:"bytes,2,opt,name=chaincode_package_spec,json=chaincodePackageSpec,proto3,oneof"`
}

func (*InstallChaincodeRequest_ChaincodePackageId) isInstallChaincodeRequest_ChaincodePackage() {}

func (*InstallChaincodeRequest_ChaincodePackageSpec) isInstallChaincodeRequest_ChaincodePackage() {}

type UpChaincodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Types that are assignable to ChaincodePackage:
	//
	//	*UpChaincodeRequest_ChaincodePackageId
	//	*UpChaincodeRequest_ChaincodePackageSpec
	ChaincodePackage isUpChaincodeRequest_ChaincodePackage `protobuf_oneof:"chaincode_package"`
	Input            *peer.ChaincodeInput                  `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Policy           string                                `protobuf:"bytes,5,opt,name=policy,proto3" json:"policy,omitempty"`
	TransientMap     map[string][]byte                     `protobuf:"bytes,6,rep,name=transient_map,json=transientMap,proto3" json:"transient_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpChaincodeRequest) Reset() {
	*x = UpChaincodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpChaincodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpChaincodeRequest) ProtoMessage() {}

func (x *UpChaincodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpChaincodeRequest.ProtoReflect.Descriptor instead.
func (*UpChaincodeRequest) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{2}
}

func (x *UpChaincodeRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (m *UpChaincodeRequest) GetChaincodePackage() isUpChaincodeRequest_ChaincodePackage {
	if m != nil {
		return m.ChaincodePackage
	}
	return nil
}

func (x *UpChaincodeRequest) GetChaincodePackageId() *ccpackage.PackageID {
	if x, ok := x.GetChaincodePackage().(*UpChaincodeRequest_ChaincodePackageId); ok {
		return x.ChaincodePackageId
	}
	return nil
}

func (x *UpChaincodeRequest) GetChaincodePackageSpec() *ccpackage.PackageSpec {
	if x, ok := x.GetChaincodePackage().(*UpChaincodeRequest_ChaincodePackageSpec); ok {
		return x.ChaincodePackageSpec
	}
	return nil
}

func (x *UpChaincodeRequest) GetInput() *peer.ChaincodeInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *UpChaincodeRequest) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *UpChaincodeRequest) GetTransientMap() map[string][]byte {
	if x != nil {
		return x.TransientMap
	}
	return nil
}

type isUpChaincodeRequest_ChaincodePackage interface {
	isUpChaincodeRequest_ChaincodePackage()
}

type UpChaincodeRequest_ChaincodePackageId struct {
	ChaincodePackageId *ccpackage.PackageID `protobuf:"bytes,2,opt,name=chaincode_package_id,json=chaincodePackageId,proto3,oneof"`
}

type UpChaincodeRequest_ChaincodePackageSpec struct {
	ChaincodePackageSpec *ccpackage.PackageSpec `protobuf:"bytes,3,opt,name=chaincode_package_spec,json=chaincodePackageSpec,proto3,oneof"`
}

func (*UpChaincodeRequest_ChaincodePackageId) isUpChaincodeRequest_ChaincodePackage() {}

func (*UpChaincodeRequest_ChaincodePackageSpec) isUpChaincodeRequest_ChaincodePackage() {}

type UpChaincodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chaincode information
	Chaincode *Chaincode `protobuf:"bytes,1,opt,name=chaincode,proto3" json:"chaincode,omitempty"`
	// Success of committing attempt
	Committed bool `protobuf:"varint,2,opt,name=committed,proto3" json:"committed,omitempty"`
	// Approvals on chaincode definition [MSPId => bool]
	Approvals map[string]bool `protobuf:"bytes,3,rep,name=approvals,proto3" json:"approvals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Error on chaincode committing attempt
	CommitErr string `protobuf:"bytes,4,opt,name=commit_err,json=commitErr,proto3" json:"commit_err,omitempty"`
}

func (x *UpChaincodeResponse) Reset() {
	*x = UpChaincodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpChaincodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpChaincodeResponse) ProtoMessage() {}

func (x *UpChaincodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpChaincodeResponse.ProtoReflect.Descriptor instead.
func (*UpChaincodeResponse) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{3}
}

func (x *UpChaincodeResponse) GetChaincode() *Chaincode {
	if x != nil {
		return x.Chaincode
	}
	return nil
}

func (x *UpChaincodeResponse) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

func (x *UpChaincodeResponse) GetApprovals() map[string]bool {
	if x != nil {
		return x.Approvals
	}
	return nil
}

func (x *UpChaincodeResponse) GetCommitErr() string {
	if x != nil {
		return x.CommitErr
	}
	return ""
}

// ChannelJoinReq - join channel to peer request
type JoinChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of channel
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// orderer address with port, ex: "orderer.example.com:7050"
	OrdererAddress string `protobuf:"bytes,2,opt,name=orderer_address,json=ordererAddress,proto3" json:"orderer_address,omitempty"`
}

func (x *JoinChannelRequest) Reset() {
	*x = JoinChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelRequest) ProtoMessage() {}

func (x *JoinChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelRequest.ProtoReflect.Descriptor instead.
func (*JoinChannelRequest) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{4}
}

func (x *JoinChannelRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *JoinChannelRequest) GetOrdererAddress() string {
	if x != nil {
		return x.OrdererAddress
	}
	return ""
}

// Request with channel name. Will return information about channel that peer joined
type GetChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of channel we checking
	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
}

func (x *GetChannelRequest) Reset() {
	*x = GetChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRequest) ProtoMessage() {}

func (x *GetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{5}
}

func (x *GetChannelRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

// Response with channel properties and height
type GetChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// properties of channel
	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// how much transactions block have
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetChannelResponse) Reset() {
	*x = GetChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelResponse) ProtoMessage() {}

func (x *GetChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelResponse.ProtoReflect.Descriptor instead.
func (*GetChannelResponse) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{6}
}

func (x *GetChannelResponse) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *GetChannelResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Chaincode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version          string           `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	PackageId        string           `protobuf:"bytes,3,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	LifecycleVersion LifecycleVersion `protobuf:"varint,4,opt,name=lifecycle_version,json=lifecycleVersion,proto3,enum=hlfsdkgo.service.peer.LifecycleVersion" json:"lifecycle_version,omitempty"`
	// Instantiated at channels
	Channels []string `protobuf:"bytes,5,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *Chaincode) Reset() {
	*x = Chaincode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chaincode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chaincode) ProtoMessage() {}

func (x *Chaincode) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chaincode.ProtoReflect.Descriptor instead.
func (*Chaincode) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{7}
}

func (x *Chaincode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chaincode) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Chaincode) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *Chaincode) GetLifecycleVersion() LifecycleVersion {
	if x != nil {
		return x.LifecycleVersion
	}
	return LifecycleVersion_LIFECYCLE_V1
}

func (x *Chaincode) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

type Chaincodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chaincodes []*Chaincode `protobuf:"bytes,1,rep,name=chaincodes,proto3" json:"chaincodes,omitempty"`
}

func (x *Chaincodes) Reset() {
	*x = Chaincodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chaincodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chaincodes) ProtoMessage() {}

func (x *Chaincodes) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chaincodes.ProtoReflect.Descriptor instead.
func (*Chaincodes) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{8}
}

func (x *Chaincodes) GetChaincodes() []*Chaincode {
	if x != nil {
		return x.Chaincodes
	}
	return nil
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{9}
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Channels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*Channel `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *Channels) Reset() {
	*x = Channels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channels) ProtoMessage() {}

func (x *Channels) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channels.ProtoReflect.Descriptor instead.
func (*Channels) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{10}
}

func (x *Channels) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type GetPeerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspId string `protobuf:"bytes,1,opt,name=msp_id,json=mspId,proto3" json:"msp_id,omitempty"`
	// unparsed cert bytes
	CertPem []byte `protobuf:"bytes,2,opt,name=cert_pem,json=certPem,proto3" json:"cert_pem,omitempty"`
	// parsed certificated for frontend (like openssl output)
	CertContent string      `protobuf:"bytes,3,opt,name=cert_content,json=certContent,proto3" json:"cert_content,omitempty"`
	Address     string      `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PeerVersion string      `protobuf:"bytes,5,opt,name=peer_version,json=peerVersion,proto3" json:"peer_version,omitempty"`
	Channels    *Channels   `protobuf:"bytes,6,opt,name=channels,proto3" json:"channels,omitempty"`
	Chaincodes  *Chaincodes `protobuf:"bytes,7,opt,name=chaincodes,proto3" json:"chaincodes,omitempty"`
}

func (x *GetPeerInfoResponse) Reset() {
	*x = GetPeerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_peer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerInfoResponse) ProtoMessage() {}

func (x *GetPeerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_peer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPeerInfoResponse) Descriptor() ([]byte, []int) {
	return file_peer_peer_proto_rawDescGZIP(), []int{11}
}

func (x *GetPeerInfoResponse) GetMspId() string {
	if x != nil {
		return x.MspId
	}
	return ""
}

func (x *GetPeerInfoResponse) GetCertPem() []byte {
	if x != nil {
		return x.CertPem
	}
	return nil
}

func (x *GetPeerInfoResponse) GetCertContent() string {
	if x != nil {
		return x.CertContent
	}
	return ""
}

func (x *GetPeerInfoResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetPeerInfoResponse) GetPeerVersion() string {
	if x != nil {
		return x.PeerVersion
	}
	return ""
}

func (x *GetPeerInfoResponse) GetChannels() *Channels {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetPeerInfoResponse) GetChaincodes() *Chaincodes {
	if x != nil {
		return x.Chaincodes
	}
	return nil
}

var File_peer_peer_proto protoreflect.FileDescriptor

var file_peer_peer_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x63,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5f,
	0x0a, 0x16, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x13, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x22, 0xfa, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x59,
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68,
	0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x16, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6c, 0x66, 0x73,
	0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x22, 0xa9, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68,
	0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x6c, 0x66,
	0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x1a,
	0x3c, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a,
	0x12, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68,
	0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x22, 0x4e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x46, 0x0a, 0x08, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64,
	0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2a, 0x36, 0x0a, 0x10,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x56, 0x31,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x56, 0x32, 0x10, 0x01, 0x32, 0x8b, 0x03, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x29, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x6c, 0x66,
	0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x22, 0x12, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x2d, 0x75, 0x70, 0x12, 0x6b, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a,
	0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x32, 0x88, 0x06, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64,
	0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x1a, 0x20, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x7d, 0x12, 0x5f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x68, 0x6c,
	0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0xa9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x12, 0x28, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x42, 0x2e, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65,
	0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x68, 0x6c, 0x66, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peer_peer_proto_rawDescOnce sync.Once
	file_peer_peer_proto_rawDescData = file_peer_peer_proto_rawDesc
)

func file_peer_peer_proto_rawDescGZIP() []byte {
	file_peer_peer_proto_rawDescOnce.Do(func() {
		file_peer_peer_proto_rawDescData = protoimpl.X.CompressGZIP(file_peer_peer_proto_rawDescData)
	})
	return file_peer_peer_proto_rawDescData
}

var file_peer_peer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_peer_peer_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_peer_peer_proto_goTypes = []interface{}{
	(LifecycleVersion)(0),                    // 0: hlfsdkgo.service.peer.LifecycleVersion
	(*GetInstantiatedChaincodesRequest)(nil), // 1: hlfsdkgo.service.peer.GetInstantiatedChaincodesRequest
	(*InstallChaincodeRequest)(nil),          // 2: hlfsdkgo.service.peer.InstallChaincodeRequest
	(*UpChaincodeRequest)(nil),               // 3: hlfsdkgo.service.peer.UpChaincodeRequest
	(*UpChaincodeResponse)(nil),              // 4: hlfsdkgo.service.peer.UpChaincodeResponse
	(*JoinChannelRequest)(nil),               // 5: hlfsdkgo.service.peer.JoinChannelRequest
	(*GetChannelRequest)(nil),                // 6: hlfsdkgo.service.peer.GetChannelRequest
	(*GetChannelResponse)(nil),               // 7: hlfsdkgo.service.peer.GetChannelResponse
	(*Chaincode)(nil),                        // 8: hlfsdkgo.service.peer.Chaincode
	(*Chaincodes)(nil),                       // 9: hlfsdkgo.service.peer.Chaincodes
	(*Channel)(nil),                          // 10: hlfsdkgo.service.peer.Channel
	(*Channels)(nil),                         // 11: hlfsdkgo.service.peer.Channels
	(*GetPeerInfoResponse)(nil),              // 12: hlfsdkgo.service.peer.GetPeerInfoResponse
	nil,                                      // 13: hlfsdkgo.service.peer.UpChaincodeRequest.TransientMapEntry
	nil,                                      // 14: hlfsdkgo.service.peer.UpChaincodeResponse.ApprovalsEntry
	(*ccpackage.PackageID)(nil),              // 15: hlfsdkgo.service.ccpackage.PackageID
	(*ccpackage.PackageSpec)(nil),            // 16: hlfsdkgo.service.ccpackage.PackageSpec
	(*peer.ChaincodeInput)(nil),              // 17: protos.ChaincodeInput
	(*emptypb.Empty)(nil),                    // 18: google.protobuf.Empty
}
var file_peer_peer_proto_depIdxs = []int32{
	15, // 0: hlfsdkgo.service.peer.InstallChaincodeRequest.chaincode_package_id:type_name -> hlfsdkgo.service.ccpackage.PackageID
	16, // 1: hlfsdkgo.service.peer.InstallChaincodeRequest.chaincode_package_spec:type_name -> hlfsdkgo.service.ccpackage.PackageSpec
	15, // 2: hlfsdkgo.service.peer.UpChaincodeRequest.chaincode_package_id:type_name -> hlfsdkgo.service.ccpackage.PackageID
	16, // 3: hlfsdkgo.service.peer.UpChaincodeRequest.chaincode_package_spec:type_name -> hlfsdkgo.service.ccpackage.PackageSpec
	17, // 4: hlfsdkgo.service.peer.UpChaincodeRequest.input:type_name -> protos.ChaincodeInput
	13, // 5: hlfsdkgo.service.peer.UpChaincodeRequest.transient_map:type_name -> hlfsdkgo.service.peer.UpChaincodeRequest.TransientMapEntry
	8,  // 6: hlfsdkgo.service.peer.UpChaincodeResponse.chaincode:type_name -> hlfsdkgo.service.peer.Chaincode
	14, // 7: hlfsdkgo.service.peer.UpChaincodeResponse.approvals:type_name -> hlfsdkgo.service.peer.UpChaincodeResponse.ApprovalsEntry
	10, // 8: hlfsdkgo.service.peer.GetChannelResponse.channel:type_name -> hlfsdkgo.service.peer.Channel
	0,  // 9: hlfsdkgo.service.peer.Chaincode.lifecycle_version:type_name -> hlfsdkgo.service.peer.LifecycleVersion
	8,  // 10: hlfsdkgo.service.peer.Chaincodes.chaincodes:type_name -> hlfsdkgo.service.peer.Chaincode
	10, // 11: hlfsdkgo.service.peer.Channels.channels:type_name -> hlfsdkgo.service.peer.Channel
	11, // 12: hlfsdkgo.service.peer.GetPeerInfoResponse.channels:type_name -> hlfsdkgo.service.peer.Channels
	9,  // 13: hlfsdkgo.service.peer.GetPeerInfoResponse.chaincodes:type_name -> hlfsdkgo.service.peer.Chaincodes
	2,  // 14: hlfsdkgo.service.peer.PeerManagerService.InstallChaincode:input_type -> hlfsdkgo.service.peer.InstallChaincodeRequest
	3,  // 15: hlfsdkgo.service.peer.PeerManagerService.UpChaincode:input_type -> hlfsdkgo.service.peer.UpChaincodeRequest
	5,  // 16: hlfsdkgo.service.peer.PeerManagerService.JoinChannel:input_type -> hlfsdkgo.service.peer.JoinChannelRequest
	18, // 17: hlfsdkgo.service.peer.PeerInfoService.GetInstalledChaincodes:input_type -> google.protobuf.Empty
	15, // 18: hlfsdkgo.service.peer.PeerInfoService.GetInstalledChaincode:input_type -> hlfsdkgo.service.ccpackage.PackageID
	18, // 19: hlfsdkgo.service.peer.PeerInfoService.ListChannels:input_type -> google.protobuf.Empty
	6,  // 20: hlfsdkgo.service.peer.PeerInfoService.GetChannel:input_type -> hlfsdkgo.service.peer.GetChannelRequest
	1,  // 21: hlfsdkgo.service.peer.PeerInfoService.GetInstantiatedChaincodes:input_type -> hlfsdkgo.service.peer.GetInstantiatedChaincodesRequest
	18, // 22: hlfsdkgo.service.peer.PeerInfoService.GetPeerInfo:input_type -> google.protobuf.Empty
	8,  // 23: hlfsdkgo.service.peer.PeerManagerService.InstallChaincode:output_type -> hlfsdkgo.service.peer.Chaincode
	4,  // 24: hlfsdkgo.service.peer.PeerManagerService.UpChaincode:output_type -> hlfsdkgo.service.peer.UpChaincodeResponse
	18, // 25: hlfsdkgo.service.peer.PeerManagerService.JoinChannel:output_type -> google.protobuf.Empty
	9,  // 26: hlfsdkgo.service.peer.PeerInfoService.GetInstalledChaincodes:output_type -> hlfsdkgo.service.peer.Chaincodes
	8,  // 27: hlfsdkgo.service.peer.PeerInfoService.GetInstalledChaincode:output_type -> hlfsdkgo.service.peer.Chaincode
	11, // 28: hlfsdkgo.service.peer.PeerInfoService.ListChannels:output_type -> hlfsdkgo.service.peer.Channels
	7,  // 29: hlfsdkgo.service.peer.PeerInfoService.GetChannel:output_type -> hlfsdkgo.service.peer.GetChannelResponse
	9,  // 30: hlfsdkgo.service.peer.PeerInfoService.GetInstantiatedChaincodes:output_type -> hlfsdkgo.service.peer.Chaincodes
	12, // 31: hlfsdkgo.service.peer.PeerInfoService.GetPeerInfo:output_type -> hlfsdkgo.service.peer.GetPeerInfoResponse
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_peer_peer_proto_init() }
func file_peer_peer_proto_init() {
	if File_peer_peer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_peer_peer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstantiatedChaincodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallChaincodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpChaincodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpChaincodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chaincode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chaincodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_peer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peer_peer_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*InstallChaincodeRequest_ChaincodePackageId)(nil),
		(*InstallChaincodeRequest_ChaincodePackageSpec)(nil),
	}
	file_peer_peer_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*UpChaincodeRequest_ChaincodePackageId)(nil),
		(*UpChaincodeRequest_ChaincodePackageSpec)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peer_peer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_peer_peer_proto_goTypes,
		DependencyIndexes: file_peer_peer_proto_depIdxs,
		EnumInfos:         file_peer_peer_proto_enumTypes,
		MessageInfos:      file_peer_peer_proto_msgTypes,
	}.Build()
	File_peer_peer_proto = out.File
	file_peer_peer_proto_rawDesc = nil
	file_peer_peer_proto_goTypes = nil
	file_peer_peer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PeerManagerServiceClient is the client API for PeerManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerManagerServiceClient interface {
	// ChaincodeInstall - it install chaincode
	InstallChaincode(ctx context.Context, in *InstallChaincodeRequest, opts ...grpc.CallOption) (*Chaincode, error)
	// ChaincodeUp - it installs and instantiates/upgrades  (LSCC) or
	//
	//	installs, approves and commits
	UpChaincode(ctx context.Context, in *UpChaincodeRequest, opts ...grpc.CallOption) (*UpChaincodeResponse, error)
	// JoinChannel - join channel to peer
	JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type peerManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerManagerServiceClient(cc grpc.ClientConnInterface) PeerManagerServiceClient {
	return &peerManagerServiceClient{cc}
}

func (c *peerManagerServiceClient) InstallChaincode(ctx context.Context, in *InstallChaincodeRequest, opts ...grpc.CallOption) (*Chaincode, error) {
	out := new(Chaincode)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerManagerService/InstallChaincode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerManagerServiceClient) UpChaincode(ctx context.Context, in *UpChaincodeRequest, opts ...grpc.CallOption) (*UpChaincodeResponse, error) {
	out := new(UpChaincodeResponse)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerManagerService/UpChaincode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerManagerServiceClient) JoinChannel(ctx context.Context, in *JoinChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerManagerService/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerManagerServiceServer is the server API for PeerManagerService service.
type PeerManagerServiceServer interface {
	// ChaincodeInstall - it install chaincode
	InstallChaincode(context.Context, *InstallChaincodeRequest) (*Chaincode, error)
	// ChaincodeUp - it installs and instantiates/upgrades  (LSCC) or
	//
	//	installs, approves and commits
	UpChaincode(context.Context, *UpChaincodeRequest) (*UpChaincodeResponse, error)
	// JoinChannel - join channel to peer
	JoinChannel(context.Context, *JoinChannelRequest) (*emptypb.Empty, error)
}

// UnimplementedPeerManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPeerManagerServiceServer struct {
}

func (*UnimplementedPeerManagerServiceServer) InstallChaincode(context.Context, *InstallChaincodeRequest) (*Chaincode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallChaincode not implemented")
}
func (*UnimplementedPeerManagerServiceServer) UpChaincode(context.Context, *UpChaincodeRequest) (*UpChaincodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpChaincode not implemented")
}
func (*UnimplementedPeerManagerServiceServer) JoinChannel(context.Context, *JoinChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}

func RegisterPeerManagerServiceServer(s *grpc.Server, srv PeerManagerServiceServer) {
	s.RegisterService(&_PeerManagerService_serviceDesc, srv)
}

func _PeerManagerService_InstallChaincode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallChaincodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagerServiceServer).InstallChaincode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerManagerService/InstallChaincode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagerServiceServer).InstallChaincode(ctx, req.(*InstallChaincodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerManagerService_UpChaincode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpChaincodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagerServiceServer).UpChaincode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerManagerService/UpChaincode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagerServiceServer).UpChaincode(ctx, req.(*UpChaincodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerManagerService_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerManagerServiceServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerManagerService/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerManagerServiceServer).JoinChannel(ctx, req.(*JoinChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdkgo.service.peer.PeerManagerService",
	HandlerType: (*PeerManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallChaincode",
			Handler:    _PeerManagerService_InstallChaincode_Handler,
		},
		{
			MethodName: "UpChaincode",
			Handler:    _PeerManagerService_UpChaincode_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _PeerManagerService_JoinChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer/peer.proto",
}

// PeerInfoServiceClient is the client API for PeerInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerInfoServiceClient interface {
	// ChaincodeList - returns list chaincode and mapped to channel if it upped
	GetInstalledChaincodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Chaincodes, error)
	GetInstalledChaincode(ctx context.Context, in *ccpackage.PackageID, opts ...grpc.CallOption) (*Chaincode, error)
	// ListChannels - returns list of channels
	ListChannels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Channels, error)
	// GetChannel - returns information about channel that peer joined
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	// GetInstantiatedChaincodes - returns information about channel that peer joined
	GetInstantiatedChaincodes(ctx context.Context, in *GetInstantiatedChaincodesRequest, opts ...grpc.CallOption) (*Chaincodes, error)
	// GetPeerInfo - returns information about peer
	GetPeerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPeerInfoResponse, error)
}

type peerInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerInfoServiceClient(cc grpc.ClientConnInterface) PeerInfoServiceClient {
	return &peerInfoServiceClient{cc}
}

func (c *peerInfoServiceClient) GetInstalledChaincodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Chaincodes, error) {
	out := new(Chaincodes)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerInfoService/GetInstalledChaincodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerInfoServiceClient) GetInstalledChaincode(ctx context.Context, in *ccpackage.PackageID, opts ...grpc.CallOption) (*Chaincode, error) {
	out := new(Chaincode)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerInfoService/GetInstalledChaincode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerInfoServiceClient) ListChannels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Channels, error) {
	out := new(Channels)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerInfoService/ListChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerInfoServiceClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerInfoService/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerInfoServiceClient) GetInstantiatedChaincodes(ctx context.Context, in *GetInstantiatedChaincodesRequest, opts ...grpc.CallOption) (*Chaincodes, error) {
	out := new(Chaincodes)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerInfoService/GetInstantiatedChaincodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerInfoServiceClient) GetPeerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPeerInfoResponse, error) {
	out := new(GetPeerInfoResponse)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.peer.PeerInfoService/GetPeerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerInfoServiceServer is the server API for PeerInfoService service.
type PeerInfoServiceServer interface {
	// ChaincodeList - returns list chaincode and mapped to channel if it upped
	GetInstalledChaincodes(context.Context, *emptypb.Empty) (*Chaincodes, error)
	GetInstalledChaincode(context.Context, *ccpackage.PackageID) (*Chaincode, error)
	// ListChannels - returns list of channels
	ListChannels(context.Context, *emptypb.Empty) (*Channels, error)
	// GetChannel - returns information about channel that peer joined
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	// GetInstantiatedChaincodes - returns information about channel that peer joined
	GetInstantiatedChaincodes(context.Context, *GetInstantiatedChaincodesRequest) (*Chaincodes, error)
	// GetPeerInfo - returns information about peer
	GetPeerInfo(context.Context, *emptypb.Empty) (*GetPeerInfoResponse, error)
}

// UnimplementedPeerInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPeerInfoServiceServer struct {
}

func (*UnimplementedPeerInfoServiceServer) GetInstalledChaincodes(context.Context, *emptypb.Empty) (*Chaincodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstalledChaincodes not implemented")
}
func (*UnimplementedPeerInfoServiceServer) GetInstalledChaincode(context.Context, *ccpackage.PackageID) (*Chaincode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstalledChaincode not implemented")
}
func (*UnimplementedPeerInfoServiceServer) ListChannels(context.Context, *emptypb.Empty) (*Channels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (*UnimplementedPeerInfoServiceServer) GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (*UnimplementedPeerInfoServiceServer) GetInstantiatedChaincodes(context.Context, *GetInstantiatedChaincodesRequest) (*Chaincodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstantiatedChaincodes not implemented")
}
func (*UnimplementedPeerInfoServiceServer) GetPeerInfo(context.Context, *emptypb.Empty) (*GetPeerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerInfo not implemented")
}

func RegisterPeerInfoServiceServer(s *grpc.Server, srv PeerInfoServiceServer) {
	s.RegisterService(&_PeerInfoService_serviceDesc, srv)
}

func _PeerInfoService_GetInstalledChaincodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerInfoServiceServer).GetInstalledChaincodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerInfoService/GetInstalledChaincodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerInfoServiceServer).GetInstalledChaincodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerInfoService_GetInstalledChaincode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ccpackage.PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerInfoServiceServer).GetInstalledChaincode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerInfoService/GetInstalledChaincode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerInfoServiceServer).GetInstalledChaincode(ctx, req.(*ccpackage.PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerInfoService_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerInfoServiceServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerInfoService/ListChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerInfoServiceServer).ListChannels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerInfoService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerInfoServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerInfoService/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerInfoServiceServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerInfoService_GetInstantiatedChaincodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstantiatedChaincodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerInfoServiceServer).GetInstantiatedChaincodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerInfoService/GetInstantiatedChaincodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerInfoServiceServer).GetInstantiatedChaincodes(ctx, req.(*GetInstantiatedChaincodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerInfoService_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerInfoServiceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.peer.PeerInfoService/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerInfoServiceServer).GetPeerInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdkgo.service.peer.PeerInfoService",
	HandlerType: (*PeerInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstalledChaincodes",
			Handler:    _PeerInfoService_GetInstalledChaincodes_Handler,
		},
		{
			MethodName: "GetInstalledChaincode",
			Handler:    _PeerInfoService_GetInstalledChaincode_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _PeerInfoService_ListChannels_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _PeerInfoService_GetChannel_Handler,
		},
		{
			MethodName: "GetInstantiatedChaincodes",
			Handler:    _PeerInfoService_GetInstantiatedChaincodes_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _PeerInfoService_GetPeerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer/peer.proto",
}
