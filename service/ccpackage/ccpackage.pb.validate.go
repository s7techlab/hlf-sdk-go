// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ccpackage/ccpackage.proto

package ccpackage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PackageID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PackageID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PackageID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PackageIDMultiError, or nil
// if none found.
func (m *PackageID) ValidateAll() error {
	return m.validate(true)
}

func (m *PackageID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PackageIDValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := PackageIDValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PackageID_FabricVersion_NotInLookup[m.GetFabricVersion()]; ok {
		err := PackageIDValidationError{
			field:  "FabricVersion",
			reason: "value must not be in list [FABRIC_VERSION_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := FabricVersion_name[int32(m.GetFabricVersion())]; !ok {
		err := PackageIDValidationError{
			field:  "FabricVersion",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PackageIDMultiError(errors)
	}

	return nil
}

// PackageIDMultiError is an error wrapping multiple validation errors returned
// by PackageID.ValidateAll() if the designated constraints aren't met.
type PackageIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageIDMultiError) AllErrors() []error { return m }

// PackageIDValidationError is the validation error returned by
// PackageID.Validate if the designated constraints aren't met.
type PackageIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageIDValidationError) ErrorName() string { return "PackageIDValidationError" }

// Error satisfies the builtin error interface
func (e PackageIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackageID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageIDValidationError{}

var _PackageID_FabricVersion_NotInLookup = map[FabricVersion]struct{}{
	0: {},
}

// Validate checks the field values on PackageSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PackageSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PackageSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PackageSpecMultiError, or
// nil if none found.
func (m *PackageSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *PackageSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := PackageSpecValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PackageSpecValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PackageSpecValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PackageSpecValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetRepository()) < 1 {
		err := PackageSpecValidationError{
			field:  "Repository",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChaincodePath()) < 1 {
		err := PackageSpecValidationError{
			field:  "ChaincodePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBinaryPath()) < 1 {
		err := PackageSpecValidationError{
			field:  "BinaryPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PackageSpecMultiError(errors)
	}

	return nil
}

// PackageSpecMultiError is an error wrapping multiple validation errors
// returned by PackageSpec.ValidateAll() if the designated constraints aren't met.
type PackageSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageSpecMultiError) AllErrors() []error { return m }

// PackageSpecValidationError is the validation error returned by
// PackageSpec.Validate if the designated constraints aren't met.
type PackageSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageSpecValidationError) ErrorName() string { return "PackageSpecValidationError" }

// Error satisfies the builtin error interface
func (e PackageSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackageSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageSpecValidationError{}

// Validate checks the field values on PackageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PackageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PackageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PackageInfoMultiError, or
// nil if none found.
func (m *PackageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PackageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PackageInfoValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PackageInfoValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PackageInfoValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PackageInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PackageInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PackageInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PackageInfoMultiError(errors)
	}

	return nil
}

// PackageInfoMultiError is an error wrapping multiple validation errors
// returned by PackageInfo.ValidateAll() if the designated constraints aren't met.
type PackageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageInfoMultiError) AllErrors() []error { return m }

// PackageInfoValidationError is the validation error returned by
// PackageInfo.Validate if the designated constraints aren't met.
type PackageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageInfoValidationError) ErrorName() string { return "PackageInfoValidationError" }

// Error satisfies the builtin error interface
func (e PackageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageInfoValidationError{}

// Validate checks the field values on PackageInfoList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PackageInfoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PackageInfoList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PackageInfoListMultiError, or nil if none found.
func (m *PackageInfoList) ValidateAll() error {
	return m.validate(true)
}

func (m *PackageInfoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PackageInfoListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PackageInfoListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PackageInfoListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PackageInfoListMultiError(errors)
	}

	return nil
}

// PackageInfoListMultiError is an error wrapping multiple validation errors
// returned by PackageInfoList.ValidateAll() if the designated constraints
// aren't met.
type PackageInfoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageInfoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageInfoListMultiError) AllErrors() []error { return m }

// PackageInfoListValidationError is the validation error returned by
// PackageInfoList.Validate if the designated constraints aren't met.
type PackageInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageInfoListValidationError) ErrorName() string { return "PackageInfoListValidationError" }

// Error satisfies the builtin error interface
func (e PackageInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackageInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageInfoListValidationError{}

// Validate checks the field values on FileChunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileChunkMultiError, or nil
// if none found.
func (m *FileChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *FileChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return FileChunkMultiError(errors)
	}

	return nil
}

// FileChunkMultiError is an error wrapping multiple validation errors returned
// by FileChunk.ValidateAll() if the designated constraints aren't met.
type FileChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileChunkMultiError) AllErrors() []error { return m }

// FileChunkValidationError is the validation error returned by
// FileChunk.Validate if the designated constraints aren't met.
type FileChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileChunkValidationError) ErrorName() string { return "FileChunkValidationError" }

// Error satisfies the builtin error interface
func (e FileChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileChunkValidationError{}

// Validate checks the field values on PutPackageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutPackageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutPackageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutPackageRequestMultiError, or nil if none found.
func (m *PutPackageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutPackageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutPackageRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutPackageRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutPackageRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Data

	if len(errors) > 0 {
		return PutPackageRequestMultiError(errors)
	}

	return nil
}

// PutPackageRequestMultiError is an error wrapping multiple validation errors
// returned by PutPackageRequest.ValidateAll() if the designated constraints
// aren't met.
type PutPackageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutPackageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutPackageRequestMultiError) AllErrors() []error { return m }

// PutPackageRequestValidationError is the validation error returned by
// PutPackageRequest.Validate if the designated constraints aren't met.
type PutPackageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutPackageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutPackageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutPackageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutPackageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutPackageRequestValidationError) ErrorName() string {
	return "PutPackageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutPackageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutPackageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutPackageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutPackageRequestValidationError{}

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Package) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PackageMultiError, or nil if none found.
func (m *Package) ValidateAll() error {
	return m.validate(true)
}

func (m *Package) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PackageValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PackageValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PackageValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PackageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PackageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PackageValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Data

	if len(errors) > 0 {
		return PackageMultiError(errors)
	}

	return nil
}

// PackageMultiError is an error wrapping multiple validation errors returned
// by Package.ValidateAll() if the designated constraints aren't met.
type PackageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageMultiError) AllErrors() []error { return m }

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}
