// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ccpackage/packages.proto

package ccpackage

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FabricVersion int32

const (
	// Fabric v1.4 tools
	FabricVersion_FABRIC_VERSION_UNSPECIFIED FabricVersion = 0
	// Fabric v1.4 tools
	FabricVersion_FABRIC_V1 FabricVersion = 1
	// Fabric v2.3 tools
	FabricVersion_FABRIC_V2 FabricVersion = 2
	// Fabric v2.3 tools with lifecycle
	FabricVersion_FABRIC_V2_LIFECYCLE FabricVersion = 3
)

// Enum value maps for FabricVersion.
var (
	FabricVersion_name = map[int32]string{
		0: "FABRIC_VERSION_UNSPECIFIED",
		1: "FABRIC_V1",
		2: "FABRIC_V2",
		3: "FABRIC_V2_LIFECYCLE",
	}
	FabricVersion_value = map[string]int32{
		"FABRIC_VERSION_UNSPECIFIED": 0,
		"FABRIC_V1":                  1,
		"FABRIC_V2":                  2,
		"FABRIC_V2_LIFECYCLE":        3,
	}
)

func (x FabricVersion) Enum() *FabricVersion {
	p := new(FabricVersion)
	*p = x
	return p
}

func (x FabricVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_ccpackage_packages_proto_enumTypes[0].Descriptor()
}

func (FabricVersion) Type() protoreflect.EnumType {
	return &file_ccpackage_packages_proto_enumTypes[0]
}

func (x FabricVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricVersion.Descriptor instead.
func (FabricVersion) EnumDescriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{0}
}

type PackageID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a chaincode name, ex: payment
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version is a chaincode version to use, ex: 2800dea5e957b3b65f48340337fdbbedc7caf396
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Fabric version to use to build chaincode.
	FabricVersion FabricVersion `protobuf:"varint,3,opt,name=fabric_version,json=fabricVersion,proto3,enum=hlfsdkgo.service.ccpackage.FabricVersion" json:"fabric_version,omitempty"`
}

func (x *PackageID) Reset() {
	*x = PackageID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccpackage_packages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageID) ProtoMessage() {}

func (x *PackageID) ProtoReflect() protoreflect.Message {
	mi := &file_ccpackage_packages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageID.ProtoReflect.Descriptor instead.
func (*PackageID) Descriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{0}
}

func (x *PackageID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageID) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PackageID) GetFabricVersion() FabricVersion {
	if x != nil {
		return x.FabricVersion
	}
	return FabricVersion_FABRIC_VERSION_UNSPECIFIED
}

type PackageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Package ID is package identification data
	Id *PackageID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Repository is url to git sources, ex: http://:token@{repo url}
	// or http://login:password@github.com/hyperledger-labs/cckit/examples/cars
	// or path to local directory file:///path/to/sources/hyperledger-labs/cckit
	Repository string `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	// Chaincode path is path to chaincode, ex: github.com/hyperledger-labs/cckit
	ChaincodePath string `protobuf:"bytes,3,opt,name=chaincode_path,json=chaincodePath,proto3" json:"chaincode_path,omitempty"`
	// BinaryPath is path to chaincode binary in given repository,
	// ex: `examples/cars`.
	BinaryPath string `protobuf:"bytes,4,opt,name=binary_path,json=binaryPath,proto3" json:"binary_path,omitempty"`
}

func (x *PackageSpec) Reset() {
	*x = PackageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccpackage_packages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSpec) ProtoMessage() {}

func (x *PackageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ccpackage_packages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSpec.ProtoReflect.Descriptor instead.
func (*PackageSpec) Descriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{1}
}

func (x *PackageSpec) GetId() *PackageID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackageSpec) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *PackageSpec) GetChaincodePath() string {
	if x != nil {
		return x.ChaincodePath
	}
	return ""
}

func (x *PackageSpec) GetBinaryPath() string {
	if x != nil {
		return x.BinaryPath
	}
	return ""
}

type PackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *PackageID             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size      int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PackageInfo) Reset() {
	*x = PackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccpackage_packages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfo) ProtoMessage() {}

func (x *PackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ccpackage_packages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfo.ProtoReflect.Descriptor instead.
func (*PackageInfo) Descriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{2}
}

func (x *PackageInfo) GetId() *PackageID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PackageInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type PackageInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PackageInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PackageInfoList) Reset() {
	*x = PackageInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccpackage_packages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfoList) ProtoMessage() {}

func (x *PackageInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_ccpackage_packages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfoList.ProtoReflect.Descriptor instead.
func (*PackageInfoList) Descriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{3}
}

func (x *PackageInfoList) GetItems() []*PackageInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccpackage_packages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_ccpackage_packages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{4}
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PutPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *PackageID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutPackageRequest) Reset() {
	*x = PutPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccpackage_packages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutPackageRequest) ProtoMessage() {}

func (x *PutPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ccpackage_packages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutPackageRequest.ProtoReflect.Descriptor instead.
func (*PutPackageRequest) Descriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{5}
}

func (x *PutPackageRequest) GetId() *PackageID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PutPackageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *PackageID             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size      int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Data      []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ccpackage_packages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_ccpackage_packages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_ccpackage_packages_proto_rawDescGZIP(), []int{6}
}

func (x *Package) GetId() *PackageID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Package) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Package) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Package) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_ccpackage_packages_proto protoreflect.FileDescriptor

var file_ccpackage_packages_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x68, 0x6c, 0x66, 0x73,
	0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x09,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0e, 0x66, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x0b,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b,
	0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x50, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x1f, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68,
	0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x66, 0x0a, 0x0d, 0x46, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x46,
	0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x56, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41,
	0x42, 0x52, 0x49, 0x43, 0x5f, 0x56, 0x32, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x42,
	0x52, 0x49, 0x43, 0x5f, 0x56, 0x32, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x10, 0x03, 0x32, 0x86, 0x07, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x27, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64,
	0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x63,
	0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x1a, 0x27, 0x2e, 0x68,
	0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f,
	0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x66, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x77, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x68, 0x6c,
	0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x1a, 0x27, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x1a, 0x0b, 0x2f, 0x63, 0x63, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x68, 0x6c, 0x66, 0x73,
	0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b,
	0x2f, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3f, 0x12, 0x3d, 0x2f, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x7b, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x8d, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64,
	0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x1a,
	0x23, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x63,
	0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7b, 0x66, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x59, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73,
	0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x1a, 0x25, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x67, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65, 0x63, 0x68,
	0x6c, 0x61, 0x62, 0x2f, 0x68, 0x6c, 0x66, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x63, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ccpackage_packages_proto_rawDescOnce sync.Once
	file_ccpackage_packages_proto_rawDescData = file_ccpackage_packages_proto_rawDesc
)

func file_ccpackage_packages_proto_rawDescGZIP() []byte {
	file_ccpackage_packages_proto_rawDescOnce.Do(func() {
		file_ccpackage_packages_proto_rawDescData = protoimpl.X.CompressGZIP(file_ccpackage_packages_proto_rawDescData)
	})
	return file_ccpackage_packages_proto_rawDescData
}

var file_ccpackage_packages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ccpackage_packages_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ccpackage_packages_proto_goTypes = []interface{}{
	(FabricVersion)(0),                   // 0: hlfsdkgo.service.ccpackage.FabricVersion
	(*PackageID)(nil),                    // 1: hlfsdkgo.service.ccpackage.PackageID
	(*PackageSpec)(nil),                  // 2: hlfsdkgo.service.ccpackage.PackageSpec
	(*PackageInfo)(nil),                  // 3: hlfsdkgo.service.ccpackage.PackageInfo
	(*PackageInfoList)(nil),              // 4: hlfsdkgo.service.ccpackage.PackageInfoList
	(*FileChunk)(nil),                    // 5: hlfsdkgo.service.ccpackage.FileChunk
	(*PutPackageRequest)(nil),            // 6: hlfsdkgo.service.ccpackage.PutPackageRequest
	(*Package)(nil),                      // 7: hlfsdkgo.service.ccpackage.Package
	(*timestamppb.Timestamp)(nil),        // 8: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 9: google.protobuf.Empty
	(*peer.ChaincodeDeploymentSpec)(nil), // 10: protos.ChaincodeDeploymentSpec
}
var file_ccpackage_packages_proto_depIdxs = []int32{
	0,  // 0: hlfsdkgo.service.ccpackage.PackageID.fabric_version:type_name -> hlfsdkgo.service.ccpackage.FabricVersion
	1,  // 1: hlfsdkgo.service.ccpackage.PackageSpec.id:type_name -> hlfsdkgo.service.ccpackage.PackageID
	1,  // 2: hlfsdkgo.service.ccpackage.PackageInfo.id:type_name -> hlfsdkgo.service.ccpackage.PackageID
	8,  // 3: hlfsdkgo.service.ccpackage.PackageInfo.created_at:type_name -> google.protobuf.Timestamp
	3,  // 4: hlfsdkgo.service.ccpackage.PackageInfoList.items:type_name -> hlfsdkgo.service.ccpackage.PackageInfo
	1,  // 5: hlfsdkgo.service.ccpackage.PutPackageRequest.id:type_name -> hlfsdkgo.service.ccpackage.PackageID
	1,  // 6: hlfsdkgo.service.ccpackage.Package.id:type_name -> hlfsdkgo.service.ccpackage.PackageID
	8,  // 7: hlfsdkgo.service.ccpackage.Package.created_at:type_name -> google.protobuf.Timestamp
	2,  // 8: hlfsdkgo.service.ccpackage.PackageService.Create:input_type -> hlfsdkgo.service.ccpackage.PackageSpec
	1,  // 9: hlfsdkgo.service.ccpackage.PackageService.GetInfo:input_type -> hlfsdkgo.service.ccpackage.PackageID
	2,  // 10: hlfsdkgo.service.ccpackage.PackageService.GetOrCreate:input_type -> hlfsdkgo.service.ccpackage.PackageSpec
	9,  // 11: hlfsdkgo.service.ccpackage.PackageService.ListInfo:input_type -> google.protobuf.Empty
	1,  // 12: hlfsdkgo.service.ccpackage.PackageService.GetDeploymentSpec:input_type -> hlfsdkgo.service.ccpackage.PackageID
	1,  // 13: hlfsdkgo.service.ccpackage.PackageService.Get:input_type -> hlfsdkgo.service.ccpackage.PackageID
	1,  // 14: hlfsdkgo.service.ccpackage.PackageService.Fetch:input_type -> hlfsdkgo.service.ccpackage.PackageID
	3,  // 15: hlfsdkgo.service.ccpackage.PackageService.Create:output_type -> hlfsdkgo.service.ccpackage.PackageInfo
	3,  // 16: hlfsdkgo.service.ccpackage.PackageService.GetInfo:output_type -> hlfsdkgo.service.ccpackage.PackageInfo
	3,  // 17: hlfsdkgo.service.ccpackage.PackageService.GetOrCreate:output_type -> hlfsdkgo.service.ccpackage.PackageInfo
	4,  // 18: hlfsdkgo.service.ccpackage.PackageService.ListInfo:output_type -> hlfsdkgo.service.ccpackage.PackageInfoList
	10, // 19: hlfsdkgo.service.ccpackage.PackageService.GetDeploymentSpec:output_type -> protos.ChaincodeDeploymentSpec
	7,  // 20: hlfsdkgo.service.ccpackage.PackageService.Get:output_type -> hlfsdkgo.service.ccpackage.Package
	5,  // 21: hlfsdkgo.service.ccpackage.PackageService.Fetch:output_type -> hlfsdkgo.service.ccpackage.FileChunk
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_ccpackage_packages_proto_init() }
func file_ccpackage_packages_proto_init() {
	if File_ccpackage_packages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ccpackage_packages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccpackage_packages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccpackage_packages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccpackage_packages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccpackage_packages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccpackage_packages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ccpackage_packages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ccpackage_packages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ccpackage_packages_proto_goTypes,
		DependencyIndexes: file_ccpackage_packages_proto_depIdxs,
		EnumInfos:         file_ccpackage_packages_proto_enumTypes,
		MessageInfos:      file_ccpackage_packages_proto_msgTypes,
	}.Build()
	File_ccpackage_packages_proto = out.File
	file_ccpackage_packages_proto_rawDesc = nil
	file_ccpackage_packages_proto_goTypes = nil
	file_ccpackage_packages_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PackageServiceClient is the client API for PackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PackageServiceClient interface {
	Create(ctx context.Context, in *PackageSpec, opts ...grpc.CallOption) (*PackageInfo, error)
	GetInfo(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*PackageInfo, error)
	GetOrCreate(ctx context.Context, in *PackageSpec, opts ...grpc.CallOption) (*PackageInfo, error)
	ListInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PackageInfoList, error)
	GetDeploymentSpec(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*peer.ChaincodeDeploymentSpec, error)
	Get(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error)
	Fetch(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (PackageService_FetchClient, error)
}

type packageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageServiceClient(cc grpc.ClientConnInterface) PackageServiceClient {
	return &packageServiceClient{cc}
}

func (c *packageServiceClient) Create(ctx context.Context, in *PackageSpec, opts ...grpc.CallOption) (*PackageInfo, error) {
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.ccpackage.PackageService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetInfo(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*PackageInfo, error) {
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.ccpackage.PackageService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetOrCreate(ctx context.Context, in *PackageSpec, opts ...grpc.CallOption) (*PackageInfo, error) {
	out := new(PackageInfo)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.ccpackage.PackageService/GetOrCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) ListInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PackageInfoList, error) {
	out := new(PackageInfoList)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.ccpackage.PackageService/ListInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetDeploymentSpec(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*peer.ChaincodeDeploymentSpec, error) {
	out := new(peer.ChaincodeDeploymentSpec)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.ccpackage.PackageService/GetDeploymentSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) Get(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/hlfsdkgo.service.ccpackage.PackageService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) Fetch(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (PackageService_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PackageService_serviceDesc.Streams[0], "/hlfsdkgo.service.ccpackage.PackageService/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &packageServiceFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PackageService_FetchClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type packageServiceFetchClient struct {
	grpc.ClientStream
}

func (x *packageServiceFetchClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackageServiceServer is the server API for PackageService service.
type PackageServiceServer interface {
	Create(context.Context, *PackageSpec) (*PackageInfo, error)
	GetInfo(context.Context, *PackageID) (*PackageInfo, error)
	GetOrCreate(context.Context, *PackageSpec) (*PackageInfo, error)
	ListInfo(context.Context, *emptypb.Empty) (*PackageInfoList, error)
	GetDeploymentSpec(context.Context, *PackageID) (*peer.ChaincodeDeploymentSpec, error)
	Get(context.Context, *PackageID) (*Package, error)
	Fetch(*PackageID, PackageService_FetchServer) error
}

// UnimplementedPackageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPackageServiceServer struct {
}

func (*UnimplementedPackageServiceServer) Create(context.Context, *PackageSpec) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPackageServiceServer) GetInfo(context.Context, *PackageID) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedPackageServiceServer) GetOrCreate(context.Context, *PackageSpec) (*PackageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreate not implemented")
}
func (*UnimplementedPackageServiceServer) ListInfo(context.Context, *emptypb.Empty) (*PackageInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInfo not implemented")
}
func (*UnimplementedPackageServiceServer) GetDeploymentSpec(context.Context, *PackageID) (*peer.ChaincodeDeploymentSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentSpec not implemented")
}
func (*UnimplementedPackageServiceServer) Get(context.Context, *PackageID) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPackageServiceServer) Fetch(*PackageID, PackageService_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}

func RegisterPackageServiceServer(s *grpc.Server, srv PackageServiceServer) {
	s.RegisterService(&_PackageService_serviceDesc, srv)
}

func _PackageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.ccpackage.PackageService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).Create(ctx, req.(*PackageSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.ccpackage.PackageService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetInfo(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetOrCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetOrCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.ccpackage.PackageService/GetOrCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetOrCreate(ctx, req.(*PackageSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_ListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.ccpackage.PackageService/ListInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ListInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetDeploymentSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetDeploymentSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.ccpackage.PackageService/GetDeploymentSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetDeploymentSpec(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdkgo.service.ccpackage.PackageService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).Get(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PackageID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackageServiceServer).Fetch(m, &packageServiceFetchServer{stream})
}

type PackageService_FetchServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type packageServiceFetchServer struct {
	grpc.ServerStream
}

func (x *packageServiceFetchServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _PackageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdkgo.service.ccpackage.PackageService",
	HandlerType: (*PackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PackageService_Create_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _PackageService_GetInfo_Handler,
		},
		{
			MethodName: "GetOrCreate",
			Handler:    _PackageService_GetOrCreate_Handler,
		},
		{
			MethodName: "ListInfo",
			Handler:    _PackageService_ListInfo_Handler,
		},
		{
			MethodName: "GetDeploymentSpec",
			Handler:    _PackageService_GetDeploymentSpec_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PackageService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _PackageService_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ccpackage/packages.proto",
}
