// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: channels/channels.proto

package channels

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChannelMultiError, or nil if none found.
func (m *Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Height

	// no validation rules for Status

	if len(errors) > 0 {
		return ChannelMultiError(errors)
	}

	return nil
}

// ChannelMultiError is an error wrapping multiple validation errors returned
// by Channel.ValidateAll() if the designated constraints aren't met.
type ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelMultiError) AllErrors() []error { return m }

// ChannelValidationError is the validation error returned by Channel.Validate
// if the designated constraints aren't met.
type ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelValidationError) ErrorName() string { return "ChannelValidationError" }

// Error satisfies the builtin error interface
func (e ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelValidationError{}

// Validate checks the field values on Channels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Channels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channels with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelsMultiError, or nil
// if none found.
func (m *Channels) ValidateAll() error {
	return m.validate(true)
}

func (m *Channels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SystemChannel

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelsValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChannelsMultiError(errors)
	}

	return nil
}

// ChannelsMultiError is an error wrapping multiple validation errors returned
// by Channels.ValidateAll() if the designated constraints aren't met.
type ChannelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelsMultiError) AllErrors() []error { return m }

// ChannelsValidationError is the validation error returned by
// Channels.Validate if the designated constraints aren't met.
type ChannelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelsValidationError) ErrorName() string { return "ChannelsValidationError" }

// Error satisfies the builtin error interface
func (e ChannelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelsValidationError{}

// Validate checks the field values on ChannelConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelConfigMultiError, or
// nil if none found.
func (m *ChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetBatchSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "BatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "BatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "BatchSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BatchTimeout

	for idx, item := range m.GetEtcdraftNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetEtcdraftOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "EtcdraftOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelConfigValidationError{
					field:  "EtcdraftOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtcdraftOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelConfigValidationError{
				field:  "EtcdraftOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Height

	// no validation rules for Status

	if len(errors) > 0 {
		return ChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfigMultiError is an error wrapping multiple validation errors
// returned by ChannelConfig.ValidateAll() if the designated constraints
// aren't met.
type ChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfigValidationError is the validation error returned by
// ChannelConfig.Validate if the designated constraints aren't met.
type ChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfigValidationError) ErrorName() string { return "ChannelConfigValidationError" }

// Error satisfies the builtin error interface
func (e ChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfigValidationError{}

// Validate checks the field values on ChannelOrganizationConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelOrganizationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelOrganizationConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelOrganizationConfigMultiError, or nil if none found.
func (m *ChannelOrganizationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelOrganizationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetBatchSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelOrganizationConfigValidationError{
					field:  "BatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelOrganizationConfigValidationError{
					field:  "BatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelOrganizationConfigValidationError{
				field:  "BatchSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BatchTimeout

	for idx, item := range m.GetEtcdraftNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelOrganizationConfigValidationError{
						field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelOrganizationConfigValidationError{
						field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelOrganizationConfigValidationError{
					field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetEtcdraftOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelOrganizationConfigValidationError{
					field:  "EtcdraftOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelOrganizationConfigValidationError{
					field:  "EtcdraftOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtcdraftOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelOrganizationConfigValidationError{
				field:  "EtcdraftOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetOrganizations()) < 1 {
		err := ChannelOrganizationConfigValidationError{
			field:  "Organizations",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelOrganizationConfigValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelOrganizationConfigValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelOrganizationConfigValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Height

	// no validation rules for Status

	if len(errors) > 0 {
		return ChannelOrganizationConfigMultiError(errors)
	}

	return nil
}

// ChannelOrganizationConfigMultiError is an error wrapping multiple validation
// errors returned by ChannelOrganizationConfig.ValidateAll() if the
// designated constraints aren't met.
type ChannelOrganizationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelOrganizationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelOrganizationConfigMultiError) AllErrors() []error { return m }

// ChannelOrganizationConfigValidationError is the validation error returned by
// ChannelOrganizationConfig.Validate if the designated constraints aren't met.
type ChannelOrganizationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelOrganizationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelOrganizationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelOrganizationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelOrganizationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelOrganizationConfigValidationError) ErrorName() string {
	return "ChannelOrganizationConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelOrganizationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelOrganizationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelOrganizationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelOrganizationConfigValidationError{}

// Validate checks the field values on Organization with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Organization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Organization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganizationMultiError, or
// nil if none found.
func (m *Organization) ValidateAll() error {
	return m.validate(true)
}

func (m *Organization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMspId()) < 1 {
		err := OrganizationValidationError{
			field:  "MspId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCert()) < 1 {
		err := OrganizationValidationError{
			field:  "Cert",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CertContent

	if len(m.GetCaCert()) < 1 {
		err := OrganizationValidationError{
			field:  "CaCert",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CaCertContent

	if len(m.GetAnchorPeers()) < 1 {
		err := OrganizationValidationError{
			field:  "AnchorPeers",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrganizationMultiError(errors)
	}

	return nil
}

// OrganizationMultiError is an error wrapping multiple validation errors
// returned by Organization.ValidateAll() if the designated constraints aren't met.
type OrganizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationMultiError) AllErrors() []error { return m }

// OrganizationValidationError is the validation error returned by
// Organization.Validate if the designated constraints aren't met.
type OrganizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationValidationError) ErrorName() string { return "OrganizationValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationValidationError{}

// Validate checks the field values on OrganizationDetailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationDetailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationDetailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationDetailedMultiError, or nil if none found.
func (m *OrganizationDetailed) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationDetailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMsp() == nil {
		err := OrganizationDetailedValidationError{
			field:  "Msp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMsp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationDetailedValidationError{
					field:  "Msp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationDetailedValidationError{
					field:  "Msp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationDetailedValidationError{
				field:  "Msp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAnchorPeers() == nil {
		err := OrganizationDetailedValidationError{
			field:  "AnchorPeers",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAnchorPeers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationDetailedValidationError{
					field:  "AnchorPeers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationDetailedValidationError{
					field:  "AnchorPeers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnchorPeers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationDetailedValidationError{
				field:  "AnchorPeers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPolicies()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationDetailedValidationError{
					field:  "Policies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationDetailedValidationError{
					field:  "Policies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicies()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationDetailedValidationError{
				field:  "Policies",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganizationDetailedMultiError(errors)
	}

	return nil
}

// OrganizationDetailedMultiError is an error wrapping multiple validation
// errors returned by OrganizationDetailed.ValidateAll() if the designated
// constraints aren't met.
type OrganizationDetailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationDetailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationDetailedMultiError) AllErrors() []error { return m }

// OrganizationDetailedValidationError is the validation error returned by
// OrganizationDetailed.Validate if the designated constraints aren't met.
type OrganizationDetailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationDetailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationDetailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationDetailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationDetailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationDetailedValidationError) ErrorName() string {
	return "OrganizationDetailedValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationDetailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationDetailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationDetailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationDetailedValidationError{}

// Validate checks the field values on ChannelPolicies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChannelPolicies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelPolicies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelPoliciesMultiError, or nil if none found.
func (m *ChannelPolicies) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelPolicies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdmins()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelPoliciesValidationError{
					field:  "Admins",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelPoliciesValidationError{
					field:  "Admins",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdmins()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelPoliciesValidationError{
				field:  "Admins",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReaders()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelPoliciesValidationError{
					field:  "Readers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelPoliciesValidationError{
					field:  "Readers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReaders()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelPoliciesValidationError{
				field:  "Readers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWriters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelPoliciesValidationError{
					field:  "Writers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelPoliciesValidationError{
					field:  "Writers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWriters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelPoliciesValidationError{
				field:  "Writers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChannelPoliciesMultiError(errors)
	}

	return nil
}

// ChannelPoliciesMultiError is an error wrapping multiple validation errors
// returned by ChannelPolicies.ValidateAll() if the designated constraints
// aren't met.
type ChannelPoliciesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelPoliciesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelPoliciesMultiError) AllErrors() []error { return m }

// ChannelPoliciesValidationError is the validation error returned by
// ChannelPolicies.Validate if the designated constraints aren't met.
type ChannelPoliciesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelPoliciesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelPoliciesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelPoliciesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelPoliciesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelPoliciesValidationError) ErrorName() string { return "ChannelPoliciesValidationError" }

// Error satisfies the builtin error interface
func (e ChannelPoliciesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelPolicies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelPoliciesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelPoliciesValidationError{}

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetBatchSize() == nil {
		err := CreateRequestValidationError{
			field:  "BatchSize",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBatchSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "BatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "BatchSize",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestValidationError{
				field:  "BatchSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetBatchTimeout()) < 1 {
		err := CreateRequestValidationError{
			field:  "BatchTimeout",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetEtcdraftNodes()) < 1 {
		err := CreateRequestValidationError{
			field:  "EtcdraftNodes",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetEtcdraftNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRequestValidationError{
						field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRequestValidationError{
						field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRequestValidationError{
					field:  fmt.Sprintf("EtcdraftNodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetEndpoints()) < 1 {
		err := CreateRequestValidationError{
			field:  "Endpoints",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEtcdraftOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "EtcdraftOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "EtcdraftOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtcdraftOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestValidationError{
				field:  "EtcdraftOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOrdererMsp() == nil {
		err := CreateRequestValidationError{
			field:  "OrdererMsp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrdererMsp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "OrdererMsp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestValidationError{
					field:  "OrdererMsp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrdererMsp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestValidationError{
				field:  "OrdererMsp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetOrganizations()) < 1 {
		err := CreateRequestValidationError{
			field:  "Organizations",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRequestValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRequestValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRequestValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on Consenter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Consenter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Consenter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConsenterMultiError, or nil
// if none found.
func (m *Consenter) ValidateAll() error {
	return m.validate(true)
}

func (m *Consenter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := ConsenterValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClientTlsCert()) < 1 {
		err := ConsenterValidationError{
			field:  "ClientTlsCert",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetServerTlsCert()) < 1 {
		err := ConsenterValidationError{
			field:  "ServerTlsCert",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConsenterMultiError(errors)
	}

	return nil
}

// ConsenterMultiError is an error wrapping multiple validation errors returned
// by Consenter.ValidateAll() if the designated constraints aren't met.
type ConsenterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsenterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsenterMultiError) AllErrors() []error { return m }

// ConsenterValidationError is the validation error returned by
// Consenter.Validate if the designated constraints aren't met.
type ConsenterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsenterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsenterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsenterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsenterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsenterValidationError) ErrorName() string { return "ConsenterValidationError" }

// Error satisfies the builtin error interface
func (e ConsenterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsenter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsenterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsenterValidationError{}

// Validate checks the field values on OrgMSPConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgMSPConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgMSPConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgMSPConfigMultiError, or
// nil if none found.
func (m *OrgMSPConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgMSPConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMSP() == nil {
		err := OrgMSPConfigValidationError{
			field:  "MSP",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMSP()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgMSPConfigValidationError{
					field:  "MSP",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgMSPConfigValidationError{
					field:  "MSP",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMSP()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgMSPConfigValidationError{
				field:  "MSP",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetAnchorPeers()) < 1 {
		err := OrgMSPConfigValidationError{
			field:  "AnchorPeers",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrgMSPConfigMultiError(errors)
	}

	return nil
}

// OrgMSPConfigMultiError is an error wrapping multiple validation errors
// returned by OrgMSPConfig.ValidateAll() if the designated constraints aren't met.
type OrgMSPConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgMSPConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgMSPConfigMultiError) AllErrors() []error { return m }

// OrgMSPConfigValidationError is the validation error returned by
// OrgMSPConfig.Validate if the designated constraints aren't met.
type OrgMSPConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgMSPConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgMSPConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgMSPConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgMSPConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgMSPConfigValidationError) ErrorName() string { return "OrgMSPConfigValidationError" }

// Error satisfies the builtin error interface
func (e OrgMSPConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgMSPConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgMSPConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgMSPConfigValidationError{}

// Validate checks the field values on Peer with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Peer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Peer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PeerMultiError, or nil if none found.
func (m *Peer) ValidateAll() error {
	return m.validate(true)
}

func (m *Peer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for MspId

	if len(errors) > 0 {
		return PeerMultiError(errors)
	}

	return nil
}

// PeerMultiError is an error wrapping multiple validation errors returned by
// Peer.ValidateAll() if the designated constraints aren't met.
type PeerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerMultiError) AllErrors() []error { return m }

// PeerValidationError is the validation error returned by Peer.Validate if the
// designated constraints aren't met.
type PeerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerValidationError) ErrorName() string { return "PeerValidationError" }

// Error satisfies the builtin error interface
func (e PeerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerValidationError{}

// Validate checks the field values on MSPConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MSPConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MSPConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MSPConfigMultiError, or nil
// if none found.
func (m *MSPConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MSPConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := MSPConfigValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRootCerts()) < 1 {
		err := MSPConfigValidationError{
			field:  "RootCerts",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrganizationalUnitIdentifiers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MSPConfigValidationError{
						field:  fmt.Sprintf("OrganizationalUnitIdentifiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MSPConfigValidationError{
						field:  fmt.Sprintf("OrganizationalUnitIdentifiers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MSPConfigValidationError{
					field:  fmt.Sprintf("OrganizationalUnitIdentifiers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFabricNodeOus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MSPConfigValidationError{
					field:  "FabricNodeOus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MSPConfigValidationError{
					field:  "FabricNodeOus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFabricNodeOus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MSPConfigValidationError{
				field:  "FabricNodeOus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MSPConfigMultiError(errors)
	}

	return nil
}

// MSPConfigMultiError is an error wrapping multiple validation errors returned
// by MSPConfig.ValidateAll() if the designated constraints aren't met.
type MSPConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MSPConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MSPConfigMultiError) AllErrors() []error { return m }

// MSPConfigValidationError is the validation error returned by
// MSPConfig.Validate if the designated constraints aren't met.
type MSPConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MSPConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MSPConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MSPConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MSPConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MSPConfigValidationError) ErrorName() string { return "MSPConfigValidationError" }

// Error satisfies the builtin error interface
func (e MSPConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMSPConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MSPConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MSPConfigValidationError{}
