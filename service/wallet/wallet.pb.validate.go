// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wallet/wallet.proto

package wallet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Identity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Identity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Identity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdentityMultiError, or nil
// if none found.
func (m *Identity) ValidateAll() error {
	return m.validate(true)
}

func (m *Identity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := IdentityValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMspId()) < 1 {
		err := IdentityValidationError{
			field:  "MspId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Cert

	// no validation rules for Key

	if len(errors) > 0 {
		return IdentityMultiError(errors)
	}

	return nil
}

// IdentityMultiError is an error wrapping multiple validation errors returned
// by Identity.ValidateAll() if the designated constraints aren't met.
type IdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityMultiError) AllErrors() []error { return m }

// IdentityValidationError is the validation error returned by
// Identity.Validate if the designated constraints aren't met.
type IdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityValidationError) ErrorName() string { return "IdentityValidationError" }

// Error satisfies the builtin error interface
func (e IdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityValidationError{}

// Validate checks the field values on IdentityWithPassword with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdentityWithPassword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityWithPassword with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityWithPasswordMultiError, or nil if none found.
func (m *IdentityWithPassword) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityWithPassword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := IdentityWithPasswordValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMspId()) < 1 {
		err := IdentityWithPasswordValidationError{
			field:  "MspId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Cert

	// no validation rules for Key

	// no validation rules for Password

	if len(errors) > 0 {
		return IdentityWithPasswordMultiError(errors)
	}

	return nil
}

// IdentityWithPasswordMultiError is an error wrapping multiple validation
// errors returned by IdentityWithPassword.ValidateAll() if the designated
// constraints aren't met.
type IdentityWithPasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityWithPasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityWithPasswordMultiError) AllErrors() []error { return m }

// IdentityWithPasswordValidationError is the validation error returned by
// IdentityWithPassword.Validate if the designated constraints aren't met.
type IdentityWithPasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityWithPasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityWithPasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityWithPasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityWithPasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityWithPasswordValidationError) ErrorName() string {
	return "IdentityWithPasswordValidationError"
}

// Error satisfies the builtin error interface
func (e IdentityWithPasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityWithPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityWithPasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityWithPasswordValidationError{}

// Validate checks the field values on IdentityPassword with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdentityPassword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityPassword with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityPasswordMultiError, or nil if none found.
func (m *IdentityPassword) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityPassword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := IdentityPasswordValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := IdentityPasswordValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdentityPasswordMultiError(errors)
	}

	return nil
}

// IdentityPasswordMultiError is an error wrapping multiple validation errors
// returned by IdentityPassword.ValidateAll() if the designated constraints
// aren't met.
type IdentityPasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityPasswordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityPasswordMultiError) AllErrors() []error { return m }

// IdentityPasswordValidationError is the validation error returned by
// IdentityPassword.Validate if the designated constraints aren't met.
type IdentityPasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityPasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityPasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityPasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityPasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityPasswordValidationError) ErrorName() string { return "IdentityPasswordValidationError" }

// Error satisfies the builtin error interface
func (e IdentityPasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityPasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityPasswordValidationError{}

// Validate checks the field values on IdentityInWallet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdentityInWallet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityInWallet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityInWalletMultiError, or nil if none found.
func (m *IdentityInWallet) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityInWallet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := IdentityInWalletValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMspId()) < 1 {
		err := IdentityInWalletValidationError{
			field:  "MspId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Cert

	// no validation rules for Key

	// no validation rules for WithPassword

	if len(errors) > 0 {
		return IdentityInWalletMultiError(errors)
	}

	return nil
}

// IdentityInWalletMultiError is an error wrapping multiple validation errors
// returned by IdentityInWallet.ValidateAll() if the designated constraints
// aren't met.
type IdentityInWalletMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityInWalletMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityInWalletMultiError) AllErrors() []error { return m }

// IdentityInWalletValidationError is the validation error returned by
// IdentityInWallet.Validate if the designated constraints aren't met.
type IdentityInWalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityInWalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityInWalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityInWalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityInWalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityInWalletValidationError) ErrorName() string { return "IdentityInWalletValidationError" }

// Error satisfies the builtin error interface
func (e IdentityInWalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityInWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityInWalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityInWalletValidationError{}

// Validate checks the field values on IdentityInWalletText with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdentityInWalletText) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityInWalletText with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityInWalletTextMultiError, or nil if none found.
func (m *IdentityInWalletText) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityInWalletText) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := IdentityInWalletTextValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMspId()) < 1 {
		err := IdentityInWalletTextValidationError{
			field:  "MspId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Cert

	// no validation rules for CertContent

	// no validation rules for Key

	// no validation rules for WithPassword

	if len(errors) > 0 {
		return IdentityInWalletTextMultiError(errors)
	}

	return nil
}

// IdentityInWalletTextMultiError is an error wrapping multiple validation
// errors returned by IdentityInWalletText.ValidateAll() if the designated
// constraints aren't met.
type IdentityInWalletTextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityInWalletTextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityInWalletTextMultiError) AllErrors() []error { return m }

// IdentityInWalletTextValidationError is the validation error returned by
// IdentityInWalletText.Validate if the designated constraints aren't met.
type IdentityInWalletTextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityInWalletTextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityInWalletTextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityInWalletTextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityInWalletTextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityInWalletTextValidationError) ErrorName() string {
	return "IdentityInWalletTextValidationError"
}

// Error satisfies the builtin error interface
func (e IdentityInWalletTextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityInWalletText.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityInWalletTextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityInWalletTextValidationError{}

// Validate checks the field values on IdentityLabel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdentityLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityLabel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdentityLabelMultiError, or
// nil if none found.
func (m *IdentityLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	if len(errors) > 0 {
		return IdentityLabelMultiError(errors)
	}

	return nil
}

// IdentityLabelMultiError is an error wrapping multiple validation errors
// returned by IdentityLabel.ValidateAll() if the designated constraints
// aren't met.
type IdentityLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityLabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityLabelMultiError) AllErrors() []error { return m }

// IdentityLabelValidationError is the validation error returned by
// IdentityLabel.Validate if the designated constraints aren't met.
type IdentityLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityLabelValidationError) ErrorName() string { return "IdentityLabelValidationError" }

// Error satisfies the builtin error interface
func (e IdentityLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityLabelValidationError{}

// Validate checks the field values on IdentityLabels with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdentityLabels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityLabels with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdentityLabelsMultiError,
// or nil if none found.
func (m *IdentityLabels) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityLabels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IdentityLabelsMultiError(errors)
	}

	return nil
}

// IdentityLabelsMultiError is an error wrapping multiple validation errors
// returned by IdentityLabels.ValidateAll() if the designated constraints
// aren't met.
type IdentityLabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityLabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityLabelsMultiError) AllErrors() []error { return m }

// IdentityLabelsValidationError is the validation error returned by
// IdentityLabels.Validate if the designated constraints aren't met.
type IdentityLabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityLabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityLabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityLabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityLabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityLabelsValidationError) ErrorName() string { return "IdentityLabelsValidationError" }

// Error satisfies the builtin error interface
func (e IdentityLabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityLabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityLabelsValidationError{}
