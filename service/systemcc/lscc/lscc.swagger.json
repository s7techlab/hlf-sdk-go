{
  "swagger": "2.0",
  "info": {
    "title": "systemcc/lscc/lscc.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/lscc/chaincodes": {
      "get": {
        "summary": "GetInstalledChaincodes returns list of installed chaincodes on peer",
        "operationId": "LSCCService_GetInstalledChaincodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protosChaincodeQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "LSCCService"
        ]
      },
      "post": {
        "summary": "Install allows installing chaincode using deployment specification",
        "operationId": "LSCCService_Install",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protosChaincodeDeploymentSpec"
            }
          }
        ],
        "tags": [
          "LSCCService"
        ]
      }
    },
    "/lscc/chaincodes/{channel}": {
      "get": {
        "summary": "GetChaincodes returns list of instantiated chaincodes on channel",
        "operationId": "LSCCService_GetChaincodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protosChaincodeQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LSCCService"
        ]
      },
      "post": {
        "summary": "Deploy allows instantiating or upgrade chaincode if instantiated\nCurrently, deploy method is not canonical as lscc implementation, but currently we need to get full proposal, and it's response to broadcast to orderer",
        "operationId": "LSCCService_Deploy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protosResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lsccDeployRequest"
            }
          }
        ],
        "tags": [
          "LSCCService"
        ]
      }
    },
    "/lscc/chaincodes/{channel}/{chaincode}": {
      "get": {
        "summary": "GetChaincodeData returns information about instantiated chaincode on target channel",
        "operationId": "LSCCService_GetChaincodeData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protosChaincodeData"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "chaincode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LSCCService"
        ]
      }
    },
    "/lscc/chaincodes/{channel}/{chaincode}/deployment-spec": {
      "get": {
        "summary": "GetDeploymentSpec returns spec for installed chaincode",
        "operationId": "LSCCService_GetDeploymentSpec",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protosChaincodeDeploymentSpec"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "chaincode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LSCCService"
        ]
      }
    }
  },
  "definitions": {
    "MSPPrincipalClassification": {
      "type": "string",
      "enum": [
        "ROLE",
        "ORGANIZATION_UNIT",
        "IDENTITY",
        "ANONYMITY",
        "COMBINED"
      ],
      "default": "ROLE",
      "description": " - ORGANIZATION_UNIT: one of a member of MSP network, and the one of an\nadministrator of an MSP network\n - IDENTITY: groupping of entities, per MSP affiliation\nE.g., this can well be represented by an MSP's\nOrganization unit\n - ANONYMITY: identity\n - COMBINED: an identity to be anonymous or nominal."
    },
    "SignaturePolicyNOutOf": {
      "type": "object",
      "properties": {
        "n": {
          "type": "integer",
          "format": "int32"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonSignaturePolicy"
          }
        }
      }
    },
    "commonApplicationPolicy": {
      "type": "object",
      "properties": {
        "signature_policy": {
          "$ref": "#/definitions/commonSignaturePolicyEnvelope",
          "title": "SignaturePolicy type is used if the policy is specified as\na combination (using threshold gates) of signatures from MSP\nprincipals"
        },
        "channel_config_policy_reference": {
          "type": "string",
          "title": "ChannelConfigPolicyReference is used when the policy is\nspecified as a string that references a policy defined in\nthe configuration of the channel"
        }
      },
      "description": "ApplicationPolicy captures the diffenrent policy types that\nare set and evaluted at the application level."
    },
    "commonCollectionConfig": {
      "type": "object",
      "properties": {
        "static_collection_config": {
          "$ref": "#/definitions/commonStaticCollectionConfig"
        }
      },
      "description": "CollectionConfig defines the configuration of a collection object;\nit currently contains a single, static type.\nDynamic collections are deferred."
    },
    "commonCollectionConfigPackage": {
      "type": "object",
      "properties": {
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonCollectionConfig"
          }
        }
      },
      "title": "CollectionConfigPackage represents an array of CollectionConfig\nmessages; the extra struct is required because repeated oneof is\nforbidden by the protobuf syntax"
    },
    "commonCollectionPolicyConfig": {
      "type": "object",
      "properties": {
        "signature_policy": {
          "$ref": "#/definitions/commonSignaturePolicyEnvelope",
          "description": "Initially, only a signature policy is supported."
        }
      },
      "description": "Collection policy configuration. Initially, the configuration can only\ncontain a SignaturePolicy. In the future, the SignaturePolicy may be a\nmore general Policy. Instead of containing the actual policy, the\nconfiguration may in the future contain a string reference to a policy."
    },
    "commonMSPPrincipal": {
      "type": "object",
      "properties": {
        "principal_classification": {
          "$ref": "#/definitions/MSPPrincipalClassification",
          "description": "Classification describes the way that one should process\nPrincipal. An Classification value of \"ByOrganizationUnit\" reflects\nthat \"Principal\" contains the name of an organization this MSP\nhandles. A Classification value \"ByIdentity\" means that\n\"Principal\" contains a specific identity. Default value\ndenotes that Principal contains one of the groups by\ndefault supported by all MSPs (\"admin\" or \"member\")."
        },
        "principal": {
          "type": "string",
          "format": "byte",
          "description": "Principal completes the policy principal definition. For the default\nprincipal types, Principal can be either \"Admin\" or \"Member\".\nFor the ByOrganizationUnit/ByIdentity values of Classification,\nPolicyPrincipal acquires its value from an organization unit or\nidentity, respectively.\nFor the Combined Classification type, the Principal is a marshalled\nCombinedPrincipal."
        }
      },
      "title": "MSPPrincipal aims to represent an MSP-centric set of identities.\nIn particular, this structure allows for definition of\n - a group of identities that are member of the same MSP\n - a group of identities that are member of the same organization unit\n   in the same MSP\n - a group of identities that are administering a specific MSP\n - a specific identity\nExpressing these groups is done given two fields of the fields below\n - Classification, that defines the type of classification of identities\n   in an MSP this principal would be defined on; Classification can take\n   three values:\n    (i)  ByMSPRole: that represents a classification of identities within\n         MSP based on one of the two pre-defined MSP rules, \"member\" and \"admin\"\n    (ii) ByOrganizationUnit: that represents a classification of identities\n         within MSP based on the organization unit an identity belongs to\n    (iii)ByIdentity that denotes that MSPPrincipal is mapped to a single\n         identity/certificate; this would mean that the Principal bytes\n         message"
    },
    "commonSignaturePolicy": {
      "type": "object",
      "properties": {
        "signed_by": {
          "type": "integer",
          "format": "int32"
        },
        "n_out_of": {
          "$ref": "#/definitions/SignaturePolicyNOutOf"
        }
      },
      "title": "SignaturePolicy is a recursive message structure which defines a featherweight DSL for describing\npolicies which are more complicated than 'exactly this signature'.  The NOutOf operator is sufficent\nto express AND as well as OR, as well as of course N out of the following M policies\nSignedBy implies that the signature is from a valid certificate which is signed by the trusted\nauthority specified in the bytes.  This will be the certificate itself for a self-signed certificate\nand will be the CA for more traditional certificates"
    },
    "commonSignaturePolicyEnvelope": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "rule": {
          "$ref": "#/definitions/commonSignaturePolicy"
        },
        "identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonMSPPrincipal"
          }
        }
      },
      "title": "SignaturePolicyEnvelope wraps a SignaturePolicy and includes a version for future enhancements"
    },
    "commonStaticCollectionConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "the name of the collection inside the denoted chaincode"
        },
        "member_orgs_policy": {
          "$ref": "#/definitions/commonCollectionPolicyConfig",
          "title": "a reference to a policy residing / managed in the config block\nto define which orgs have access to this collection’s private data"
        },
        "required_peer_count": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of peers private data will be sent to upon\nendorsement. The endorsement would fail if dissemination to at least\nthis number of peers is not achieved."
        },
        "maximum_peer_count": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of peers that private data will be sent to\nupon endorsement. This number has to be bigger than required_peer_count."
        },
        "block_to_live": {
          "type": "string",
          "format": "uint64",
          "title": "The number of blocks after which the collection data expires.\nFor instance if the value is set to 10, a key last modified by block number 100\nwill be purged at block number 111. A zero value is treated same as MaxUint64"
        },
        "member_only_read": {
          "type": "boolean",
          "title": "The member only read access denotes whether only collection member clients\ncan read the private data (if set to true), or even non members can\nread the data (if set to false, for example if you want to implement more granular\naccess logic in the chaincode)"
        },
        "member_only_write": {
          "type": "boolean",
          "title": "The member only write access denotes whether only collection member clients\ncan write the private data (if set to true), or even non members can\nwrite the data (if set to false, for example if you want to implement more granular\naccess logic in the chaincode)"
        },
        "endorsement_policy": {
          "$ref": "#/definitions/commonApplicationPolicy",
          "title": "a reference to a policy residing / managed in the config block\nto define the endorsement policy for this collection"
        }
      },
      "description": "StaticCollectionConfig constitutes the configuration parameters of a\nstatic collection object. Static collections are collections that are\nknown at chaincode instantiation time, and that cannot be changed.\nDynamic collections are deferred."
    },
    "lsccDeployRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "deployment_spec": {
          "$ref": "#/definitions/protosChaincodeDeploymentSpec"
        },
        "policy": {
          "$ref": "#/definitions/commonSignaturePolicyEnvelope"
        },
        "ESCC": {
          "type": "string"
        },
        "VSCC": {
          "type": "string"
        },
        "collection_config": {
          "$ref": "#/definitions/commonCollectionConfigPackage"
        },
        "transient": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protosChaincodeData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the chaincode"
        },
        "version": {
          "type": "string",
          "title": "Version of the chaincode"
        },
        "escc": {
          "type": "string",
          "title": "Escc for the chaincode instance"
        },
        "vscc": {
          "type": "string",
          "title": "Vscc for the chaincode instance"
        },
        "policy": {
          "$ref": "#/definitions/commonSignaturePolicyEnvelope",
          "title": "Policy endorsement policy for the chaincode instance"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Data data specific to the package"
        },
        "id": {
          "type": "string",
          "format": "byte",
          "title": "Id of the chaincode that's the unique fingerprint for the CC This is not\ncurrently used anywhere but serves as a good eyecatcher"
        },
        "instantiation_policy": {
          "$ref": "#/definitions/commonSignaturePolicyEnvelope",
          "title": "InstantiationPolicy for the chaincode"
        }
      },
      "title": "ChaincodeData defines the datastructure for chaincodes to be serialized by proto\nType provides an additional check by directing to use a specific package after instantiation\nData is Type specific (see CDSPackage and SignedCDSPackage)"
    },
    "protosChaincodeDeploymentSpec": {
      "type": "object",
      "properties": {
        "chaincode_spec": {
          "$ref": "#/definitions/protosChaincodeSpec"
        },
        "code_package": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Specify the deployment of a chaincode.\nTODO: Define `codePackage`."
    },
    "protosChaincodeID": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "deploy transaction will use the path"
        },
        "name": {
          "type": "string",
          "title": "all other requests will use the name (really a hashcode) generated by\nthe deploy transaction"
        },
        "version": {
          "type": "string",
          "title": "user friendly version name for the chaincode"
        }
      },
      "title": "ChaincodeID contains the path as specified by the deploy transaction\nthat created it as well as the hashCode that is generated by the\nsystem for the path. From the user level (ie, CLI, REST API and so on)\ndeploy transaction is expected to provide the path and other requests\nare expected to provide the hashCode. The other value will be ignored.\nInternally, the structure could contain both values. For instance, the\nhashCode will be set when first generated using the path"
    },
    "protosChaincodeInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "path": {
          "type": "string",
          "title": "the path as specified by the install/instantiate transaction"
        },
        "input": {
          "type": "string",
          "description": "the chaincode function upon instantiation and its arguments. This will be\nblank if the query is returning information about installed chaincodes."
        },
        "escc": {
          "type": "string",
          "description": "the name of the ESCC for this chaincode. This will be\nblank if the query is returning information about installed chaincodes."
        },
        "vscc": {
          "type": "string",
          "description": "the name of the VSCC for this chaincode. This will be\nblank if the query is returning information about installed chaincodes."
        },
        "id": {
          "type": "string",
          "format": "byte",
          "title": "the chaincode unique id.\ncomputed as: H(\n               H(name || version) ||\n               H(CodePackage)\n             )"
        }
      },
      "title": "ChaincodeInfo contains general information about an installed/instantiated\nchaincode"
    },
    "protosChaincodeInput": {
      "type": "object",
      "properties": {
        "args": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "decorations": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "is_init": {
          "type": "boolean",
          "description": "is_init is used for the application to signal that an invocation is to be routed\nto the legacy 'Init' function for compatibility with chaincodes which handled\nInit in the old way.  New applications should manage their initialized state\nthemselves."
        }
      },
      "description": "Carries the chaincode function and its arguments.\nUnmarshalJSON in transaction.go converts the string-based REST/JSON input to\nthe []byte-based current ChaincodeInput structure."
    },
    "protosChaincodeQueryResponse": {
      "type": "object",
      "properties": {
        "chaincodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protosChaincodeInfo"
          }
        }
      },
      "title": "ChaincodeQueryResponse returns information about each chaincode that pertains\nto a query in lscc.go, such as GetChaincodes (returns all chaincodes\ninstantiated on a channel), and GetInstalledChaincodes (returns all chaincodes\ninstalled on a peer)"
    },
    "protosChaincodeSpec": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/protosChaincodeSpecType"
        },
        "chaincode_id": {
          "$ref": "#/definitions/protosChaincodeID"
        },
        "input": {
          "$ref": "#/definitions/protosChaincodeInput"
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Carries the chaincode specification. This is the actual metadata required for\ndefining a chaincode."
    },
    "protosChaincodeSpecType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "GOLANG",
        "NODE",
        "CAR",
        "JAVA"
      ],
      "default": "UNDEFINED"
    },
    "protosResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "A status code that should follow the HTTP status codes."
        },
        "message": {
          "type": "string",
          "description": "A message associated with the response code."
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "description": "A payload that can be used to include metadata with this response."
        }
      },
      "description": "A response with a representation similar to an HTTP response that can\nbe used within another message."
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
