// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: systemcc/lscc/lscc.proto

package lscc

import (
	context "context"
	common "github.com/hyperledger/fabric-protos-go/common"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetChaincodeDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel   string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Chaincode string `protobuf:"bytes,2,opt,name=chaincode,proto3" json:"chaincode,omitempty"`
}

func (x *GetChaincodeDataRequest) Reset() {
	*x = GetChaincodeDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lscc_lscc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChaincodeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChaincodeDataRequest) ProtoMessage() {}

func (x *GetChaincodeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lscc_lscc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChaincodeDataRequest.ProtoReflect.Descriptor instead.
func (*GetChaincodeDataRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lscc_lscc_proto_rawDescGZIP(), []int{0}
}

func (x *GetChaincodeDataRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetChaincodeDataRequest) GetChaincode() string {
	if x != nil {
		return x.Chaincode
	}
	return ""
}

type GetChaincodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *GetChaincodesRequest) Reset() {
	*x = GetChaincodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lscc_lscc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChaincodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChaincodesRequest) ProtoMessage() {}

func (x *GetChaincodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lscc_lscc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChaincodesRequest.ProtoReflect.Descriptor instead.
func (*GetChaincodesRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lscc_lscc_proto_rawDescGZIP(), []int{1}
}

func (x *GetChaincodesRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type GetDeploymentSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel   string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Chaincode string `protobuf:"bytes,2,opt,name=chaincode,proto3" json:"chaincode,omitempty"`
}

func (x *GetDeploymentSpecRequest) Reset() {
	*x = GetDeploymentSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lscc_lscc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentSpecRequest) ProtoMessage() {}

func (x *GetDeploymentSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lscc_lscc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentSpecRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentSpecRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lscc_lscc_proto_rawDescGZIP(), []int{2}
}

func (x *GetDeploymentSpecRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetDeploymentSpecRequest) GetChaincode() string {
	if x != nil {
		return x.Chaincode
	}
	return ""
}

type DeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel          string                          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	DeploymentSpec   *peer.ChaincodeDeploymentSpec   `protobuf:"bytes,2,opt,name=deployment_spec,json=deploymentSpec,proto3" json:"deployment_spec,omitempty"`
	Policy           *common.SignaturePolicyEnvelope `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	ESCC             string                          `protobuf:"bytes,4,opt,name=ESCC,proto3" json:"ESCC,omitempty"`
	VSCC             string                          `protobuf:"bytes,5,opt,name=VSCC,proto3" json:"VSCC,omitempty"`
	CollectionConfig *common.CollectionConfigPackage `protobuf:"bytes,6,opt,name=collection_config,json=collectionConfig,proto3" json:"collection_config,omitempty"`
	Transient        map[string][]byte               `protobuf:"bytes,7,rep,name=transient,proto3" json:"transient,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeployRequest) Reset() {
	*x = DeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lscc_lscc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployRequest) ProtoMessage() {}

func (x *DeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lscc_lscc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployRequest.ProtoReflect.Descriptor instead.
func (*DeployRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lscc_lscc_proto_rawDescGZIP(), []int{3}
}

func (x *DeployRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *DeployRequest) GetDeploymentSpec() *peer.ChaincodeDeploymentSpec {
	if x != nil {
		return x.DeploymentSpec
	}
	return nil
}

func (x *DeployRequest) GetPolicy() *common.SignaturePolicyEnvelope {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *DeployRequest) GetESCC() string {
	if x != nil {
		return x.ESCC
	}
	return ""
}

func (x *DeployRequest) GetVSCC() string {
	if x != nil {
		return x.VSCC
	}
	return ""
}

func (x *DeployRequest) GetCollectionConfig() *common.CollectionConfigPackage {
	if x != nil {
		return x.CollectionConfig
	}
	return nil
}

func (x *DeployRequest) GetTransient() map[string][]byte {
	if x != nil {
		return x.Transient
	}
	return nil
}

var File_systemcc_lscc_lscc_proto protoreflect.FileDescriptor

var file_systemcc_lscc_lscc_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63, 0x2f,
	0x6c, 0x73, 0x63, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x68, 0x6c, 0x66, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x73, 0x63, 0x63, 0x1a, 0x31, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x30,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x48, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x53, 0x43, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x45, 0x53, 0x43, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x53, 0x43, 0x43, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x53, 0x43, 0x43, 0x12, 0x4c, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x68,
	0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x73, 0x63, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x65, 0x6e, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0xcc, 0x06, 0x0a, 0x0b, 0x4c, 0x53, 0x43, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63,
	0x2e, 0x6c, 0x73, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x12, 0x73, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c,
	0x73, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x12, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x12, 0xb5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x36, 0x2e, 0x68, 0x6c,
	0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x73, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x7d, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x12, 0x68, 0x0a,
	0x07, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x2b, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x73, 0x63, 0x63,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x37, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x68, 0x6c, 0x66, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x73, 0x63, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_systemcc_lscc_lscc_proto_rawDescOnce sync.Once
	file_systemcc_lscc_lscc_proto_rawDescData = file_systemcc_lscc_lscc_proto_rawDesc
)

func file_systemcc_lscc_lscc_proto_rawDescGZIP() []byte {
	file_systemcc_lscc_lscc_proto_rawDescOnce.Do(func() {
		file_systemcc_lscc_lscc_proto_rawDescData = protoimpl.X.CompressGZIP(file_systemcc_lscc_lscc_proto_rawDescData)
	})
	return file_systemcc_lscc_lscc_proto_rawDescData
}

var file_systemcc_lscc_lscc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_systemcc_lscc_lscc_proto_goTypes = []interface{}{
	(*GetChaincodeDataRequest)(nil),        // 0: hlfsdk.service.systemcc.lscc.GetChaincodeDataRequest
	(*GetChaincodesRequest)(nil),           // 1: hlfsdk.service.systemcc.lscc.GetChaincodesRequest
	(*GetDeploymentSpecRequest)(nil),       // 2: hlfsdk.service.systemcc.lscc.GetDeploymentSpecRequest
	(*DeployRequest)(nil),                  // 3: hlfsdk.service.systemcc.lscc.DeployRequest
	nil,                                    // 4: hlfsdk.service.systemcc.lscc.DeployRequest.TransientEntry
	(*peer.ChaincodeDeploymentSpec)(nil),   // 5: protos.ChaincodeDeploymentSpec
	(*common.SignaturePolicyEnvelope)(nil), // 6: common.SignaturePolicyEnvelope
	(*common.CollectionConfigPackage)(nil), // 7: common.CollectionConfigPackage
	(*emptypb.Empty)(nil),                  // 8: google.protobuf.Empty
	(*peer.ChaincodeData)(nil),             // 9: protos.ChaincodeData
	(*peer.ChaincodeQueryResponse)(nil),    // 10: protos.ChaincodeQueryResponse
	(*peer.Response)(nil),                  // 11: protos.Response
}
var file_systemcc_lscc_lscc_proto_depIdxs = []int32{
	5,  // 0: hlfsdk.service.systemcc.lscc.DeployRequest.deployment_spec:type_name -> protos.ChaincodeDeploymentSpec
	6,  // 1: hlfsdk.service.systemcc.lscc.DeployRequest.policy:type_name -> common.SignaturePolicyEnvelope
	7,  // 2: hlfsdk.service.systemcc.lscc.DeployRequest.collection_config:type_name -> common.CollectionConfigPackage
	4,  // 3: hlfsdk.service.systemcc.lscc.DeployRequest.transient:type_name -> hlfsdk.service.systemcc.lscc.DeployRequest.TransientEntry
	0,  // 4: hlfsdk.service.systemcc.lscc.LSCCService.GetChaincodeData:input_type -> hlfsdk.service.systemcc.lscc.GetChaincodeDataRequest
	8,  // 5: hlfsdk.service.systemcc.lscc.LSCCService.GetInstalledChaincodes:input_type -> google.protobuf.Empty
	1,  // 6: hlfsdk.service.systemcc.lscc.LSCCService.GetChaincodes:input_type -> hlfsdk.service.systemcc.lscc.GetChaincodesRequest
	2,  // 7: hlfsdk.service.systemcc.lscc.LSCCService.GetDeploymentSpec:input_type -> hlfsdk.service.systemcc.lscc.GetDeploymentSpecRequest
	5,  // 8: hlfsdk.service.systemcc.lscc.LSCCService.Install:input_type -> protos.ChaincodeDeploymentSpec
	3,  // 9: hlfsdk.service.systemcc.lscc.LSCCService.Deploy:input_type -> hlfsdk.service.systemcc.lscc.DeployRequest
	9,  // 10: hlfsdk.service.systemcc.lscc.LSCCService.GetChaincodeData:output_type -> protos.ChaincodeData
	10, // 11: hlfsdk.service.systemcc.lscc.LSCCService.GetInstalledChaincodes:output_type -> protos.ChaincodeQueryResponse
	10, // 12: hlfsdk.service.systemcc.lscc.LSCCService.GetChaincodes:output_type -> protos.ChaincodeQueryResponse
	5,  // 13: hlfsdk.service.systemcc.lscc.LSCCService.GetDeploymentSpec:output_type -> protos.ChaincodeDeploymentSpec
	8,  // 14: hlfsdk.service.systemcc.lscc.LSCCService.Install:output_type -> google.protobuf.Empty
	11, // 15: hlfsdk.service.systemcc.lscc.LSCCService.Deploy:output_type -> protos.Response
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_systemcc_lscc_lscc_proto_init() }
func file_systemcc_lscc_lscc_proto_init() {
	if File_systemcc_lscc_lscc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_systemcc_lscc_lscc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChaincodeDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lscc_lscc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChaincodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lscc_lscc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lscc_lscc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_systemcc_lscc_lscc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_systemcc_lscc_lscc_proto_goTypes,
		DependencyIndexes: file_systemcc_lscc_lscc_proto_depIdxs,
		MessageInfos:      file_systemcc_lscc_lscc_proto_msgTypes,
	}.Build()
	File_systemcc_lscc_lscc_proto = out.File
	file_systemcc_lscc_lscc_proto_rawDesc = nil
	file_systemcc_lscc_lscc_proto_goTypes = nil
	file_systemcc_lscc_lscc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LSCCServiceClient is the client API for LSCCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LSCCServiceClient interface {
	// GetChaincodeData returns information about instantiated chaincode on target channel
	GetChaincodeData(ctx context.Context, in *GetChaincodeDataRequest, opts ...grpc.CallOption) (*peer.ChaincodeData, error)
	// GetInstalledChaincodes returns list of installed chaincodes on peer
	GetInstalledChaincodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*peer.ChaincodeQueryResponse, error)
	// GetChaincodes returns list of instantiated chaincodes on channel
	GetChaincodes(ctx context.Context, in *GetChaincodesRequest, opts ...grpc.CallOption) (*peer.ChaincodeQueryResponse, error)
	// GetDeploymentSpec returns spec for installed chaincode
	GetDeploymentSpec(ctx context.Context, in *GetDeploymentSpecRequest, opts ...grpc.CallOption) (*peer.ChaincodeDeploymentSpec, error)
	// Install allows installing chaincode using deployment specification
	Install(ctx context.Context, in *peer.ChaincodeDeploymentSpec, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deploy allows instantiating or upgrade chaincode if instantiated
	// Currently, deploy method is not canonical as lscc implementation, but currently we need to get full proposal, and it's response to broadcast to orderer
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*peer.Response, error)
}

type lSCCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLSCCServiceClient(cc grpc.ClientConnInterface) LSCCServiceClient {
	return &lSCCServiceClient{cc}
}

func (c *lSCCServiceClient) GetChaincodeData(ctx context.Context, in *GetChaincodeDataRequest, opts ...grpc.CallOption) (*peer.ChaincodeData, error) {
	out := new(peer.ChaincodeData)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lscc.LSCCService/GetChaincodeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSCCServiceClient) GetInstalledChaincodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*peer.ChaincodeQueryResponse, error) {
	out := new(peer.ChaincodeQueryResponse)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lscc.LSCCService/GetInstalledChaincodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSCCServiceClient) GetChaincodes(ctx context.Context, in *GetChaincodesRequest, opts ...grpc.CallOption) (*peer.ChaincodeQueryResponse, error) {
	out := new(peer.ChaincodeQueryResponse)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lscc.LSCCService/GetChaincodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSCCServiceClient) GetDeploymentSpec(ctx context.Context, in *GetDeploymentSpecRequest, opts ...grpc.CallOption) (*peer.ChaincodeDeploymentSpec, error) {
	out := new(peer.ChaincodeDeploymentSpec)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lscc.LSCCService/GetDeploymentSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSCCServiceClient) Install(ctx context.Context, in *peer.ChaincodeDeploymentSpec, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lscc.LSCCService/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSCCServiceClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*peer.Response, error) {
	out := new(peer.Response)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lscc.LSCCService/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LSCCServiceServer is the server API for LSCCService service.
type LSCCServiceServer interface {
	// GetChaincodeData returns information about instantiated chaincode on target channel
	GetChaincodeData(context.Context, *GetChaincodeDataRequest) (*peer.ChaincodeData, error)
	// GetInstalledChaincodes returns list of installed chaincodes on peer
	GetInstalledChaincodes(context.Context, *emptypb.Empty) (*peer.ChaincodeQueryResponse, error)
	// GetChaincodes returns list of instantiated chaincodes on channel
	GetChaincodes(context.Context, *GetChaincodesRequest) (*peer.ChaincodeQueryResponse, error)
	// GetDeploymentSpec returns spec for installed chaincode
	GetDeploymentSpec(context.Context, *GetDeploymentSpecRequest) (*peer.ChaincodeDeploymentSpec, error)
	// Install allows installing chaincode using deployment specification
	Install(context.Context, *peer.ChaincodeDeploymentSpec) (*emptypb.Empty, error)
	// Deploy allows instantiating or upgrade chaincode if instantiated
	// Currently, deploy method is not canonical as lscc implementation, but currently we need to get full proposal, and it's response to broadcast to orderer
	Deploy(context.Context, *DeployRequest) (*peer.Response, error)
}

// UnimplementedLSCCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLSCCServiceServer struct {
}

func (*UnimplementedLSCCServiceServer) GetChaincodeData(context.Context, *GetChaincodeDataRequest) (*peer.ChaincodeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChaincodeData not implemented")
}
func (*UnimplementedLSCCServiceServer) GetInstalledChaincodes(context.Context, *emptypb.Empty) (*peer.ChaincodeQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstalledChaincodes not implemented")
}
func (*UnimplementedLSCCServiceServer) GetChaincodes(context.Context, *GetChaincodesRequest) (*peer.ChaincodeQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChaincodes not implemented")
}
func (*UnimplementedLSCCServiceServer) GetDeploymentSpec(context.Context, *GetDeploymentSpecRequest) (*peer.ChaincodeDeploymentSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentSpec not implemented")
}
func (*UnimplementedLSCCServiceServer) Install(context.Context, *peer.ChaincodeDeploymentSpec) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (*UnimplementedLSCCServiceServer) Deploy(context.Context, *DeployRequest) (*peer.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}

func RegisterLSCCServiceServer(s *grpc.Server, srv LSCCServiceServer) {
	s.RegisterService(&_LSCCService_serviceDesc, srv)
}

func _LSCCService_GetChaincodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChaincodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSCCServiceServer).GetChaincodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lscc.LSCCService/GetChaincodeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSCCServiceServer).GetChaincodeData(ctx, req.(*GetChaincodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSCCService_GetInstalledChaincodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSCCServiceServer).GetInstalledChaincodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lscc.LSCCService/GetInstalledChaincodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSCCServiceServer).GetInstalledChaincodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSCCService_GetChaincodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChaincodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSCCServiceServer).GetChaincodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lscc.LSCCService/GetChaincodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSCCServiceServer).GetChaincodes(ctx, req.(*GetChaincodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSCCService_GetDeploymentSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSCCServiceServer).GetDeploymentSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lscc.LSCCService/GetDeploymentSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSCCServiceServer).GetDeploymentSpec(ctx, req.(*GetDeploymentSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSCCService_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(peer.ChaincodeDeploymentSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSCCServiceServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lscc.LSCCService/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSCCServiceServer).Install(ctx, req.(*peer.ChaincodeDeploymentSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSCCService_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSCCServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lscc.LSCCService/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSCCServiceServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LSCCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdk.service.systemcc.lscc.LSCCService",
	HandlerType: (*LSCCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChaincodeData",
			Handler:    _LSCCService_GetChaincodeData_Handler,
		},
		{
			MethodName: "GetInstalledChaincodes",
			Handler:    _LSCCService_GetInstalledChaincodes_Handler,
		},
		{
			MethodName: "GetChaincodes",
			Handler:    _LSCCService_GetChaincodes_Handler,
		},
		{
			MethodName: "GetDeploymentSpec",
			Handler:    _LSCCService_GetDeploymentSpec_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _LSCCService_Install_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _LSCCService_Deploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systemcc/lscc/lscc.proto",
}
