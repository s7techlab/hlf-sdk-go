// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: systemcc/qscc/qscc.proto

package qscc

import (
	context "context"
	common "github.com/hyperledger/fabric-protos-go/common"
	peer "github.com/hyperledger/fabric-protos-go/peer"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetChainInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
}

func (x *GetChainInfoRequest) Reset() {
	*x = GetChainInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_qscc_qscc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainInfoRequest) ProtoMessage() {}

func (x *GetChainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_qscc_qscc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainInfoRequest.ProtoReflect.Descriptor instead.
func (*GetChainInfoRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_qscc_qscc_proto_rawDescGZIP(), []int{0}
}

func (x *GetChainInfoRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type GetBlockByNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	BlockNumber int64  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *GetBlockByNumberRequest) Reset() {
	*x = GetBlockByNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_qscc_qscc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByNumberRequest) ProtoMessage() {}

func (x *GetBlockByNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_qscc_qscc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByNumberRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByNumberRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_qscc_qscc_proto_rawDescGZIP(), []int{1}
}

func (x *GetBlockByNumberRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *GetBlockByNumberRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type GetBlockByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	BlockHash   []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *GetBlockByHashRequest) Reset() {
	*x = GetBlockByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_qscc_qscc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHashRequest) ProtoMessage() {}

func (x *GetBlockByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_qscc_qscc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByHashRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_qscc_qscc_proto_rawDescGZIP(), []int{2}
}

func (x *GetBlockByHashRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *GetBlockByHashRequest) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type GetTransactionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	TxId        string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetTransactionByIDRequest) Reset() {
	*x = GetTransactionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_qscc_qscc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByIDRequest) ProtoMessage() {}

func (x *GetTransactionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_qscc_qscc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionByIDRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_qscc_qscc_proto_rawDescGZIP(), []int{3}
}

func (x *GetTransactionByIDRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *GetTransactionByIDRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type GetBlockByTxIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	TxId        string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetBlockByTxIDRequest) Reset() {
	*x = GetBlockByTxIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_qscc_qscc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByTxIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByTxIDRequest) ProtoMessage() {}

func (x *GetBlockByTxIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_qscc_qscc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByTxIDRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByTxIDRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_qscc_qscc_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlockByTxIDRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *GetBlockByTxIDRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

var File_systemcc_qscc_qscc_proto protoreflect.FileDescriptor

var file_systemcc_qscc_qscc_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x71, 0x73, 0x63, 0x63, 0x2f,
	0x71, 0x73, 0x63, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x68, 0x6c, 0x66, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x63, 0x63, 0x2e, 0x71, 0x73, 0x63, 0x63, 0x1a, 0x2d, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x5f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x53, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x54,
	0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x32, 0xf8, 0x05, 0x0a, 0x0b, 0x51, 0x53, 0x43, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x31, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x71, 0x73,
	0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63,
	0x63, 0x2f, 0x71, 0x73, 0x63, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x35, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x71, 0x73, 0x63, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x71, 0x73, 0x63, 0x63, 0x2f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e,
	0x71, 0x73, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x12, 0x37, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x71, 0x73, 0x63,
	0x63, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62, 0x79, 0x68, 0x61, 0x73, 0x68, 0x2f, 0x7b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x12, 0x33, 0x2e,
	0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x71, 0x73, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x63, 0x63, 0x2f, 0x71, 0x73, 0x63, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x62,
	0x79, 0x74, 0x78, 0x69, 0x64, 0x2f, 0x7b, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9d, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x37, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x71,
	0x73, 0x63, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x71,
	0x73, 0x63, 0x63, 0x2f, 0x74, 0x78, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x37, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65,
	0x63, 0x68, 0x6c, 0x61, 0x62, 0x2f, 0x68, 0x6c, 0x66, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63,
	0x63, 0x2f, 0x71, 0x73, 0x63, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_systemcc_qscc_qscc_proto_rawDescOnce sync.Once
	file_systemcc_qscc_qscc_proto_rawDescData = file_systemcc_qscc_qscc_proto_rawDesc
)

func file_systemcc_qscc_qscc_proto_rawDescGZIP() []byte {
	file_systemcc_qscc_qscc_proto_rawDescOnce.Do(func() {
		file_systemcc_qscc_qscc_proto_rawDescData = protoimpl.X.CompressGZIP(file_systemcc_qscc_qscc_proto_rawDescData)
	})
	return file_systemcc_qscc_qscc_proto_rawDescData
}

var file_systemcc_qscc_qscc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_systemcc_qscc_qscc_proto_goTypes = []interface{}{
	(*GetChainInfoRequest)(nil),       // 0: hlfsdk.service.systemcc.qscc.GetChainInfoRequest
	(*GetBlockByNumberRequest)(nil),   // 1: hlfsdk.service.systemcc.qscc.GetBlockByNumberRequest
	(*GetBlockByHashRequest)(nil),     // 2: hlfsdk.service.systemcc.qscc.GetBlockByHashRequest
	(*GetTransactionByIDRequest)(nil), // 3: hlfsdk.service.systemcc.qscc.GetTransactionByIDRequest
	(*GetBlockByTxIDRequest)(nil),     // 4: hlfsdk.service.systemcc.qscc.GetBlockByTxIDRequest
	(*common.BlockchainInfo)(nil),     // 5: common.BlockchainInfo
	(*common.Block)(nil),              // 6: common.Block
	(*peer.ProcessedTransaction)(nil), // 7: protos.ProcessedTransaction
}
var file_systemcc_qscc_qscc_proto_depIdxs = []int32{
	0, // 0: hlfsdk.service.systemcc.qscc.QSCCService.GetChainInfo:input_type -> hlfsdk.service.systemcc.qscc.GetChainInfoRequest
	1, // 1: hlfsdk.service.systemcc.qscc.QSCCService.GetBlockByNumber:input_type -> hlfsdk.service.systemcc.qscc.GetBlockByNumberRequest
	2, // 2: hlfsdk.service.systemcc.qscc.QSCCService.GetBlockByHash:input_type -> hlfsdk.service.systemcc.qscc.GetBlockByHashRequest
	4, // 3: hlfsdk.service.systemcc.qscc.QSCCService.GetBlockByTxID:input_type -> hlfsdk.service.systemcc.qscc.GetBlockByTxIDRequest
	3, // 4: hlfsdk.service.systemcc.qscc.QSCCService.GetTransactionByID:input_type -> hlfsdk.service.systemcc.qscc.GetTransactionByIDRequest
	5, // 5: hlfsdk.service.systemcc.qscc.QSCCService.GetChainInfo:output_type -> common.BlockchainInfo
	6, // 6: hlfsdk.service.systemcc.qscc.QSCCService.GetBlockByNumber:output_type -> common.Block
	6, // 7: hlfsdk.service.systemcc.qscc.QSCCService.GetBlockByHash:output_type -> common.Block
	6, // 8: hlfsdk.service.systemcc.qscc.QSCCService.GetBlockByTxID:output_type -> common.Block
	7, // 9: hlfsdk.service.systemcc.qscc.QSCCService.GetTransactionByID:output_type -> protos.ProcessedTransaction
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_systemcc_qscc_qscc_proto_init() }
func file_systemcc_qscc_qscc_proto_init() {
	if File_systemcc_qscc_qscc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_systemcc_qscc_qscc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChainInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_qscc_qscc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_qscc_qscc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_qscc_qscc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_qscc_qscc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByTxIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_systemcc_qscc_qscc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_systemcc_qscc_qscc_proto_goTypes,
		DependencyIndexes: file_systemcc_qscc_qscc_proto_depIdxs,
		MessageInfos:      file_systemcc_qscc_qscc_proto_msgTypes,
	}.Build()
	File_systemcc_qscc_qscc_proto = out.File
	file_systemcc_qscc_qscc_proto_rawDesc = nil
	file_systemcc_qscc_qscc_proto_goTypes = nil
	file_systemcc_qscc_qscc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QSCCServiceClient is the client API for QSCCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QSCCServiceClient interface {
	// GetChainInfo allows getting common info about channel blockchain
	GetChainInfo(ctx context.Context, in *GetChainInfoRequest, opts ...grpc.CallOption) (*common.BlockchainInfo, error)
	// GetBlockByNumber allows getting block by number
	GetBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*common.Block, error)
	// GetBlockByHash allows getting block by hash
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*common.Block, error)
	// GetBlockByTxID allows getting block by transaction
	GetBlockByTxID(ctx context.Context, in *GetBlockByTxIDRequest, opts ...grpc.CallOption) (*common.Block, error)
	// GetTransactionByID allows getting transaction by id
	GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*peer.ProcessedTransaction, error)
}

type qSCCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQSCCServiceClient(cc grpc.ClientConnInterface) QSCCServiceClient {
	return &qSCCServiceClient{cc}
}

func (c *qSCCServiceClient) GetChainInfo(ctx context.Context, in *GetChainInfoRequest, opts ...grpc.CallOption) (*common.BlockchainInfo, error) {
	out := new(common.BlockchainInfo)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.qscc.QSCCService/GetChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCCServiceClient) GetBlockByNumber(ctx context.Context, in *GetBlockByNumberRequest, opts ...grpc.CallOption) (*common.Block, error) {
	out := new(common.Block)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.qscc.QSCCService/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCCServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*common.Block, error) {
	out := new(common.Block)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.qscc.QSCCService/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCCServiceClient) GetBlockByTxID(ctx context.Context, in *GetBlockByTxIDRequest, opts ...grpc.CallOption) (*common.Block, error) {
	out := new(common.Block)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.qscc.QSCCService/GetBlockByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qSCCServiceClient) GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*peer.ProcessedTransaction, error) {
	out := new(peer.ProcessedTransaction)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.qscc.QSCCService/GetTransactionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QSCCServiceServer is the server API for QSCCService service.
type QSCCServiceServer interface {
	// GetChainInfo allows getting common info about channel blockchain
	GetChainInfo(context.Context, *GetChainInfoRequest) (*common.BlockchainInfo, error)
	// GetBlockByNumber allows getting block by number
	GetBlockByNumber(context.Context, *GetBlockByNumberRequest) (*common.Block, error)
	// GetBlockByHash allows getting block by hash
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*common.Block, error)
	// GetBlockByTxID allows getting block by transaction
	GetBlockByTxID(context.Context, *GetBlockByTxIDRequest) (*common.Block, error)
	// GetTransactionByID allows getting transaction by id
	GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*peer.ProcessedTransaction, error)
}

// UnimplementedQSCCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQSCCServiceServer struct {
}

func (*UnimplementedQSCCServiceServer) GetChainInfo(context.Context, *GetChainInfoRequest) (*common.BlockchainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}
func (*UnimplementedQSCCServiceServer) GetBlockByNumber(context.Context, *GetBlockByNumberRequest) (*common.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (*UnimplementedQSCCServiceServer) GetBlockByHash(context.Context, *GetBlockByHashRequest) (*common.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (*UnimplementedQSCCServiceServer) GetBlockByTxID(context.Context, *GetBlockByTxIDRequest) (*common.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByTxID not implemented")
}
func (*UnimplementedQSCCServiceServer) GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*peer.ProcessedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByID not implemented")
}

func RegisterQSCCServiceServer(s *grpc.Server, srv QSCCServiceServer) {
	s.RegisterService(&_QSCCService_serviceDesc, srv)
}

func _QSCCService_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCCServiceServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.qscc.QSCCService/GetChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCCServiceServer).GetChainInfo(ctx, req.(*GetChainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCCService_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCCServiceServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.qscc.QSCCService/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCCServiceServer).GetBlockByNumber(ctx, req.(*GetBlockByNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCCService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCCServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.qscc.QSCCService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCCServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCCService_GetBlockByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByTxIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCCServiceServer).GetBlockByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.qscc.QSCCService/GetBlockByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCCServiceServer).GetBlockByTxID(ctx, req.(*GetBlockByTxIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QSCCService_GetTransactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QSCCServiceServer).GetTransactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.qscc.QSCCService/GetTransactionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QSCCServiceServer).GetTransactionByID(ctx, req.(*GetTransactionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QSCCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdk.service.systemcc.qscc.QSCCService",
	HandlerType: (*QSCCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChainInfo",
			Handler:    _QSCCService_GetChainInfo_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _QSCCService_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _QSCCService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByTxID",
			Handler:    _QSCCService_GetBlockByTxID_Handler,
		},
		{
			MethodName: "GetTransactionByID",
			Handler:    _QSCCService_GetTransactionByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systemcc/qscc/qscc.proto",
}
