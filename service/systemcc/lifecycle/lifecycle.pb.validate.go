// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: systemcc/lifecycle/lifecycle.proto

package lifecycle

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on
// ApproveChaincodeDefinitionForMyOrgRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApproveChaincodeDefinitionForMyOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ApproveChaincodeDefinitionForMyOrgRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ApproveChaincodeDefinitionForMyOrgRequestMultiError, or nil if none found.
func (m *ApproveChaincodeDefinitionForMyOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveChaincodeDefinitionForMyOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveChaincodeDefinitionForMyOrgRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveChaincodeDefinitionForMyOrgRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveChaincodeDefinitionForMyOrgRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApproveChaincodeDefinitionForMyOrgRequestMultiError(errors)
	}

	return nil
}

// ApproveChaincodeDefinitionForMyOrgRequestMultiError is an error wrapping
// multiple validation errors returned by
// ApproveChaincodeDefinitionForMyOrgRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveChaincodeDefinitionForMyOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveChaincodeDefinitionForMyOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveChaincodeDefinitionForMyOrgRequestMultiError) AllErrors() []error { return m }

// ApproveChaincodeDefinitionForMyOrgRequestValidationError is the validation
// error returned by ApproveChaincodeDefinitionForMyOrgRequest.Validate if the
// designated constraints aren't met.
type ApproveChaincodeDefinitionForMyOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveChaincodeDefinitionForMyOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveChaincodeDefinitionForMyOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveChaincodeDefinitionForMyOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveChaincodeDefinitionForMyOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveChaincodeDefinitionForMyOrgRequestValidationError) ErrorName() string {
	return "ApproveChaincodeDefinitionForMyOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveChaincodeDefinitionForMyOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveChaincodeDefinitionForMyOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveChaincodeDefinitionForMyOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveChaincodeDefinitionForMyOrgRequestValidationError{}

// Validate checks the field values on QueryApprovedChaincodeDefinitionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *QueryApprovedChaincodeDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// QueryApprovedChaincodeDefinitionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// QueryApprovedChaincodeDefinitionRequestMultiError, or nil if none found.
func (m *QueryApprovedChaincodeDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryApprovedChaincodeDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryApprovedChaincodeDefinitionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryApprovedChaincodeDefinitionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryApprovedChaincodeDefinitionRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryApprovedChaincodeDefinitionRequestMultiError(errors)
	}

	return nil
}

// QueryApprovedChaincodeDefinitionRequestMultiError is an error wrapping
// multiple validation errors returned by
// QueryApprovedChaincodeDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryApprovedChaincodeDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryApprovedChaincodeDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryApprovedChaincodeDefinitionRequestMultiError) AllErrors() []error { return m }

// QueryApprovedChaincodeDefinitionRequestValidationError is the validation
// error returned by QueryApprovedChaincodeDefinitionRequest.Validate if the
// designated constraints aren't met.
type QueryApprovedChaincodeDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryApprovedChaincodeDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryApprovedChaincodeDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryApprovedChaincodeDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryApprovedChaincodeDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryApprovedChaincodeDefinitionRequestValidationError) ErrorName() string {
	return "QueryApprovedChaincodeDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryApprovedChaincodeDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryApprovedChaincodeDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryApprovedChaincodeDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryApprovedChaincodeDefinitionRequestValidationError{}

// Validate checks the field values on CheckCommitReadinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckCommitReadinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckCommitReadinessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckCommitReadinessRequestMultiError, or nil if none found.
func (m *CheckCommitReadinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckCommitReadinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckCommitReadinessRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckCommitReadinessRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckCommitReadinessRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckCommitReadinessRequestMultiError(errors)
	}

	return nil
}

// CheckCommitReadinessRequestMultiError is an error wrapping multiple
// validation errors returned by CheckCommitReadinessRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckCommitReadinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckCommitReadinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckCommitReadinessRequestMultiError) AllErrors() []error { return m }

// CheckCommitReadinessRequestValidationError is the validation error returned
// by CheckCommitReadinessRequest.Validate if the designated constraints
// aren't met.
type CheckCommitReadinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCommitReadinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCommitReadinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCommitReadinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCommitReadinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCommitReadinessRequestValidationError) ErrorName() string {
	return "CheckCommitReadinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCommitReadinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCommitReadinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCommitReadinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCommitReadinessRequestValidationError{}

// Validate checks the field values on CommitChaincodeDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CommitChaincodeDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitChaincodeDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CommitChaincodeDefinitionRequestMultiError, or nil if none found.
func (m *CommitChaincodeDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitChaincodeDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommitChaincodeDefinitionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommitChaincodeDefinitionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommitChaincodeDefinitionRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommitChaincodeDefinitionRequestMultiError(errors)
	}

	return nil
}

// CommitChaincodeDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CommitChaincodeDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type CommitChaincodeDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitChaincodeDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitChaincodeDefinitionRequestMultiError) AllErrors() []error { return m }

// CommitChaincodeDefinitionRequestValidationError is the validation error
// returned by CommitChaincodeDefinitionRequest.Validate if the designated
// constraints aren't met.
type CommitChaincodeDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitChaincodeDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitChaincodeDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitChaincodeDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitChaincodeDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitChaincodeDefinitionRequestValidationError) ErrorName() string {
	return "CommitChaincodeDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommitChaincodeDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitChaincodeDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitChaincodeDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitChaincodeDefinitionRequestValidationError{}

// Validate checks the field values on QueryChaincodeDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryChaincodeDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryChaincodeDefinitionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryChaincodeDefinitionRequestMultiError, or nil if none found.
func (m *QueryChaincodeDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryChaincodeDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryChaincodeDefinitionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryChaincodeDefinitionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryChaincodeDefinitionRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryChaincodeDefinitionRequestMultiError(errors)
	}

	return nil
}

// QueryChaincodeDefinitionRequestMultiError is an error wrapping multiple
// validation errors returned by QueryChaincodeDefinitionRequest.ValidateAll()
// if the designated constraints aren't met.
type QueryChaincodeDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryChaincodeDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryChaincodeDefinitionRequestMultiError) AllErrors() []error { return m }

// QueryChaincodeDefinitionRequestValidationError is the validation error
// returned by QueryChaincodeDefinitionRequest.Validate if the designated
// constraints aren't met.
type QueryChaincodeDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryChaincodeDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryChaincodeDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryChaincodeDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryChaincodeDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryChaincodeDefinitionRequestValidationError) ErrorName() string {
	return "QueryChaincodeDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryChaincodeDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryChaincodeDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryChaincodeDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryChaincodeDefinitionRequestValidationError{}

// Validate checks the field values on QueryChaincodeDefinitionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *QueryChaincodeDefinitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryChaincodeDefinitionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryChaincodeDefinitionsRequestMultiError, or nil if none found.
func (m *QueryChaincodeDefinitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryChaincodeDefinitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryChaincodeDefinitionsRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryChaincodeDefinitionsRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryChaincodeDefinitionsRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryChaincodeDefinitionsRequestMultiError(errors)
	}

	return nil
}

// QueryChaincodeDefinitionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// QueryChaincodeDefinitionsRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryChaincodeDefinitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryChaincodeDefinitionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryChaincodeDefinitionsRequestMultiError) AllErrors() []error { return m }

// QueryChaincodeDefinitionsRequestValidationError is the validation error
// returned by QueryChaincodeDefinitionsRequest.Validate if the designated
// constraints aren't met.
type QueryChaincodeDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryChaincodeDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryChaincodeDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryChaincodeDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryChaincodeDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryChaincodeDefinitionsRequestValidationError) ErrorName() string {
	return "QueryChaincodeDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryChaincodeDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryChaincodeDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryChaincodeDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryChaincodeDefinitionsRequestValidationError{}
