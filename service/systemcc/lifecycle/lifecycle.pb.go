// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: systemcc/lifecycle/lifecycle.proto

package lifecycle

import (
	context "context"
	lifecycle "github.com/hyperledger/fabric-protos-go/peer/lifecycle"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApproveChaincodeDefinitionForMyOrgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string                                            `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Args    *lifecycle.ApproveChaincodeDefinitionForMyOrgArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *ApproveChaincodeDefinitionForMyOrgRequest) Reset() {
	*x = ApproveChaincodeDefinitionForMyOrgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveChaincodeDefinitionForMyOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveChaincodeDefinitionForMyOrgRequest) ProtoMessage() {}

func (x *ApproveChaincodeDefinitionForMyOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveChaincodeDefinitionForMyOrgRequest.ProtoReflect.Descriptor instead.
func (*ApproveChaincodeDefinitionForMyOrgRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lifecycle_lifecycle_proto_rawDescGZIP(), []int{0}
}

func (x *ApproveChaincodeDefinitionForMyOrgRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ApproveChaincodeDefinitionForMyOrgRequest) GetArgs() *lifecycle.ApproveChaincodeDefinitionForMyOrgArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type QueryApprovedChaincodeDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string                                          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Args    *lifecycle.QueryApprovedChaincodeDefinitionArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *QueryApprovedChaincodeDefinitionRequest) Reset() {
	*x = QueryApprovedChaincodeDefinitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryApprovedChaincodeDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryApprovedChaincodeDefinitionRequest) ProtoMessage() {}

func (x *QueryApprovedChaincodeDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryApprovedChaincodeDefinitionRequest.ProtoReflect.Descriptor instead.
func (*QueryApprovedChaincodeDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lifecycle_lifecycle_proto_rawDescGZIP(), []int{1}
}

func (x *QueryApprovedChaincodeDefinitionRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *QueryApprovedChaincodeDefinitionRequest) GetArgs() *lifecycle.QueryApprovedChaincodeDefinitionArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type CheckCommitReadinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string                              `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Args    *lifecycle.CheckCommitReadinessArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *CheckCommitReadinessRequest) Reset() {
	*x = CheckCommitReadinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitReadinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitReadinessRequest) ProtoMessage() {}

func (x *CheckCommitReadinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitReadinessRequest.ProtoReflect.Descriptor instead.
func (*CheckCommitReadinessRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lifecycle_lifecycle_proto_rawDescGZIP(), []int{2}
}

func (x *CheckCommitReadinessRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CheckCommitReadinessRequest) GetArgs() *lifecycle.CheckCommitReadinessArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type CommitChaincodeDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string                                   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Args    *lifecycle.CommitChaincodeDefinitionArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *CommitChaincodeDefinitionRequest) Reset() {
	*x = CommitChaincodeDefinitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitChaincodeDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitChaincodeDefinitionRequest) ProtoMessage() {}

func (x *CommitChaincodeDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitChaincodeDefinitionRequest.ProtoReflect.Descriptor instead.
func (*CommitChaincodeDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lifecycle_lifecycle_proto_rawDescGZIP(), []int{3}
}

func (x *CommitChaincodeDefinitionRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CommitChaincodeDefinitionRequest) GetArgs() *lifecycle.CommitChaincodeDefinitionArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type QueryChaincodeDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string                                  `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Args    *lifecycle.QueryChaincodeDefinitionArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *QueryChaincodeDefinitionRequest) Reset() {
	*x = QueryChaincodeDefinitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaincodeDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaincodeDefinitionRequest) ProtoMessage() {}

func (x *QueryChaincodeDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaincodeDefinitionRequest.ProtoReflect.Descriptor instead.
func (*QueryChaincodeDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lifecycle_lifecycle_proto_rawDescGZIP(), []int{4}
}

func (x *QueryChaincodeDefinitionRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *QueryChaincodeDefinitionRequest) GetArgs() *lifecycle.QueryChaincodeDefinitionArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type QueryChaincodeDefinitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel string                                   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Args    *lifecycle.QueryChaincodeDefinitionsArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *QueryChaincodeDefinitionsRequest) Reset() {
	*x = QueryChaincodeDefinitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaincodeDefinitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaincodeDefinitionsRequest) ProtoMessage() {}

func (x *QueryChaincodeDefinitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemcc_lifecycle_lifecycle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaincodeDefinitionsRequest.ProtoReflect.Descriptor instead.
func (*QueryChaincodeDefinitionsRequest) Descriptor() ([]byte, []int) {
	return file_systemcc_lifecycle_lifecycle_proto_rawDescGZIP(), []int{5}
}

func (x *QueryChaincodeDefinitionsRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *QueryChaincodeDefinitionsRequest) GetArgs() *lifecycle.QueryChaincodeDefinitionsArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_systemcc_lifecycle_lifecycle_proto protoreflect.FileDescriptor

var file_systemcc_lifecycle_lifecycle_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x63, 0x63, 0x1a, 0x38, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c,
	0x01, 0x0a, 0x29, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x4d, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4d, 0x79,
	0x4f, 0x72, 0x67, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x88, 0x01,
	0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x70, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7a, 0x0a, 0x20, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x78, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x7a, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3c,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x32, 0x89, 0x0c, 0x0a,
	0x10, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x7c, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x97, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x28, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a, 0x10, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x2e,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21,
	0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x22, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4d, 0x79, 0x4f, 0x72, 0x67, 0x12, 0x4e, 0x2e, 0x68, 0x6c, 0x66,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x63, 0x63,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4d, 0x79,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0xce, 0x01, 0x0a,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x63, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0xa7, 0x01,
	0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x40, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63,
	0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x63, 0x63, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2d, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x63, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0xba, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x2e, 0x68, 0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x63, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0xb7,
	0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x68,
	0x6c, 0x66, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x63, 0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x37, 0x74, 0x65, 0x63, 0x68, 0x6c, 0x61, 0x62,
	0x2f, 0x68, 0x6c, 0x66, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x63, 0x63, 0x2f, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_systemcc_lifecycle_lifecycle_proto_rawDescOnce sync.Once
	file_systemcc_lifecycle_lifecycle_proto_rawDescData = file_systemcc_lifecycle_lifecycle_proto_rawDesc
)

func file_systemcc_lifecycle_lifecycle_proto_rawDescGZIP() []byte {
	file_systemcc_lifecycle_lifecycle_proto_rawDescOnce.Do(func() {
		file_systemcc_lifecycle_lifecycle_proto_rawDescData = protoimpl.X.CompressGZIP(file_systemcc_lifecycle_lifecycle_proto_rawDescData)
	})
	return file_systemcc_lifecycle_lifecycle_proto_rawDescData
}

var file_systemcc_lifecycle_lifecycle_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_systemcc_lifecycle_lifecycle_proto_goTypes = []interface{}{
	(*ApproveChaincodeDefinitionForMyOrgRequest)(nil),        // 0: hlfsdk.service.systemcc.lifecyclecc.ApproveChaincodeDefinitionForMyOrgRequest
	(*QueryApprovedChaincodeDefinitionRequest)(nil),          // 1: hlfsdk.service.systemcc.lifecyclecc.QueryApprovedChaincodeDefinitionRequest
	(*CheckCommitReadinessRequest)(nil),                      // 2: hlfsdk.service.systemcc.lifecyclecc.CheckCommitReadinessRequest
	(*CommitChaincodeDefinitionRequest)(nil),                 // 3: hlfsdk.service.systemcc.lifecyclecc.CommitChaincodeDefinitionRequest
	(*QueryChaincodeDefinitionRequest)(nil),                  // 4: hlfsdk.service.systemcc.lifecyclecc.QueryChaincodeDefinitionRequest
	(*QueryChaincodeDefinitionsRequest)(nil),                 // 5: hlfsdk.service.systemcc.lifecyclecc.QueryChaincodeDefinitionsRequest
	(*lifecycle.ApproveChaincodeDefinitionForMyOrgArgs)(nil), // 6: lifecycle.ApproveChaincodeDefinitionForMyOrgArgs
	(*lifecycle.QueryApprovedChaincodeDefinitionArgs)(nil),   // 7: lifecycle.QueryApprovedChaincodeDefinitionArgs
	(*lifecycle.CheckCommitReadinessArgs)(nil),               // 8: lifecycle.CheckCommitReadinessArgs
	(*lifecycle.CommitChaincodeDefinitionArgs)(nil),          // 9: lifecycle.CommitChaincodeDefinitionArgs
	(*lifecycle.QueryChaincodeDefinitionArgs)(nil),           // 10: lifecycle.QueryChaincodeDefinitionArgs
	(*lifecycle.QueryChaincodeDefinitionsArgs)(nil),          // 11: lifecycle.QueryChaincodeDefinitionsArgs
	(*emptypb.Empty)(nil),                                    // 12: google.protobuf.Empty
	(*lifecycle.QueryInstalledChaincodeArgs)(nil),            // 13: lifecycle.QueryInstalledChaincodeArgs
	(*lifecycle.InstallChaincodeArgs)(nil),                   // 14: lifecycle.InstallChaincodeArgs
	(*lifecycle.QueryInstalledChaincodesResult)(nil),         // 15: lifecycle.QueryInstalledChaincodesResult
	(*lifecycle.QueryInstalledChaincodeResult)(nil),          // 16: lifecycle.QueryInstalledChaincodeResult
	(*lifecycle.InstallChaincodeResult)(nil),                 // 17: lifecycle.InstallChaincodeResult
	(*lifecycle.QueryApprovedChaincodeDefinitionResult)(nil), // 18: lifecycle.QueryApprovedChaincodeDefinitionResult
	(*lifecycle.CheckCommitReadinessResult)(nil),             // 19: lifecycle.CheckCommitReadinessResult
	(*lifecycle.CommitChaincodeDefinitionResult)(nil),        // 20: lifecycle.CommitChaincodeDefinitionResult
	(*lifecycle.QueryChaincodeDefinitionResult)(nil),         // 21: lifecycle.QueryChaincodeDefinitionResult
	(*lifecycle.QueryChaincodeDefinitionsResult)(nil),        // 22: lifecycle.QueryChaincodeDefinitionsResult
}
var file_systemcc_lifecycle_lifecycle_proto_depIdxs = []int32{
	6,  // 0: hlfsdk.service.systemcc.lifecyclecc.ApproveChaincodeDefinitionForMyOrgRequest.args:type_name -> lifecycle.ApproveChaincodeDefinitionForMyOrgArgs
	7,  // 1: hlfsdk.service.systemcc.lifecyclecc.QueryApprovedChaincodeDefinitionRequest.args:type_name -> lifecycle.QueryApprovedChaincodeDefinitionArgs
	8,  // 2: hlfsdk.service.systemcc.lifecyclecc.CheckCommitReadinessRequest.args:type_name -> lifecycle.CheckCommitReadinessArgs
	9,  // 3: hlfsdk.service.systemcc.lifecyclecc.CommitChaincodeDefinitionRequest.args:type_name -> lifecycle.CommitChaincodeDefinitionArgs
	10, // 4: hlfsdk.service.systemcc.lifecyclecc.QueryChaincodeDefinitionRequest.args:type_name -> lifecycle.QueryChaincodeDefinitionArgs
	11, // 5: hlfsdk.service.systemcc.lifecyclecc.QueryChaincodeDefinitionsRequest.args:type_name -> lifecycle.QueryChaincodeDefinitionsArgs
	12, // 6: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryInstalledChaincodes:input_type -> google.protobuf.Empty
	13, // 7: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryInstalledChaincode:input_type -> lifecycle.QueryInstalledChaincodeArgs
	14, // 8: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.InstallChaincode:input_type -> lifecycle.InstallChaincodeArgs
	0,  // 9: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.ApproveChaincodeDefinitionForMyOrg:input_type -> hlfsdk.service.systemcc.lifecyclecc.ApproveChaincodeDefinitionForMyOrgRequest
	1,  // 10: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryApprovedChaincodeDefinition:input_type -> hlfsdk.service.systemcc.lifecyclecc.QueryApprovedChaincodeDefinitionRequest
	2,  // 11: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.CheckCommitReadiness:input_type -> hlfsdk.service.systemcc.lifecyclecc.CheckCommitReadinessRequest
	3,  // 12: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.CommitChaincodeDefinition:input_type -> hlfsdk.service.systemcc.lifecyclecc.CommitChaincodeDefinitionRequest
	4,  // 13: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryChaincodeDefinition:input_type -> hlfsdk.service.systemcc.lifecyclecc.QueryChaincodeDefinitionRequest
	5,  // 14: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryChaincodeDefinitions:input_type -> hlfsdk.service.systemcc.lifecyclecc.QueryChaincodeDefinitionsRequest
	15, // 15: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryInstalledChaincodes:output_type -> lifecycle.QueryInstalledChaincodesResult
	16, // 16: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryInstalledChaincode:output_type -> lifecycle.QueryInstalledChaincodeResult
	17, // 17: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.InstallChaincode:output_type -> lifecycle.InstallChaincodeResult
	12, // 18: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.ApproveChaincodeDefinitionForMyOrg:output_type -> google.protobuf.Empty
	18, // 19: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryApprovedChaincodeDefinition:output_type -> lifecycle.QueryApprovedChaincodeDefinitionResult
	19, // 20: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.CheckCommitReadiness:output_type -> lifecycle.CheckCommitReadinessResult
	20, // 21: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.CommitChaincodeDefinition:output_type -> lifecycle.CommitChaincodeDefinitionResult
	21, // 22: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryChaincodeDefinition:output_type -> lifecycle.QueryChaincodeDefinitionResult
	22, // 23: hlfsdk.service.systemcc.lifecyclecc.LifecycleService.QueryChaincodeDefinitions:output_type -> lifecycle.QueryChaincodeDefinitionsResult
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_systemcc_lifecycle_lifecycle_proto_init() }
func file_systemcc_lifecycle_lifecycle_proto_init() {
	if File_systemcc_lifecycle_lifecycle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_systemcc_lifecycle_lifecycle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveChaincodeDefinitionForMyOrgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lifecycle_lifecycle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryApprovedChaincodeDefinitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lifecycle_lifecycle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitReadinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lifecycle_lifecycle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitChaincodeDefinitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lifecycle_lifecycle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaincodeDefinitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemcc_lifecycle_lifecycle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaincodeDefinitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_systemcc_lifecycle_lifecycle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_systemcc_lifecycle_lifecycle_proto_goTypes,
		DependencyIndexes: file_systemcc_lifecycle_lifecycle_proto_depIdxs,
		MessageInfos:      file_systemcc_lifecycle_lifecycle_proto_msgTypes,
	}.Build()
	File_systemcc_lifecycle_lifecycle_proto = out.File
	file_systemcc_lifecycle_lifecycle_proto_rawDesc = nil
	file_systemcc_lifecycle_lifecycle_proto_goTypes = nil
	file_systemcc_lifecycle_lifecycle_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LifecycleServiceClient is the client API for LifecycleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LifecycleServiceClient interface {
	// QueryInstalledChaincodes returns chaincode packages list installed on peer
	QueryInstalledChaincodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*lifecycle.QueryInstalledChaincodesResult, error)
	// QueryInstalledChaincode returns chaincode package installed on peer
	QueryInstalledChaincode(ctx context.Context, in *lifecycle.QueryInstalledChaincodeArgs, opts ...grpc.CallOption) (*lifecycle.QueryInstalledChaincodeResult, error)
	// InstallChaincode sets up chaincode package on peer
	InstallChaincode(ctx context.Context, in *lifecycle.InstallChaincodeArgs, opts ...grpc.CallOption) (*lifecycle.InstallChaincodeResult, error)
	// ApproveChaincodeDefinitionForMyOrg marks chaincode definition on a channel
	ApproveChaincodeDefinitionForMyOrg(ctx context.Context, in *ApproveChaincodeDefinitionForMyOrgRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// QueryApprovedChaincodeDefinition returns approved chaincode definition
	QueryApprovedChaincodeDefinition(ctx context.Context, in *QueryApprovedChaincodeDefinitionRequest, opts ...grpc.CallOption) (*lifecycle.QueryApprovedChaincodeDefinitionResult, error)
	// CheckCommitReadiness returns commitments statuses of participants on chaincode definition
	CheckCommitReadiness(ctx context.Context, in *CheckCommitReadinessRequest, opts ...grpc.CallOption) (*lifecycle.CheckCommitReadinessResult, error)
	// CommitChaincodeDefinition the chaincode definition on the channel
	CommitChaincodeDefinition(ctx context.Context, in *CommitChaincodeDefinitionRequest, opts ...grpc.CallOption) (*lifecycle.CommitChaincodeDefinitionResult, error)
	// QueryChaincodeDefinition returns chaincode definition committed on the channel
	QueryChaincodeDefinition(ctx context.Context, in *QueryChaincodeDefinitionRequest, opts ...grpc.CallOption) (*lifecycle.QueryChaincodeDefinitionResult, error)
	// QueryChaincodeDefinitions returns chaincode definitions committed on the channel
	QueryChaincodeDefinitions(ctx context.Context, in *QueryChaincodeDefinitionsRequest, opts ...grpc.CallOption) (*lifecycle.QueryChaincodeDefinitionsResult, error)
}

type lifecycleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLifecycleServiceClient(cc grpc.ClientConnInterface) LifecycleServiceClient {
	return &lifecycleServiceClient{cc}
}

func (c *lifecycleServiceClient) QueryInstalledChaincodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*lifecycle.QueryInstalledChaincodesResult, error) {
	out := new(lifecycle.QueryInstalledChaincodesResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryInstalledChaincodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) QueryInstalledChaincode(ctx context.Context, in *lifecycle.QueryInstalledChaincodeArgs, opts ...grpc.CallOption) (*lifecycle.QueryInstalledChaincodeResult, error) {
	out := new(lifecycle.QueryInstalledChaincodeResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryInstalledChaincode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) InstallChaincode(ctx context.Context, in *lifecycle.InstallChaincodeArgs, opts ...grpc.CallOption) (*lifecycle.InstallChaincodeResult, error) {
	out := new(lifecycle.InstallChaincodeResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/InstallChaincode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) ApproveChaincodeDefinitionForMyOrg(ctx context.Context, in *ApproveChaincodeDefinitionForMyOrgRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/ApproveChaincodeDefinitionForMyOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) QueryApprovedChaincodeDefinition(ctx context.Context, in *QueryApprovedChaincodeDefinitionRequest, opts ...grpc.CallOption) (*lifecycle.QueryApprovedChaincodeDefinitionResult, error) {
	out := new(lifecycle.QueryApprovedChaincodeDefinitionResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryApprovedChaincodeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) CheckCommitReadiness(ctx context.Context, in *CheckCommitReadinessRequest, opts ...grpc.CallOption) (*lifecycle.CheckCommitReadinessResult, error) {
	out := new(lifecycle.CheckCommitReadinessResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/CheckCommitReadiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) CommitChaincodeDefinition(ctx context.Context, in *CommitChaincodeDefinitionRequest, opts ...grpc.CallOption) (*lifecycle.CommitChaincodeDefinitionResult, error) {
	out := new(lifecycle.CommitChaincodeDefinitionResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/CommitChaincodeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) QueryChaincodeDefinition(ctx context.Context, in *QueryChaincodeDefinitionRequest, opts ...grpc.CallOption) (*lifecycle.QueryChaincodeDefinitionResult, error) {
	out := new(lifecycle.QueryChaincodeDefinitionResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryChaincodeDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifecycleServiceClient) QueryChaincodeDefinitions(ctx context.Context, in *QueryChaincodeDefinitionsRequest, opts ...grpc.CallOption) (*lifecycle.QueryChaincodeDefinitionsResult, error) {
	out := new(lifecycle.QueryChaincodeDefinitionsResult)
	err := c.cc.Invoke(ctx, "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryChaincodeDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifecycleServiceServer is the server API for LifecycleService service.
type LifecycleServiceServer interface {
	// QueryInstalledChaincodes returns chaincode packages list installed on peer
	QueryInstalledChaincodes(context.Context, *emptypb.Empty) (*lifecycle.QueryInstalledChaincodesResult, error)
	// QueryInstalledChaincode returns chaincode package installed on peer
	QueryInstalledChaincode(context.Context, *lifecycle.QueryInstalledChaincodeArgs) (*lifecycle.QueryInstalledChaincodeResult, error)
	// InstallChaincode sets up chaincode package on peer
	InstallChaincode(context.Context, *lifecycle.InstallChaincodeArgs) (*lifecycle.InstallChaincodeResult, error)
	// ApproveChaincodeDefinitionForMyOrg marks chaincode definition on a channel
	ApproveChaincodeDefinitionForMyOrg(context.Context, *ApproveChaincodeDefinitionForMyOrgRequest) (*emptypb.Empty, error)
	// QueryApprovedChaincodeDefinition returns approved chaincode definition
	QueryApprovedChaincodeDefinition(context.Context, *QueryApprovedChaincodeDefinitionRequest) (*lifecycle.QueryApprovedChaincodeDefinitionResult, error)
	// CheckCommitReadiness returns commitments statuses of participants on chaincode definition
	CheckCommitReadiness(context.Context, *CheckCommitReadinessRequest) (*lifecycle.CheckCommitReadinessResult, error)
	// CommitChaincodeDefinition the chaincode definition on the channel
	CommitChaincodeDefinition(context.Context, *CommitChaincodeDefinitionRequest) (*lifecycle.CommitChaincodeDefinitionResult, error)
	// QueryChaincodeDefinition returns chaincode definition committed on the channel
	QueryChaincodeDefinition(context.Context, *QueryChaincodeDefinitionRequest) (*lifecycle.QueryChaincodeDefinitionResult, error)
	// QueryChaincodeDefinitions returns chaincode definitions committed on the channel
	QueryChaincodeDefinitions(context.Context, *QueryChaincodeDefinitionsRequest) (*lifecycle.QueryChaincodeDefinitionsResult, error)
}

// UnimplementedLifecycleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLifecycleServiceServer struct {
}

func (*UnimplementedLifecycleServiceServer) QueryInstalledChaincodes(context.Context, *emptypb.Empty) (*lifecycle.QueryInstalledChaincodesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInstalledChaincodes not implemented")
}
func (*UnimplementedLifecycleServiceServer) QueryInstalledChaincode(context.Context, *lifecycle.QueryInstalledChaincodeArgs) (*lifecycle.QueryInstalledChaincodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInstalledChaincode not implemented")
}
func (*UnimplementedLifecycleServiceServer) InstallChaincode(context.Context, *lifecycle.InstallChaincodeArgs) (*lifecycle.InstallChaincodeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallChaincode not implemented")
}
func (*UnimplementedLifecycleServiceServer) ApproveChaincodeDefinitionForMyOrg(context.Context, *ApproveChaincodeDefinitionForMyOrgRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveChaincodeDefinitionForMyOrg not implemented")
}
func (*UnimplementedLifecycleServiceServer) QueryApprovedChaincodeDefinition(context.Context, *QueryApprovedChaincodeDefinitionRequest) (*lifecycle.QueryApprovedChaincodeDefinitionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApprovedChaincodeDefinition not implemented")
}
func (*UnimplementedLifecycleServiceServer) CheckCommitReadiness(context.Context, *CheckCommitReadinessRequest) (*lifecycle.CheckCommitReadinessResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCommitReadiness not implemented")
}
func (*UnimplementedLifecycleServiceServer) CommitChaincodeDefinition(context.Context, *CommitChaincodeDefinitionRequest) (*lifecycle.CommitChaincodeDefinitionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitChaincodeDefinition not implemented")
}
func (*UnimplementedLifecycleServiceServer) QueryChaincodeDefinition(context.Context, *QueryChaincodeDefinitionRequest) (*lifecycle.QueryChaincodeDefinitionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChaincodeDefinition not implemented")
}
func (*UnimplementedLifecycleServiceServer) QueryChaincodeDefinitions(context.Context, *QueryChaincodeDefinitionsRequest) (*lifecycle.QueryChaincodeDefinitionsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChaincodeDefinitions not implemented")
}

func RegisterLifecycleServiceServer(s *grpc.Server, srv LifecycleServiceServer) {
	s.RegisterService(&_LifecycleService_serviceDesc, srv)
}

func _LifecycleService_QueryInstalledChaincodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).QueryInstalledChaincodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryInstalledChaincodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).QueryInstalledChaincodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_QueryInstalledChaincode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lifecycle.QueryInstalledChaincodeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).QueryInstalledChaincode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryInstalledChaincode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).QueryInstalledChaincode(ctx, req.(*lifecycle.QueryInstalledChaincodeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_InstallChaincode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(lifecycle.InstallChaincodeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).InstallChaincode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/InstallChaincode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).InstallChaincode(ctx, req.(*lifecycle.InstallChaincodeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_ApproveChaincodeDefinitionForMyOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveChaincodeDefinitionForMyOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).ApproveChaincodeDefinitionForMyOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/ApproveChaincodeDefinitionForMyOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).ApproveChaincodeDefinitionForMyOrg(ctx, req.(*ApproveChaincodeDefinitionForMyOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_QueryApprovedChaincodeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApprovedChaincodeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).QueryApprovedChaincodeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryApprovedChaincodeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).QueryApprovedChaincodeDefinition(ctx, req.(*QueryApprovedChaincodeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_CheckCommitReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCommitReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).CheckCommitReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/CheckCommitReadiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).CheckCommitReadiness(ctx, req.(*CheckCommitReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_CommitChaincodeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitChaincodeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).CommitChaincodeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/CommitChaincodeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).CommitChaincodeDefinition(ctx, req.(*CommitChaincodeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_QueryChaincodeDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChaincodeDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).QueryChaincodeDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryChaincodeDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).QueryChaincodeDefinition(ctx, req.(*QueryChaincodeDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifecycleService_QueryChaincodeDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChaincodeDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServiceServer).QueryChaincodeDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hlfsdk.service.systemcc.lifecyclecc.LifecycleService/QueryChaincodeDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServiceServer).QueryChaincodeDefinitions(ctx, req.(*QueryChaincodeDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LifecycleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hlfsdk.service.systemcc.lifecyclecc.LifecycleService",
	HandlerType: (*LifecycleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryInstalledChaincodes",
			Handler:    _LifecycleService_QueryInstalledChaincodes_Handler,
		},
		{
			MethodName: "QueryInstalledChaincode",
			Handler:    _LifecycleService_QueryInstalledChaincode_Handler,
		},
		{
			MethodName: "InstallChaincode",
			Handler:    _LifecycleService_InstallChaincode_Handler,
		},
		{
			MethodName: "ApproveChaincodeDefinitionForMyOrg",
			Handler:    _LifecycleService_ApproveChaincodeDefinitionForMyOrg_Handler,
		},
		{
			MethodName: "QueryApprovedChaincodeDefinition",
			Handler:    _LifecycleService_QueryApprovedChaincodeDefinition_Handler,
		},
		{
			MethodName: "CheckCommitReadiness",
			Handler:    _LifecycleService_CheckCommitReadiness_Handler,
		},
		{
			MethodName: "CommitChaincodeDefinition",
			Handler:    _LifecycleService_CommitChaincodeDefinition_Handler,
		},
		{
			MethodName: "QueryChaincodeDefinition",
			Handler:    _LifecycleService_QueryChaincodeDefinition_Handler,
		},
		{
			MethodName: "QueryChaincodeDefinitions",
			Handler:    _LifecycleService_QueryChaincodeDefinitions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systemcc/lifecycle/lifecycle.proto",
}
